
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08005f78  08005f78  00015f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006288  08006288  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006288  08006288  00016288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006290  08006290  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006294  08006294  00016294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  200001dc  08006474  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006474  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009caf  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000180c  00000000  00000000  00029ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015643  00000000  00000000  0002ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e64  00000000  00000000  000422f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bf38  00000000  00000000  0004a157  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d608f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  000d610c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f60 	.word	0x08005f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005f60 	.word	0x08005f60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f92f 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f002 fd7e 	bl	8003a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f939 	bl	8001232 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f90f 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000004 	.word	0x20000004
 8001020:	20000204 	.word	0x20000204

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000204 	.word	0x20000204

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000004 	.word	0x20000004

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5c 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e159      	b.n	800151c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8148 	bne.w	8001516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x4a>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d123      	bne.n	80012de <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	69b9      	ldr	r1, [r7, #24]
 80012da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0203 	and.w	r2, r3, #3
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00b      	beq.n	8001332 <HAL_GPIO_Init+0xe6>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001326:	2b11      	cmp	r3, #17
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b12      	cmp	r3, #18
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a2 	beq.w	8001516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_GPIO_Init+0x2e4>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x202>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2f0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x1fe>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_GPIO_Init+0x2f4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x1fa>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_GPIO_Init+0x2f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x1f6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a44      	ldr	r2, [pc, #272]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x1f2>
 800143a:	2304      	movs	r3, #4
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800143e:	2307      	movs	r3, #7
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_GPIO_Init+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_GPIO_Init+0x300>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_GPIO_Init+0x300>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014bc:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_GPIO_Init+0x300>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_GPIO_Init+0x300>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_GPIO_Init+0x300>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_GPIO_Init+0x300>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_GPIO_Init+0x300>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f aea2 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	3724      	adds	r7, #36	; 0x24
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e22d      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d2:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4ba0      	ldr	r3, [pc, #640]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b9d      	ldr	r3, [pc, #628]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e208      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x74>
 800161a:	4b91      	ldr	r3, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a90      	ldr	r2, [pc, #576]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8a      	ldr	r2, [pc, #552]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 800164c:	4b84      	ldr	r3, [pc, #528]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a83      	ldr	r2, [pc, #524]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a80      	ldr	r2, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fcda 	bl	8001024 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fcd6 	bl	8001024 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1cd      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xc0>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fcc6 	bl	8001024 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fcc2 	bl	8001024 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1b9      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0xe8>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e18d      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4952      	ldr	r1, [pc, #328]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x2b0>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fc7b 	bl	8001024 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fc77 	bl	8001024 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e16e      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4940      	ldr	r1, [pc, #256]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x2b0>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fc5a 	bl	8001024 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fc56 	bl	8001024 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e14d      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d030      	beq.n	8001800 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_RCC_OscConfig+0x2b4>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fc3a 	bl	8001024 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc36 	bl	8001024 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e12d      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x200>
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_OscConfig+0x2b4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fc23 	bl	8001024 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc1f 	bl	8001024 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e116      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a0 	beq.w	800194e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d121      	bne.n	800188e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_RCC_OscConfig+0x2b8>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fbe5 	bl	8001024 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	e011      	b.n	8001882 <HAL_RCC_OscConfig+0x2ce>
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	42470000 	.word	0x42470000
 8001868:	42470e80 	.word	0x42470e80
 800186c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001870:	f7ff fbd8 	bl	8001024 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0cf      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x478>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2f0>
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
 80018a2:	e01c      	b.n	80018de <HAL_RCC_OscConfig+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x312>
 80018ac:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a5f      	ldr	r2, [pc, #380]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a5c      	ldr	r2, [pc, #368]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x32a>
 80018c6:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
 80018d2:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a56      	ldr	r2, [pc, #344]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d015      	beq.n	8001912 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb9d 	bl	8001024 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb99 	bl	8001024 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e08e      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ee      	beq.n	80018ee <HAL_RCC_OscConfig+0x33a>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb87 	bl	8001024 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff fb83 	bl	8001024 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e078      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a3a      	ldr	r2, [pc, #232]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d064      	beq.n	8001a20 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001956:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d05c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d141      	bne.n	80019ee <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <HAL_RCC_OscConfig+0x480>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb58 	bl	8001024 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fb54 	bl	8001024 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04b      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	491d      	ldr	r1, [pc, #116]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_RCC_OscConfig+0x480>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb2d 	bl	8001024 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb29 	bl	8001024 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e020      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x41a>
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_RCC_OscConfig+0x480>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fb16 	bl	8001024 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fb12 	bl	8001024 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x47c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x448>
 8001a1a:	e001      	b.n	8001a20 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	42470060 	.word	0x42470060

08001a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0ca      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d90c      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b6      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494c      	ldr	r1, [pc, #304]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d044      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07d      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06d      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e065      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4933      	ldr	r1, [pc, #204]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b28:	f7ff fa7c 	bl	8001024 <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff fa78 	bl	8001024 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04d      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d20c      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_RCC_ClockConfig+0x1b4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e030      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4915      	ldr	r1, [pc, #84]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f81d 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff f9de 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08006014 	.word	0x08006014
 8001bf8:	20000008 	.word	0x20000008

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d007      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x32>
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d008      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x38>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80b4 	bne.w	8001d90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b5e      	ldr	r3, [pc, #376]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c2a:	60bb      	str	r3, [r7, #8]
       break;
 8001c2c:	e0b3      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2e:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c30:	60bb      	str	r3, [r7, #8]
      break;
 8001c32:	e0b0      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d04a      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	f04f 0400 	mov.w	r4, #0
 8001c54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	ea03 0501 	and.w	r5, r3, r1
 8001c60:	ea04 0602 	and.w	r6, r4, r2
 8001c64:	4629      	mov	r1, r5
 8001c66:	4632      	mov	r2, r6
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	f04f 0400 	mov.w	r4, #0
 8001c70:	0154      	lsls	r4, r2, #5
 8001c72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c76:	014b      	lsls	r3, r1, #5
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	1b49      	subs	r1, r1, r5
 8001c7e:	eb62 0206 	sbc.w	r2, r2, r6
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f04f 0400 	mov.w	r4, #0
 8001c8a:	0194      	lsls	r4, r2, #6
 8001c8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c90:	018b      	lsls	r3, r1, #6
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	eb64 0402 	sbc.w	r4, r4, r2
 8001c98:	f04f 0100 	mov.w	r1, #0
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	00e2      	lsls	r2, r4, #3
 8001ca2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ca6:	00d9      	lsls	r1, r3, #3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4614      	mov	r4, r2
 8001cac:	195b      	adds	r3, r3, r5
 8001cae:	eb44 0406 	adc.w	r4, r4, r6
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	0262      	lsls	r2, r4, #9
 8001cbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001cc0:	0259      	lsls	r1, r3, #9
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4621      	mov	r1, r4
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f04f 0400 	mov.w	r4, #0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	f7fe ffc0 	bl	8000c58 <__aeabi_uldivmod>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e049      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	f04f 0400 	mov.w	r4, #0
 8001cea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	ea03 0501 	and.w	r5, r3, r1
 8001cf6:	ea04 0602 	and.w	r6, r4, r2
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	f04f 0400 	mov.w	r4, #0
 8001d06:	0154      	lsls	r4, r2, #5
 8001d08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d0c:	014b      	lsls	r3, r1, #5
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4622      	mov	r2, r4
 8001d12:	1b49      	subs	r1, r1, r5
 8001d14:	eb62 0206 	sbc.w	r2, r2, r6
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f04f 0400 	mov.w	r4, #0
 8001d20:	0194      	lsls	r4, r2, #6
 8001d22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	1a5b      	subs	r3, r3, r1
 8001d2a:	eb64 0402 	sbc.w	r4, r4, r2
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	00e2      	lsls	r2, r4, #3
 8001d38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d3c:	00d9      	lsls	r1, r3, #3
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	195b      	adds	r3, r3, r5
 8001d44:	eb44 0406 	adc.w	r4, r4, r6
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	02a2      	lsls	r2, r4, #10
 8001d52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d56:	0299      	lsls	r1, r3, #10
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	4621      	mov	r1, r4
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 0400 	mov.w	r4, #0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4623      	mov	r3, r4
 8001d6a:	f7fe ff75 	bl	8000c58 <__aeabi_uldivmod>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d92:	60bb      	str	r3, [r7, #8]
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	68bb      	ldr	r3, [r7, #8]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4601      	mov	r1, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08006024 	.word	0x08006024

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffdc 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df4:	4601      	mov	r1, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08006024 	.word	0x08006024

08001e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e01d      	b.n	8001e62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f001 fe4e 	bl	8003adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f000 f9ee 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e01d      	b.n	8001eb8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f815 	bl	8001ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 f9c3 	bl	8002234 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fc4a 	bl	8002780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_TIM_PWM_Start+0x60>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d107      	bne.n	8001f06 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40010000 	.word	0x40010000

08001f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0b4      	b.n	80020bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	f200 809f 	bhi.w	80020a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001fa5 	.word	0x08001fa5
 8001f74:	080020a9 	.word	0x080020a9
 8001f78:	080020a9 	.word	0x080020a9
 8001f7c:	080020a9 	.word	0x080020a9
 8001f80:	08001fe5 	.word	0x08001fe5
 8001f84:	080020a9 	.word	0x080020a9
 8001f88:	080020a9 	.word	0x080020a9
 8001f8c:	080020a9 	.word	0x080020a9
 8001f90:	08002027 	.word	0x08002027
 8001f94:	080020a9 	.word	0x080020a9
 8001f98:	080020a9 	.word	0x080020a9
 8001f9c:	080020a9 	.word	0x080020a9
 8001fa0:	08002067 	.word	0x08002067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9c2 	bl	8002334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0204 	bic.w	r2, r2, #4
 8001fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6999      	ldr	r1, [r3, #24]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	619a      	str	r2, [r3, #24]
      break;
 8001fe2:	e062      	b.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fa08 	bl	8002400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699a      	ldr	r2, [r3, #24]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6999      	ldr	r1, [r3, #24]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	021a      	lsls	r2, r3, #8
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
      break;
 8002024:	e041      	b.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fa53 	bl	80024d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0208 	orr.w	r2, r2, #8
 8002040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0204 	bic.w	r2, r2, #4
 8002050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69d9      	ldr	r1, [r3, #28]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	61da      	str	r2, [r3, #28]
      break;
 8002064:	e021      	b.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 fa9d 	bl	80025ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69d9      	ldr	r1, [r3, #28]
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	021a      	lsls	r2, r3, #8
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	61da      	str	r2, [r3, #28]
      break;
 80020a6:	e000      	b.n	80020aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80020a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_ConfigClockSource+0x18>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0a6      	b.n	800222a <HAL_TIM_ConfigClockSource+0x166>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d067      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x120>
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d80b      	bhi.n	8002130 <HAL_TIM_ConfigClockSource+0x6c>
 8002118:	2b10      	cmp	r3, #16
 800211a:	d073      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0x140>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d802      	bhi.n	8002126 <HAL_TIM_ConfigClockSource+0x62>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d06f      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002124:	e078      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002126:	2b20      	cmp	r3, #32
 8002128:	d06c      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0x140>
 800212a:	2b30      	cmp	r3, #48	; 0x30
 800212c:	d06a      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800212e:	e073      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002130:	2b70      	cmp	r3, #112	; 0x70
 8002132:	d00d      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x8c>
 8002134:	2b70      	cmp	r3, #112	; 0x70
 8002136:	d804      	bhi.n	8002142 <HAL_TIM_ConfigClockSource+0x7e>
 8002138:	2b50      	cmp	r3, #80	; 0x50
 800213a:	d033      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xe0>
 800213c:	2b60      	cmp	r3, #96	; 0x60
 800213e:	d041      	beq.n	80021c4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002140:	e06a      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002146:	d066      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0x152>
 8002148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800214c:	d017      	beq.n	800217e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800214e:	e063      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f000 faee 	bl	8002740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002172:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
      break;
 800217c:	e04c      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6899      	ldr	r1, [r3, #8]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f000 fad7 	bl	8002740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a0:	609a      	str	r2, [r3, #8]
      break;
 80021a2:	e039      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f000 fa4b 	bl	800264c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2150      	movs	r1, #80	; 0x50
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 faa4 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 80021c2:	e029      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f000 fa6a 	bl	80026aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2160      	movs	r1, #96	; 0x60
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fa94 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 80021e2:	e019      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	461a      	mov	r2, r3
 80021f2:	f000 fa2b 	bl	800264c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fa84 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002202:	e009      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f000 fa7b 	bl	800270a <TIM_ITRx_SetConfig>
      break;
 8002214:	e000      	b.n	8002218 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a34      	ldr	r2, [pc, #208]	; (8002318 <TIM_Base_SetConfig+0xe4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00f      	beq.n	800226c <TIM_Base_SetConfig+0x38>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002252:	d00b      	beq.n	800226c <TIM_Base_SetConfig+0x38>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a31      	ldr	r2, [pc, #196]	; (800231c <TIM_Base_SetConfig+0xe8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <TIM_Base_SetConfig+0x38>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a30      	ldr	r2, [pc, #192]	; (8002320 <TIM_Base_SetConfig+0xec>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_Base_SetConfig+0x38>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <TIM_Base_SetConfig+0xf0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d108      	bne.n	800227e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <TIM_Base_SetConfig+0xe4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01b      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228c:	d017      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <TIM_Base_SetConfig+0xe8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <TIM_Base_SetConfig+0xec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00f      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a20      	ldr	r2, [pc, #128]	; (8002324 <TIM_Base_SetConfig+0xf0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00b      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <TIM_Base_SetConfig+0xf4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1e      	ldr	r2, [pc, #120]	; (800232c <TIM_Base_SetConfig+0xf8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <TIM_Base_SetConfig+0xfc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <TIM_Base_SetConfig+0xe4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800

08002334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0201 	bic.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f023 0302 	bic.w	r3, r3, #2
 800237c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <TIM_OC1_SetConfig+0xc8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10c      	bne.n	80023aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0308 	bic.w	r3, r3, #8
 8002396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <TIM_OC1_SetConfig+0xc8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40010000 	.word	0x40010000

08002400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0210 	bic.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0320 	bic.w	r3, r3, #32
 800244a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <TIM_OC2_SetConfig+0xd4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d10d      	bne.n	800247c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800247a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <TIM_OC2_SetConfig+0xd4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d113      	bne.n	80024ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800248a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	621a      	str	r2, [r3, #32]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000

080024d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <TIM_OC3_SetConfig+0xd0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10d      	bne.n	8002552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800253c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <TIM_OC3_SetConfig+0xd0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d113      	bne.n	8002582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40010000 	.word	0x40010000

080025ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	031b      	lsls	r3, r3, #12
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <TIM_OC4_SetConfig+0x9c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d109      	bne.n	8002620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000

0800264c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0201 	bic.w	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 030a 	bic.w	r3, r3, #10
 8002688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	621a      	str	r2, [r3, #32]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b087      	sub	sp, #28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0210 	bic.w	r2, r3, #16
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	031b      	lsls	r3, r3, #12
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	621a      	str	r2, [r3, #32]
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	f043 0307 	orr.w	r3, r3, #7
 800272c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	021a      	lsls	r2, r3, #8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	431a      	orrs	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2201      	movs	r2, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1a      	ldr	r2, [r3, #32]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	fa01 f303 	lsl.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027de:	2302      	movs	r3, #2
 80027e0:	e032      	b.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	4313      	orrs	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e03f      	b.n	80028e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f001 f9c8 	bl	8003c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f90b 	bl	8002ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b088      	sub	sp, #32
 80028f2:	af02      	add	r7, sp, #8
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b20      	cmp	r3, #32
 800290c:	f040 8083 	bne.w	8002a16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Transmit+0x2e>
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e07b      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_UART_Transmit+0x40>
 800292a:	2302      	movs	r3, #2
 800292c:	e074      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2221      	movs	r2, #33	; 0x21
 8002940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002944:	f7fe fb6e 	bl	8001024 <HAL_GetTick>
 8002948:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	88fa      	ldrh	r2, [r7, #6]
 800294e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002956:	e042      	b.n	80029de <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296e:	d122      	bne.n	80029b6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f850 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e046      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800299c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3302      	adds	r3, #2
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e017      	b.n	80029de <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	e013      	b.n	80029de <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f82d 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e023      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	60ba      	str	r2, [r7, #8]
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1b7      	bne.n	8002958 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f814 	bl	8002a20 <UART_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00a      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a30:	e02c      	b.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a38:	d028      	beq.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d007      	beq.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a40:	f7fe faf0 	bl	8001024 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d21d      	bcs.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e00f      	b.n	8002aac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d0c3      	beq.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002af4:	f023 030c 	bic.w	r3, r3, #12
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b20:	f040 80e4 	bne.w	8002cec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4aab      	ldr	r2, [pc, #684]	; (8002dd8 <UART_SetConfig+0x324>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <UART_SetConfig+0x84>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4aaa      	ldr	r2, [pc, #680]	; (8002ddc <UART_SetConfig+0x328>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d16c      	bne.n	8002c12 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b38:	f7ff f958 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	441a      	add	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4aa3      	ldr	r2, [pc, #652]	; (8002de0 <UART_SetConfig+0x32c>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	011c      	lsls	r4, r3, #4
 8002b5c:	f7ff f946 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009a      	lsls	r2, r3, #2
 8002b6a:	441a      	add	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b76:	f7ff f939 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	4a93      	ldr	r2, [pc, #588]	; (8002de0 <UART_SetConfig+0x32c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2264      	movs	r2, #100	; 0x64
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	1aeb      	subs	r3, r5, r3
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a8e      	ldr	r2, [pc, #568]	; (8002de0 <UART_SetConfig+0x32c>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bb2:	441c      	add	r4, r3
 8002bb4:	f7ff f91a 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009a      	lsls	r2, r3, #2
 8002bc2:	441a      	add	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bce:	f7ff f90d 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009a      	lsls	r2, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <UART_SetConfig+0x32c>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	; 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1aeb      	subs	r3, r5, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a78      	ldr	r2, [pc, #480]	; (8002de0 <UART_SetConfig+0x32c>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 0207 	and.w	r2, r3, #7
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4422      	add	r2, r4
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e154      	b.n	8002ebc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c12:	f7ff f8d7 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a6c      	ldr	r2, [pc, #432]	; (8002de0 <UART_SetConfig+0x32c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	011c      	lsls	r4, r3, #4
 8002c36:	f7ff f8c5 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c50:	f7ff f8b8 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4a5d      	ldr	r2, [pc, #372]	; (8002de0 <UART_SetConfig+0x32c>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2264      	movs	r2, #100	; 0x64
 8002c74:	fb02 f303 	mul.w	r3, r2, r3
 8002c78:	1aeb      	subs	r3, r5, r3
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	3332      	adds	r3, #50	; 0x32
 8002c7e:	4a58      	ldr	r2, [pc, #352]	; (8002de0 <UART_SetConfig+0x32c>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c8c:	441c      	add	r4, r3
 8002c8e:	f7ff f899 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ca8:	f7ff f88c 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009a      	lsls	r2, r3, #2
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4a47      	ldr	r2, [pc, #284]	; (8002de0 <UART_SetConfig+0x32c>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	2264      	movs	r2, #100	; 0x64
 8002ccc:	fb02 f303 	mul.w	r3, r2, r3
 8002cd0:	1aeb      	subs	r3, r5, r3
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	3332      	adds	r3, #50	; 0x32
 8002cd6:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <UART_SetConfig+0x32c>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	f003 0207 	and.w	r2, r3, #7
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4422      	add	r2, r4
 8002ce8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002cea:	e0e7      	b.n	8002ebc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <UART_SetConfig+0x324>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <UART_SetConfig+0x24c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <UART_SetConfig+0x328>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d171      	bne.n	8002de4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d00:	f7ff f874 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <UART_SetConfig+0x32c>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	011c      	lsls	r4, r3, #4
 8002d24:	f7ff f862 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009a      	lsls	r2, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d3e:	f7ff f855 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <UART_SetConfig+0x32c>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2264      	movs	r2, #100	; 0x64
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	1aeb      	subs	r3, r5, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <UART_SetConfig+0x32c>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	441c      	add	r4, r3
 8002d7a:	f7ff f837 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d94:	f7ff f82a 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <UART_SetConfig+0x32c>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	2264      	movs	r2, #100	; 0x64
 8002db8:	fb02 f303 	mul.w	r3, r2, r3
 8002dbc:	1aeb      	subs	r3, r5, r3
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	3332      	adds	r3, #50	; 0x32
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <UART_SetConfig+0x32c>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4422      	add	r2, r4
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	e071      	b.n	8002ebc <UART_SetConfig+0x408>
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002de4:	f7fe ffee 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <UART_SetConfig+0x410>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	011c      	lsls	r4, r3, #4
 8002e08:	f7fe ffdc 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009a      	lsls	r2, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e22:	f7fe ffcf 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <UART_SetConfig+0x410>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2264      	movs	r2, #100	; 0x64
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	1aeb      	subs	r3, r5, r3
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	3332      	adds	r3, #50	; 0x32
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <UART_SetConfig+0x410>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e5c:	441c      	add	r4, r3
 8002e5e:	f7fe ffb1 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e78:	f7fe ffa4 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009a      	lsls	r2, r3, #2
 8002e86:	441a      	add	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <UART_SetConfig+0x410>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2264      	movs	r2, #100	; 0x64
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	1aeb      	subs	r3, r5, r3
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <UART_SetConfig+0x410>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	f003 020f 	and.w	r2, r3, #15
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4422      	add	r2, r4
 8002eb8:	609a      	str	r2, [r3, #8]
}
 8002eba:	e7ff      	b.n	8002ebc <UART_SetConfig+0x408>
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec4:	51eb851f 	.word	0x51eb851f

08002ec8 <Start>:
int check;
float distance;
int numtick;
const float speedOfSound = 0.0343/2;
float range;
void Start(){
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	af00      	add	r7, sp, #0

	Turn();
 8002ecc:	f000 f9aa 	bl	8003224 <Turn>
	x = 25;
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <Start+0x118>)
 8002ed2:	2219      	movs	r2, #25
 8002ed4:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"x= %.1d\r\n", x);
 8002ed6:	4b42      	ldr	r3, [pc, #264]	; (8002fe0 <Start+0x118>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4941      	ldr	r1, [pc, #260]	; (8002fe4 <Start+0x11c>)
 8002ede:	4842      	ldr	r0, [pc, #264]	; (8002fe8 <Start+0x120>)
 8002ee0:	f001 fc5c 	bl	800479c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8002ee4:	4840      	ldr	r0, [pc, #256]	; (8002fe8 <Start+0x120>)
 8002ee6:	f7fd f97b 	bl	80001e0 <strlen>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef2:	493d      	ldr	r1, [pc, #244]	; (8002fe8 <Start+0x120>)
 8002ef4:	483d      	ldr	r0, [pc, #244]	; (8002fec <Start+0x124>)
 8002ef6:	f7ff fcfa 	bl	80028ee <HAL_UART_Transmit>
	y = 25;
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <Start+0x128>)
 8002efc:	2219      	movs	r2, #25
 8002efe:	601a      	str	r2, [r3, #0]
	TIM3->CCR1 = TIM3->ARR* x/100;
 8002f00:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <Start+0x12c>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a36      	ldr	r2, [pc, #216]	; (8002fe0 <Start+0x118>)
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	4a39      	ldr	r2, [pc, #228]	; (8002ff4 <Start+0x12c>)
 8002f0e:	493a      	ldr	r1, [pc, #232]	; (8002ff8 <Start+0x130>)
 8002f10:	fba1 1303 	umull	r1, r3, r1, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = TIM3->ARR* y/100;
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <Start+0x12c>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <Start+0x128>)
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <Start+0x12c>)
 8002f26:	4934      	ldr	r1, [pc, #208]	; (8002ff8 <Start+0x130>)
 8002f28:	fba1 1303 	umull	r1, r3, r1, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	6393      	str	r3, [r2, #56]	; 0x38
	check = 1;
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <Start+0x134>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
	while(check == 1){
 8002f36:	e047      	b.n	8002fc8 <Start+0x100>
		check = Stop();
 8002f38:	f000 f91c 	bl	8003174 <Stop>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <Start+0x134>)
 8002f40:	601a      	str	r2, [r3, #0]
		linetrack(x, y);
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <Start+0x118>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <Start+0x128>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f000 f85d 	bl	800300c <linetrack>
		range = ultrasonic();
 8002f52:	f000 fa05 	bl	8003360 <ultrasonic>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <Start+0x138>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		checkrange(range, x, y);
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <Start+0x138>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd faf7 	bl	8000558 <__aeabi_f2d>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <Start+0x118>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <Start+0x128>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	ec45 4b10 	vmov	d0, r4, r5
 8002f7e:	f000 fa83 	bl	8003488 <checkrange>
		sprintf(uartBuf,"Range= %.1f\r\n", range);
 8002f82:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <Start+0x138>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fae6 	bl	8000558 <__aeabi_f2d>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	491b      	ldr	r1, [pc, #108]	; (8003004 <Start+0x13c>)
 8002f96:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <Start+0x120>)
 8002f98:	f001 fc00 	bl	800479c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8002f9c:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <Start+0x120>)
 8002f9e:	f7fd f91f 	bl	80001e0 <strlen>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	490f      	ldr	r1, [pc, #60]	; (8002fe8 <Start+0x120>)
 8002fac:	480f      	ldr	r0, [pc, #60]	; (8002fec <Start+0x124>)
 8002fae:	f7ff fc9e 	bl	80028ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <Start+0x120>)
 8002fb4:	f7fd f914 	bl	80001e0 <strlen>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc0:	4909      	ldr	r1, [pc, #36]	; (8002fe8 <Start+0x120>)
 8002fc2:	4811      	ldr	r0, [pc, #68]	; (8003008 <Start+0x140>)
 8002fc4:	f7ff fc93 	bl	80028ee <HAL_UART_Transmit>
	while(check == 1){
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <Start+0x134>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d0b3      	beq.n	8002f38 <Start+0x70>

	}
	TIM3->CCR1 = 0;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <Start+0x12c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <Start+0x12c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fdc:	bf00      	nop
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	2000020c 	.word	0x2000020c
 8002fe4:	08005f78 	.word	0x08005f78
 8002fe8:	20000298 	.word	0x20000298
 8002fec:	20000348 	.word	0x20000348
 8002ff0:	20000300 	.word	0x20000300
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	51eb851f 	.word	0x51eb851f
 8002ffc:	20000294 	.word	0x20000294
 8003000:	20000388 	.word	0x20000388
 8003004:	08005f84 	.word	0x08005f84
 8003008:	20000308 	.word	0x20000308

0800300c <linetrack>:

void linetrack(x, y){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	c = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8003016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800301a:	484c      	ldr	r0, [pc, #304]	; (800314c <linetrack+0x140>)
 800301c:	f7fe fa98 	bl	8001550 <HAL_GPIO_ReadPin>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <linetrack+0x144>)
 8003026:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"Left= %.1d\r\n", c);
 8003028:	4b49      	ldr	r3, [pc, #292]	; (8003150 <linetrack+0x144>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4949      	ldr	r1, [pc, #292]	; (8003154 <linetrack+0x148>)
 8003030:	4849      	ldr	r0, [pc, #292]	; (8003158 <linetrack+0x14c>)
 8003032:	f001 fbb3 	bl	800479c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003036:	4848      	ldr	r0, [pc, #288]	; (8003158 <linetrack+0x14c>)
 8003038:	f7fd f8d2 	bl	80001e0 <strlen>
 800303c:	4603      	mov	r3, r0
 800303e:	b29a      	uxth	r2, r3
 8003040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003044:	4944      	ldr	r1, [pc, #272]	; (8003158 <linetrack+0x14c>)
 8003046:	4845      	ldr	r0, [pc, #276]	; (800315c <linetrack+0x150>)
 8003048:	f7ff fc51 	bl	80028ee <HAL_UART_Transmit>

	d = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800304c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003050:	4843      	ldr	r0, [pc, #268]	; (8003160 <linetrack+0x154>)
 8003052:	f7fe fa7d 	bl	8001550 <HAL_GPIO_ReadPin>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	4b42      	ldr	r3, [pc, #264]	; (8003164 <linetrack+0x158>)
 800305c:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"Right)= %.1d\r\n", d);
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <linetrack+0x158>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4940      	ldr	r1, [pc, #256]	; (8003168 <linetrack+0x15c>)
 8003066:	483c      	ldr	r0, [pc, #240]	; (8003158 <linetrack+0x14c>)
 8003068:	f001 fb98 	bl	800479c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 800306c:	483a      	ldr	r0, [pc, #232]	; (8003158 <linetrack+0x14c>)
 800306e:	f7fd f8b7 	bl	80001e0 <strlen>
 8003072:	4603      	mov	r3, r0
 8003074:	b29a      	uxth	r2, r3
 8003076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307a:	4937      	ldr	r1, [pc, #220]	; (8003158 <linetrack+0x14c>)
 800307c:	4837      	ldr	r0, [pc, #220]	; (800315c <linetrack+0x150>)
 800307e:	f7ff fc36 	bl	80028ee <HAL_UART_Transmit>
	Stop();
 8003082:	f000 f877 	bl	8003174 <Stop>
	if (c == 1){
 8003086:	4b32      	ldr	r3, [pc, #200]	; (8003150 <linetrack+0x144>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d12a      	bne.n	80030e4 <linetrack+0xd8>
		while(c == 1){
 800308e:	e018      	b.n	80030c2 <linetrack+0xb6>
			checkrange(range, x, y);
			sprintf(uartBuf,"Range= %.1f\r\n", range);

			HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
			HAL_UART_Transmit(&huart6, (uint8_t*)uartBuf, strlen(uartBuf), 1000)*/
			TIM3->CCR2 = 0;
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <linetrack+0x160>)
 8003092:	2200      	movs	r2, #0
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
			c = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8003096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800309a:	482c      	ldr	r0, [pc, #176]	; (800314c <linetrack+0x140>)
 800309c:	f7fe fa58 	bl	8001550 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <linetrack+0x144>)
 80030a6:	601a      	str	r2, [r3, #0]
			d = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80030a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ac:	482c      	ldr	r0, [pc, #176]	; (8003160 <linetrack+0x154>)
 80030ae:	f7fe fa4f 	bl	8001550 <HAL_GPIO_ReadPin>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <linetrack+0x158>)
 80030b8:	601a      	str	r2, [r3, #0]
			if (d ==1){
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <linetrack+0x158>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d004      	beq.n	80030cc <linetrack+0xc0>
		while(c == 1){
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <linetrack+0x144>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d0e2      	beq.n	8003090 <linetrack+0x84>
 80030ca:	e000      	b.n	80030ce <linetrack+0xc2>
				break;
 80030cc:	bf00      	nop
			}

			}
		TIM3->CCR2 = TIM3-> ARR* y/100;
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <linetrack+0x160>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	4a24      	ldr	r2, [pc, #144]	; (800316c <linetrack+0x160>)
 80030da:	4925      	ldr	r1, [pc, #148]	; (8003170 <linetrack+0x164>)
 80030dc:	fba1 1303 	umull	r1, r3, r1, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	6393      	str	r3, [r2, #56]	; 0x38



		}
	if (d == 1){
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <linetrack+0x158>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d12a      	bne.n	8003142 <linetrack+0x136>
		while(d == 1){
 80030ec:	e018      	b.n	8003120 <linetrack+0x114>
			/*range = ultrasonic();
			checkrange(range, x, y);
			sprintf(uartBuf,"Range= %.1f\r\n", range);
			HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
			HAL_UART_Transmit(&huart6, (uint8_t*)uartBuf, strlen(uartBuf), 1000);*/
			TIM3->CCR1 = 0;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <linetrack+0x160>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34
			c = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80030f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030f8:	4814      	ldr	r0, [pc, #80]	; (800314c <linetrack+0x140>)
 80030fa:	f7fe fa29 	bl	8001550 <HAL_GPIO_ReadPin>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <linetrack+0x144>)
 8003104:	601a      	str	r2, [r3, #0]
			d = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800310a:	4815      	ldr	r0, [pc, #84]	; (8003160 <linetrack+0x154>)
 800310c:	f7fe fa20 	bl	8001550 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <linetrack+0x158>)
 8003116:	601a      	str	r2, [r3, #0]
			if (c == 1){
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <linetrack+0x144>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d004      	beq.n	800312a <linetrack+0x11e>
		while(d == 1){
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <linetrack+0x158>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d0e2      	beq.n	80030ee <linetrack+0xe2>
 8003128:	e000      	b.n	800312c <linetrack+0x120>
				break;
 800312a:	bf00      	nop

			}
			}
		TIM3->CCR1 = TIM3-> ARR* x/100;
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <linetrack+0x160>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <linetrack+0x160>)
 8003138:	490d      	ldr	r1, [pc, #52]	; (8003170 <linetrack+0x164>)
 800313a:	fba1 1303 	umull	r1, r3, r1, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40020400 	.word	0x40020400
 8003150:	200002fc 	.word	0x200002fc
 8003154:	08005f94 	.word	0x08005f94
 8003158:	20000298 	.word	0x20000298
 800315c:	20000348 	.word	0x20000348
 8003160:	40020000 	.word	0x40020000
 8003164:	20000304 	.word	0x20000304
 8003168:	08005fa4 	.word	0x08005fa4
 800316c:	40000400 	.word	0x40000400
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <Stop>:
int Stop(){
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
	c = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8003178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800317c:	4821      	ldr	r0, [pc, #132]	; (8003204 <Stop+0x90>)
 800317e:	f7fe f9e7 	bl	8001550 <HAL_GPIO_ReadPin>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <Stop+0x94>)
 8003188:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"StopLeft= %.1d\r\n", c);
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <Stop+0x94>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	491e      	ldr	r1, [pc, #120]	; (800320c <Stop+0x98>)
 8003192:	481f      	ldr	r0, [pc, #124]	; (8003210 <Stop+0x9c>)
 8003194:	f001 fb02 	bl	800479c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003198:	481d      	ldr	r0, [pc, #116]	; (8003210 <Stop+0x9c>)
 800319a:	f7fd f821 	bl	80001e0 <strlen>
 800319e:	4603      	mov	r3, r0
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a6:	491a      	ldr	r1, [pc, #104]	; (8003210 <Stop+0x9c>)
 80031a8:	481a      	ldr	r0, [pc, #104]	; (8003214 <Stop+0xa0>)
 80031aa:	f7ff fba0 	bl	80028ee <HAL_UART_Transmit>
	d = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80031ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031b2:	4819      	ldr	r0, [pc, #100]	; (8003218 <Stop+0xa4>)
 80031b4:	f7fe f9cc 	bl	8001550 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <Stop+0xa8>)
 80031be:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"StopRight)= %.1d\r\n", d);
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <Stop+0xa8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4916      	ldr	r1, [pc, #88]	; (8003220 <Stop+0xac>)
 80031c8:	4811      	ldr	r0, [pc, #68]	; (8003210 <Stop+0x9c>)
 80031ca:	f001 fae7 	bl	800479c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80031ce:	4810      	ldr	r0, [pc, #64]	; (8003210 <Stop+0x9c>)
 80031d0:	f7fd f806 	bl	80001e0 <strlen>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <Stop+0x9c>)
 80031de:	480d      	ldr	r0, [pc, #52]	; (8003214 <Stop+0xa0>)
 80031e0:	f7ff fb85 	bl	80028ee <HAL_UART_Transmit>
	if (c == 1){
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <Stop+0x94>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <Stop+0x88>
		if (d == 1){
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <Stop+0xa8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <Stop+0x84>
			return 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e002      	b.n	80031fe <Stop+0x8a>
		}else{
			return 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <Stop+0x8a>
		}
	}
	else{
		return 1 ;
 80031fc:	2301      	movs	r3, #1
	}

}
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020400 	.word	0x40020400
 8003208:	200002fc 	.word	0x200002fc
 800320c:	08005fb4 	.word	0x08005fb4
 8003210:	20000298 	.word	0x20000298
 8003214:	20000348 	.word	0x20000348
 8003218:	40020000 	.word	0x40020000
 800321c:	20000304 	.word	0x20000304
 8003220:	08005fc8 	.word	0x08005fc8

08003224 <Turn>:
void Turn(){
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)== GPIO_PIN_RESET){
 8003228:	e033      	b.n	8003292 <Turn+0x6e>
		c = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800322a:	2101      	movs	r1, #1
 800322c:	4843      	ldr	r0, [pc, #268]	; (800333c <Turn+0x118>)
 800322e:	f7fe f98f 	bl	8001550 <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	4b42      	ldr	r3, [pc, #264]	; (8003340 <Turn+0x11c>)
 8003238:	601a      	str	r2, [r3, #0]
		sprintf(uartBuf,"PIN0= %.1d\r\n", c);
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <Turn+0x11c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	4940      	ldr	r1, [pc, #256]	; (8003344 <Turn+0x120>)
 8003242:	4841      	ldr	r0, [pc, #260]	; (8003348 <Turn+0x124>)
 8003244:	f001 faaa 	bl	800479c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003248:	483f      	ldr	r0, [pc, #252]	; (8003348 <Turn+0x124>)
 800324a:	f7fc ffc9 	bl	80001e0 <strlen>
 800324e:	4603      	mov	r3, r0
 8003250:	b29a      	uxth	r2, r3
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	493c      	ldr	r1, [pc, #240]	; (8003348 <Turn+0x124>)
 8003258:	483c      	ldr	r0, [pc, #240]	; (800334c <Turn+0x128>)
 800325a:	f7ff fb48 	bl	80028ee <HAL_UART_Transmit>
		d = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 800325e:	2102      	movs	r1, #2
 8003260:	4836      	ldr	r0, [pc, #216]	; (800333c <Turn+0x118>)
 8003262:	f7fe f975 	bl	8001550 <HAL_GPIO_ReadPin>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <Turn+0x12c>)
 800326c:	601a      	str	r2, [r3, #0]
		sprintf(uartBuf,"PIN1)= %.1d\r\n", d);
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <Turn+0x12c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4937      	ldr	r1, [pc, #220]	; (8003354 <Turn+0x130>)
 8003276:	4834      	ldr	r0, [pc, #208]	; (8003348 <Turn+0x124>)
 8003278:	f001 fa90 	bl	800479c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 800327c:	4832      	ldr	r0, [pc, #200]	; (8003348 <Turn+0x124>)
 800327e:	f7fc ffaf 	bl	80001e0 <strlen>
 8003282:	4603      	mov	r3, r0
 8003284:	b29a      	uxth	r2, r3
 8003286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328a:	492f      	ldr	r1, [pc, #188]	; (8003348 <Turn+0x124>)
 800328c:	482f      	ldr	r0, [pc, #188]	; (800334c <Turn+0x128>)
 800328e:	f7ff fb2e 	bl	80028ee <HAL_UART_Transmit>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)== GPIO_PIN_RESET){
 8003292:	2101      	movs	r1, #1
 8003294:	4829      	ldr	r0, [pc, #164]	; (800333c <Turn+0x118>)
 8003296:	f7fe f95b 	bl	8001550 <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0c4      	beq.n	800322a <Turn+0x6>
	}
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)== GPIO_PIN_SET){
 80032a0:	2102      	movs	r1, #2
 80032a2:	4826      	ldr	r0, [pc, #152]	; (800333c <Turn+0x118>)
 80032a4:	f7fe f954 	bl	8001550 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d115      	bne.n	80032da <Turn+0xb6>
		TIM3->CCR2 = TIM3->ARR * 50/100;
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <Turn+0x134>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	2232      	movs	r2, #50	; 0x32
 80032b4:	fb02 f303 	mul.w	r3, r2, r3
 80032b8:	4a27      	ldr	r2, [pc, #156]	; (8003358 <Turn+0x134>)
 80032ba:	4928      	ldr	r1, [pc, #160]	; (800335c <Turn+0x138>)
 80032bc:	fba1 1303 	umull	r1, r3, r1, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	6393      	str	r3, [r2, #56]	; 0x38
		TIM3->CCR1 = 0;
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <Turn+0x134>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(1200);
 80032ca:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80032ce:	f7fd feb5 	bl	800103c <HAL_Delay>
		TIM3->CCR2 =0;
 80032d2:	4b21      	ldr	r3, [pc, #132]	; (8003358 <Turn+0x134>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
 80032d8:	e014      	b.n	8003304 <Turn+0xe0>
	}else{
		TIM3->CCR1 = TIM3->ARR * 50/100;
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <Turn+0x134>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	2232      	movs	r2, #50	; 0x32
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <Turn+0x134>)
 80032e6:	491d      	ldr	r1, [pc, #116]	; (800335c <Turn+0x138>)
 80032e8:	fba1 1303 	umull	r1, r3, r1, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	6353      	str	r3, [r2, #52]	; 0x34
		TIM3->CCR2 = 0;
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <Turn+0x134>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(1200);
 80032f6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80032fa:	f7fd fe9f 	bl	800103c <HAL_Delay>
		TIM3->CCR1 =0;
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <Turn+0x134>)
 8003300:	2200      	movs	r2, #0
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

	}
	TIM3->CCR1 = TIM3->ARR * 20/100;
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <Turn+0x134>)
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4619      	mov	r1, r3
 8003312:	4a11      	ldr	r2, [pc, #68]	; (8003358 <Turn+0x134>)
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <Turn+0x138>)
 8003316:	fba3 1301 	umull	r1, r3, r3, r1
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = TIM3->ARR * 20/100;
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <Turn+0x134>)
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4619      	mov	r1, r3
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <Turn+0x134>)
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <Turn+0x138>)
 8003330:	fba3 1301 	umull	r1, r3, r3, r1
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	6393      	str	r3, [r2, #56]	; 0x38

}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40020800 	.word	0x40020800
 8003340:	200002fc 	.word	0x200002fc
 8003344:	08005fdc 	.word	0x08005fdc
 8003348:	20000298 	.word	0x20000298
 800334c:	20000348 	.word	0x20000348
 8003350:	20000304 	.word	0x20000304
 8003354:	08005fec 	.word	0x08005fec
 8003358:	40000400 	.word	0x40000400
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <ultrasonic>:
float ultrasonic(){
 8003360:	b5b0      	push	{r4, r5, r7, lr}
 8003362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003364:	2200      	movs	r2, #0
 8003366:	2101      	movs	r1, #1
 8003368:	483f      	ldr	r0, [pc, #252]	; (8003468 <ultrasonic+0x108>)
 800336a:	f7fe f909 	bl	8001580 <HAL_GPIO_WritePin>
	usDelay(3);
 800336e:	2003      	movs	r0, #3
 8003370:	f000 fb52 	bl	8003a18 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2101      	movs	r1, #1
 8003378:	483b      	ldr	r0, [pc, #236]	; (8003468 <ultrasonic+0x108>)
 800337a:	f7fe f901 	bl	8001580 <HAL_GPIO_WritePin>
	usDelay(10);
 800337e:	200a      	movs	r0, #10
 8003380:	f000 fb4a 	bl	8003a18 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003384:	2200      	movs	r2, #0
 8003386:	2101      	movs	r1, #1
 8003388:	4837      	ldr	r0, [pc, #220]	; (8003468 <ultrasonic+0x108>)
 800338a:	f7fe f8f9 	bl	8001580 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_RESET);
 800338e:	bf00      	nop
 8003390:	2102      	movs	r1, #2
 8003392:	4835      	ldr	r0, [pc, #212]	; (8003468 <ultrasonic+0x108>)
 8003394:	f7fe f8dc 	bl	8001550 <HAL_GPIO_ReadPin>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f8      	beq.n	8003390 <ultrasonic+0x30>
	numtick = 0;
 800339e:	4b33      	ldr	r3, [pc, #204]	; (800346c <ultrasonic+0x10c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_SET)
 80033a4:	e007      	b.n	80033b6 <ultrasonic+0x56>
		{
		 	numtick++;
 80033a6:	4b31      	ldr	r3, [pc, #196]	; (800346c <ultrasonic+0x10c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <ultrasonic+0x10c>)
 80033ae:	6013      	str	r3, [r2, #0]
		 	usDelay(2);
 80033b0:	2002      	movs	r0, #2
 80033b2:	f000 fb31 	bl	8003a18 <usDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_SET)
 80033b6:	2102      	movs	r1, #2
 80033b8:	482b      	ldr	r0, [pc, #172]	; (8003468 <ultrasonic+0x108>)
 80033ba:	f7fe f8c9 	bl	8001550 <HAL_GPIO_ReadPin>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d0f0      	beq.n	80033a6 <ultrasonic+0x46>
		   };
	distance = (numtick+0.0f)*2.8*speedOfSound ;
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <ultrasonic+0x10c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003470 <ultrasonic+0x110>
 80033d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d8:	ee17 0a90 	vmov	r0, s15
 80033dc:	f7fd f8bc 	bl	8000558 <__aeabi_f2d>
 80033e0:	a31f      	add	r3, pc, #124	; (adr r3, 8003460 <ultrasonic+0x100>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f90f 	bl	8000608 <__aeabi_dmul>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	4625      	mov	r5, r4
 80033f0:	461c      	mov	r4, r3
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <ultrasonic+0x114>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f8af 	bl	8000558 <__aeabi_f2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fd f901 	bl	8000608 <__aeabi_dmul>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	4618      	mov	r0, r3
 800340c:	4621      	mov	r1, r4
 800340e:	f7fd fbd3 	bl	8000bb8 <__aeabi_d2f>
 8003412:	4602      	mov	r2, r0
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <ultrasonic+0x118>)
 8003416:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"Ultrasonicrange= %.1f\r\n", distance);
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <ultrasonic+0x118>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f89b 	bl	8000558 <__aeabi_f2d>
 8003422:	4603      	mov	r3, r0
 8003424:	460c      	mov	r4, r1
 8003426:	461a      	mov	r2, r3
 8003428:	4623      	mov	r3, r4
 800342a:	4914      	ldr	r1, [pc, #80]	; (800347c <ultrasonic+0x11c>)
 800342c:	4814      	ldr	r0, [pc, #80]	; (8003480 <ultrasonic+0x120>)
 800342e:	f001 f9b5 	bl	800479c <siprintf>
	HAL_Delay(200);
 8003432:	20c8      	movs	r0, #200	; 0xc8
 8003434:	f7fd fe02 	bl	800103c <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003438:	4811      	ldr	r0, [pc, #68]	; (8003480 <ultrasonic+0x120>)
 800343a:	f7fc fed1 	bl	80001e0 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003446:	490e      	ldr	r1, [pc, #56]	; (8003480 <ultrasonic+0x120>)
 8003448:	480e      	ldr	r0, [pc, #56]	; (8003484 <ultrasonic+0x124>)
 800344a:	f7ff fa50 	bl	80028ee <HAL_UART_Transmit>

	return distance;
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <ultrasonic+0x118>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	ee07 3a90 	vmov	s15, r3

}
 8003456:	eeb0 0a67 	vmov.f32	s0, s15
 800345a:	bdb0      	pop	{r4, r5, r7, pc}
 800345c:	f3af 8000 	nop.w
 8003460:	66666666 	.word	0x66666666
 8003464:	40066666 	.word	0x40066666
 8003468:	40020000 	.word	0x40020000
 800346c:	20000208 	.word	0x20000208
 8003470:	00000000 	.word	0x00000000
 8003474:	3c8c7e28 	.word	0x3c8c7e28
 8003478:	20000250 	.word	0x20000250
 800347c:	08005ffc 	.word	0x08005ffc
 8003480:	20000298 	.word	0x20000298
 8003484:	20000348 	.word	0x20000348

08003488 <checkrange>:
void checkrange(range, x, y){
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
	range = ultrasonic();
 8003494:	f7ff ff64 	bl	8003360 <ultrasonic>
 8003498:	eef0 7a40 	vmov.f32	s15, s0
 800349c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a0:	ee17 3a90 	vmov	r3, s15
 80034a4:	60fb      	str	r3, [r7, #12]
	while (range<10){
 80034a6:	e029      	b.n	80034fc <checkrange+0x74>
		range = ultrasonic();
 80034a8:	f7ff ff5a 	bl	8003360 <ultrasonic>
 80034ac:	eef0 7a40 	vmov.f32	s15, s0
 80034b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b4:	ee17 3a90 	vmov	r3, s15
 80034b8:	60fb      	str	r3, [r7, #12]
		TIM3->CCR1 = 0;
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <checkrange+0xb0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <checkrange+0xb0>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
		sprintf(uartBuf,"Range= %.1f\r\n", range);
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	491c      	ldr	r1, [pc, #112]	; (800353c <checkrange+0xb4>)
 80034ca:	481d      	ldr	r0, [pc, #116]	; (8003540 <checkrange+0xb8>)
 80034cc:	f001 f966 	bl	800479c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80034d0:	481b      	ldr	r0, [pc, #108]	; (8003540 <checkrange+0xb8>)
 80034d2:	f7fc fe85 	bl	80001e0 <strlen>
 80034d6:	4603      	mov	r3, r0
 80034d8:	b29a      	uxth	r2, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	4918      	ldr	r1, [pc, #96]	; (8003540 <checkrange+0xb8>)
 80034e0:	4818      	ldr	r0, [pc, #96]	; (8003544 <checkrange+0xbc>)
 80034e2:	f7ff fa04 	bl	80028ee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80034e6:	4816      	ldr	r0, [pc, #88]	; (8003540 <checkrange+0xb8>)
 80034e8:	f7fc fe7a 	bl	80001e0 <strlen>
 80034ec:	4603      	mov	r3, r0
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f4:	4912      	ldr	r1, [pc, #72]	; (8003540 <checkrange+0xb8>)
 80034f6:	4814      	ldr	r0, [pc, #80]	; (8003548 <checkrange+0xc0>)
 80034f8:	f7ff f9f9 	bl	80028ee <HAL_UART_Transmit>
	while (range<10){
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b09      	cmp	r3, #9
 8003500:	ddd2      	ble.n	80034a8 <checkrange+0x20>

	}
	TIM3->CCR1 = TIM3->ARR* x/100;
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <checkrange+0xb0>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	fb02 f303 	mul.w	r3, r2, r3
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <checkrange+0xb0>)
 800350e:	490f      	ldr	r1, [pc, #60]	; (800354c <checkrange+0xc4>)
 8003510:	fba1 1303 	umull	r1, r3, r1, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = TIM3->ARR* y/100;
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <checkrange+0xb0>)
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <checkrange+0xb0>)
 8003524:	4909      	ldr	r1, [pc, #36]	; (800354c <checkrange+0xc4>)
 8003526:	fba1 1303 	umull	r1, r3, r1, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	6393      	str	r3, [r2, #56]	; 0x38

}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40000400 	.word	0x40000400
 800353c:	08005f84 	.word	0x08005f84
 8003540:	20000298 	.word	0x20000298
 8003544:	20000348 	.word	0x20000348
 8003548:	20000308 	.word	0x20000308
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003554:	f7fd fd00 	bl	8000f58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003558:	f000 f81e 	bl	8003598 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800355c:	f000 f9d2 	bl	8003904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003560:	f000 f97c 	bl	800385c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003564:	f000 f882 	bl	800366c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003568:	f000 f902 	bl	8003770 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 800356c:	f000 f9a0 	bl	80038b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1 );
 8003570:	2100      	movs	r1, #0
 8003572:	4807      	ldr	r0, [pc, #28]	; (8003590 <main+0x40>)
 8003574:	f7fe fcae 	bl	8001ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2 );
 8003578:	2104      	movs	r1, #4
 800357a:	4805      	ldr	r0, [pc, #20]	; (8003590 <main+0x40>)
 800357c:	f7fe fcaa 	bl	8001ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1 );
 8003580:	2100      	movs	r1, #0
 8003582:	4804      	ldr	r0, [pc, #16]	; (8003594 <main+0x44>)
 8003584:	f7fe fca6 	bl	8001ed4 <HAL_TIM_PWM_Start>
  Start();
 8003588:	f7ff fc9e 	bl	8002ec8 <Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800358c:	e7fe      	b.n	800358c <main+0x3c>
 800358e:	bf00      	nop
 8003590:	20000254 	.word	0x20000254
 8003594:	20000210 	.word	0x20000210

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b094      	sub	sp, #80	; 0x50
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	f107 0320 	add.w	r3, r7, #32
 80035a2:	2230      	movs	r2, #48	; 0x30
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fc94 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <SystemClock_Config+0xcc>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	4a27      	ldr	r2, [pc, #156]	; (8003664 <SystemClock_Config+0xcc>)
 80035c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ca:	6413      	str	r3, [r2, #64]	; 0x40
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <SystemClock_Config+0xcc>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d8:	2300      	movs	r3, #0
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <SystemClock_Config+0xd0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <SystemClock_Config+0xd0>)
 80035e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b1f      	ldr	r3, [pc, #124]	; (8003668 <SystemClock_Config+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035f4:	2302      	movs	r3, #2
 80035f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035f8:	2301      	movs	r3, #1
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035fc:	2310      	movs	r3, #16
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003600:	2302      	movs	r3, #2
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003604:	2300      	movs	r3, #0
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003608:	2310      	movs	r3, #16
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800360c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003612:	2304      	movs	r3, #4
 8003614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003616:	2304      	movs	r3, #4
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800361a:	f107 0320 	add.w	r3, r7, #32
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd ffc8 	bl	80015b4 <HAL_RCC_OscConfig>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800362a:	f000 fa27 	bl	8003a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800362e:	230f      	movs	r3, #15
 8003630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003632:	2302      	movs	r3, #2
 8003634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800363a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe f9f4 	bl	8001a38 <HAL_RCC_ClockConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003656:	f000 fa11 	bl	8003a7c <Error_Handler>
  }
}
 800365a:	bf00      	nop
 800365c:	3750      	adds	r7, #80	; 0x50
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000

0800366c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08e      	sub	sp, #56	; 0x38
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003680:	f107 0320 	add.w	r3, r7, #32
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
 8003698:	615a      	str	r2, [r3, #20]
 800369a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <MX_TIM3_Init+0xfc>)
 800369e:	4a33      	ldr	r2, [pc, #204]	; (800376c <MX_TIM3_Init+0x100>)
 80036a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036a4:	2253      	movs	r2, #83	; 0x53
 80036a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036c2:	4829      	ldr	r0, [pc, #164]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036c4:	f7fe fba6 	bl	8001e14 <HAL_TIM_Base_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80036ce:	f000 f9d5 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036dc:	4619      	mov	r1, r3
 80036de:	4822      	ldr	r0, [pc, #136]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036e0:	f7fe fcf0 	bl	80020c4 <HAL_TIM_ConfigClockSource>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80036ea:	f000 f9c7 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036ee:	481e      	ldr	r0, [pc, #120]	; (8003768 <MX_TIM3_Init+0xfc>)
 80036f0:	f7fe fbbb 	bl	8001e6a <HAL_TIM_PWM_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80036fa:	f000 f9bf 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	4619      	mov	r1, r3
 800370c:	4816      	ldr	r0, [pc, #88]	; (8003768 <MX_TIM3_Init+0xfc>)
 800370e:	f7ff f85c 	bl	80027ca <HAL_TIMEx_MasterConfigSynchronization>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003718:	f000 f9b0 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371c:	2360      	movs	r3, #96	; 0x60
 800371e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003724:	2300      	movs	r3, #0
 8003726:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2200      	movs	r2, #0
 8003730:	4619      	mov	r1, r3
 8003732:	480d      	ldr	r0, [pc, #52]	; (8003768 <MX_TIM3_Init+0xfc>)
 8003734:	f7fe fc00 	bl	8001f38 <HAL_TIM_PWM_ConfigChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800373e:	f000 f99d 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2204      	movs	r2, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4807      	ldr	r0, [pc, #28]	; (8003768 <MX_TIM3_Init+0xfc>)
 800374a:	f7fe fbf5 	bl	8001f38 <HAL_TIM_PWM_ConfigChannel>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003754:	f000 f992 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <MX_TIM3_Init+0xfc>)
 800375a:	f000 f9f7 	bl	8003b4c <HAL_TIM_MspPostInit>

}
 800375e:	bf00      	nop
 8003760:	3738      	adds	r7, #56	; 0x38
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000254 	.word	0x20000254
 800376c:	40000400 	.word	0x40000400

08003770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003784:	f107 0320 	add.w	r3, r7, #32
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
 800379c:	615a      	str	r2, [r3, #20]
 800379e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037a2:	4a2d      	ldr	r2, [pc, #180]	; (8003858 <MX_TIM4_Init+0xe8>)
 80037a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037a8:	2253      	movs	r2, #83	; 0x53
 80037aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037c6:	4823      	ldr	r0, [pc, #140]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037c8:	f7fe fb24 	bl	8001e14 <HAL_TIM_Base_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80037d2:	f000 f953 	bl	8003a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e0:	4619      	mov	r1, r3
 80037e2:	481c      	ldr	r0, [pc, #112]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037e4:	f7fe fc6e 	bl	80020c4 <HAL_TIM_ConfigClockSource>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80037ee:	f000 f945 	bl	8003a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80037f2:	4818      	ldr	r0, [pc, #96]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037f4:	f7fe fb39 	bl	8001e6a <HAL_TIM_PWM_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80037fe:	f000 f93d 	bl	8003a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800380a:	f107 0320 	add.w	r3, r7, #32
 800380e:	4619      	mov	r1, r3
 8003810:	4810      	ldr	r0, [pc, #64]	; (8003854 <MX_TIM4_Init+0xe4>)
 8003812:	f7fe ffda 	bl	80027ca <HAL_TIMEx_MasterConfigSynchronization>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800381c:	f000 f92e 	bl	8003a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003820:	2360      	movs	r3, #96	; 0x60
 8003822:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2200      	movs	r2, #0
 8003834:	4619      	mov	r1, r3
 8003836:	4807      	ldr	r0, [pc, #28]	; (8003854 <MX_TIM4_Init+0xe4>)
 8003838:	f7fe fb7e 	bl	8001f38 <HAL_TIM_PWM_ConfigChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003842:	f000 f91b 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003846:	4803      	ldr	r0, [pc, #12]	; (8003854 <MX_TIM4_Init+0xe4>)
 8003848:	f000 f980 	bl	8003b4c <HAL_TIM_MspPostInit>

}
 800384c:	bf00      	nop
 800384e:	3738      	adds	r7, #56	; 0x38
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000210 	.word	0x20000210
 8003858:	40000800 	.word	0x40000800

0800385c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <MX_USART2_UART_Init+0x50>)
 8003864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800386c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003882:	220c      	movs	r2, #12
 8003884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003892:	4805      	ldr	r0, [pc, #20]	; (80038a8 <MX_USART2_UART_Init+0x4c>)
 8003894:	f7fe ffde 	bl	8002854 <HAL_UART_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800389e:	f000 f8ed 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000348 	.word	0x20000348
 80038ac:	40004400 	.word	0x40004400

080038b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80038b4:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <MX_USART6_UART_Init+0x50>)
 80038b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038d6:	220c      	movs	r2, #12
 80038d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <MX_USART6_UART_Init+0x4c>)
 80038e8:	f7fe ffb4 	bl	8002854 <HAL_UART_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80038f2:	f000 f8c3 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000308 	.word	0x20000308
 8003900:	40011400 	.word	0x40011400

08003904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <MX_GPIO_Init+0x104>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <MX_GPIO_Init+0x104>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <MX_GPIO_Init+0x104>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a24      	ldr	r2, [pc, #144]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <MX_GPIO_Init+0x104>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|LD2_Pin, GPIO_PIN_RESET);
 800398a:	2200      	movs	r2, #0
 800398c:	2121      	movs	r1, #33	; 0x21
 800398e:	481f      	ldr	r0, [pc, #124]	; (8003a0c <MX_GPIO_Init+0x108>)
 8003990:	f7fd fdf6 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1;
 8003994:	f242 0303 	movw	r3, #8195	; 0x2003
 8003998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	4819      	ldr	r0, [pc, #100]	; (8003a10 <MX_GPIO_Init+0x10c>)
 80039aa:	f7fd fc4f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD2_Pin;
 80039ae:	2321      	movs	r3, #33	; 0x21
 80039b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	4619      	mov	r1, r3
 80039c4:	4811      	ldr	r0, [pc, #68]	; (8003a0c <MX_GPIO_Init+0x108>)
 80039c6:	f7fd fc41 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin PA8 */
  GPIO_InitStruct.Pin = ECHO_Pin|GPIO_PIN_8;
 80039ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 80039ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4619      	mov	r1, r3
 80039de:	480b      	ldr	r0, [pc, #44]	; (8003a0c <MX_GPIO_Init+0x108>)
 80039e0:	f7fd fc34 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4619      	mov	r1, r3
 80039f8:	4806      	ldr	r0, [pc, #24]	; (8003a14 <MX_GPIO_Init+0x110>)
 80039fa:	f7fd fc27 	bl	800124c <HAL_GPIO_Init>

}
 80039fe:	bf00      	nop
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020400 	.word	0x40020400

08003a18 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t usec)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	if(usec < 2) usec =2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d801      	bhi.n	8003a2a <usDelay+0x12>
 8003a26:	2302      	movs	r3, #2
 8003a28:	607b      	str	r3, [r7, #4]
	usTIM ->ARR = usec - 1;
 8003a2a:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <usDelay+0x60>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM ->EGR = 1;
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <usDelay+0x60>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	615a      	str	r2, [r3, #20]
	usTIM ->SR &= ~1;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <usDelay+0x60>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <usDelay+0x60>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6113      	str	r3, [r2, #16]
	usTIM ->CR1 |= 1 ;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <usDelay+0x60>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <usDelay+0x60>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]
	while((usTIM ->SR&0x0001)!= 1);
 8003a50:	bf00      	nop
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <usDelay+0x60>)
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d1f9      	bne.n	8003a52 <usDelay+0x3a>
	usTIM -> SR &= ~(0x0001);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <usDelay+0x60>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <usDelay+0x60>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6113      	str	r3, [r2, #16]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40000800 	.word	0x40000800

08003a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6413      	str	r3, [r2, #64]	; 0x40
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <HAL_MspInit+0x4c>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003aca:	2007      	movs	r0, #7
 8003acc:	f7fd fb8a 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800

08003adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_TIM_Base_MspInit+0x64>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b0a:	e012      	b.n	8003b32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_TIM_Base_MspInit+0x6c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10d      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <HAL_TIM_Base_MspInit+0x68>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40000800 	.word	0x40000800

08003b4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a24      	ldr	r2, [pc, #144]	; (8003bfc <HAL_TIM_MspPostInit+0xb0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d11e      	bne.n	8003bac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b8a:	23c0      	movs	r3, #192	; 0xc0
 8003b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4817      	ldr	r0, [pc, #92]	; (8003c04 <HAL_TIM_MspPostInit+0xb8>)
 8003ba6:	f7fd fb51 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003baa:	e022      	b.n	8003bf2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <HAL_TIM_MspPostInit+0xbc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d11d      	bne.n	8003bf2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_TIM_MspPostInit+0xb4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003be2:	2302      	movs	r3, #2
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	4807      	ldr	r0, [pc, #28]	; (8003c0c <HAL_TIM_MspPostInit+0xc0>)
 8003bee:	f7fd fb2d 	bl	800124c <HAL_GPIO_Init>
}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020000 	.word	0x40020000
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40020400 	.word	0x40020400

08003c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a32      	ldr	r2, [pc, #200]	; (8003cf8 <HAL_UART_MspInit+0xe8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12c      	bne.n	8003c8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a30      	ldr	r2, [pc, #192]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	481e      	ldr	r0, [pc, #120]	; (8003d00 <HAL_UART_MspInit+0xf0>)
 8003c86:	f7fd fae1 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003c8a:	e030      	b.n	8003cee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <HAL_UART_MspInit+0xf4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d12b      	bne.n	8003cee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003ca0:	f043 0320 	orr.w	r3, r3, #32
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_UART_MspInit+0xec>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cce:	23c0      	movs	r3, #192	; 0xc0
 8003cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cde:	2308      	movs	r3, #8
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce2:	f107 031c 	add.w	r3, r7, #28
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4807      	ldr	r0, [pc, #28]	; (8003d08 <HAL_UART_MspInit+0xf8>)
 8003cea:	f7fd faaf 	bl	800124c <HAL_GPIO_Init>
}
 8003cee:	bf00      	nop
 8003cf0:	3730      	adds	r7, #48	; 0x30
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40004400 	.word	0x40004400
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020000 	.word	0x40020000
 8003d04:	40011400 	.word	0x40011400
 8003d08:	40020800 	.word	0x40020800

08003d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <HardFault_Handler+0x4>

08003d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <MemManage_Handler+0x4>

08003d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <BusFault_Handler+0x4>

08003d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <UsageFault_Handler+0x4>

08003d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d60:	f7fd f94c 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <_sbrk+0x50>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <_sbrk+0x16>
		heap_end = &end;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <_sbrk+0x50>)
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <_sbrk+0x54>)
 8003d7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <_sbrk+0x50>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <_sbrk+0x50>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	466a      	mov	r2, sp
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d907      	bls.n	8003da2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d92:	f000 f875 	bl	8003e80 <__errno>
 8003d96:	4602      	mov	r2, r0
 8003d98:	230c      	movs	r3, #12
 8003d9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da0:	e006      	b.n	8003db0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <_sbrk+0x50>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <_sbrk+0x50>)
 8003dac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003dae:	68fb      	ldr	r3, [r7, #12]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200001f8 	.word	0x200001f8
 8003dbc:	20000390 	.word	0x20000390

08003dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dc4:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <SystemInit+0x60>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <SystemInit+0x60>)
 8003dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <SystemInit+0x64>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <SystemInit+0x64>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <SystemInit+0x64>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <SystemInit+0x64>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <SystemInit+0x64>)
 8003dec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <SystemInit+0x64>)
 8003df8:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <SystemInit+0x68>)
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <SystemInit+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <SystemInit+0x64>)
 8003e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <SystemInit+0x64>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <SystemInit+0x60>)
 8003e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e14:	609a      	str	r2, [r3, #8]
#endif
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	24003010 	.word	0x24003010

08003e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e32:	e003      	b.n	8003e3c <LoopCopyDataInit>

08003e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e3a:	3104      	adds	r1, #4

08003e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e3c:	480b      	ldr	r0, [pc, #44]	; (8003e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e44:	d3f6      	bcc.n	8003e34 <CopyDataInit>
  ldr  r2, =_sbss
 8003e46:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e48:	e002      	b.n	8003e50 <LoopFillZerobss>

08003e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e4c:	f842 3b04 	str.w	r3, [r2], #4

08003e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e54:	d3f9      	bcc.n	8003e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e56:	f7ff ffb3 	bl	8003dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e5a:	f000 f817 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e5e:	f7ff fb77 	bl	8003550 <main>
  bx  lr    
 8003e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e68:	08006298 	.word	0x08006298
  ldr  r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e70:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003e74:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003e78:	20000390 	.word	0x20000390

08003e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e7c:	e7fe      	b.n	8003e7c <ADC_IRQHandler>
	...

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4e0d      	ldr	r6, [pc, #52]	; (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1ba4      	subs	r4, r4, r6
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2500      	movs	r5, #0
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4e0b      	ldr	r6, [pc, #44]	; (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f002 f85e 	bl	8005f60 <_init>
 8003ea4:	1ba4      	subs	r4, r4, r6
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	42a5      	cmp	r5, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eb4:	4798      	blx	r3
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ebe:	4798      	blx	r3
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08006290 	.word	0x08006290
 8003ec8:	08006290 	.word	0x08006290
 8003ecc:	08006290 	.word	0x08006290
 8003ed0:	08006294 	.word	0x08006294

08003ed4 <memset>:
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <__cvt>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	ec55 4b10 	vmov	r4, r5, d0
 8003eec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003eee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	460e      	mov	r6, r1
 8003ef6:	4691      	mov	r9, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	bfb8      	it	lt
 8003efc:	4622      	movlt	r2, r4
 8003efe:	462b      	mov	r3, r5
 8003f00:	f027 0720 	bic.w	r7, r7, #32
 8003f04:	bfbb      	ittet	lt
 8003f06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f0a:	461d      	movlt	r5, r3
 8003f0c:	2300      	movge	r3, #0
 8003f0e:	232d      	movlt	r3, #45	; 0x2d
 8003f10:	bfb8      	it	lt
 8003f12:	4614      	movlt	r4, r2
 8003f14:	2f46      	cmp	r7, #70	; 0x46
 8003f16:	700b      	strb	r3, [r1, #0]
 8003f18:	d004      	beq.n	8003f24 <__cvt+0x40>
 8003f1a:	2f45      	cmp	r7, #69	; 0x45
 8003f1c:	d100      	bne.n	8003f20 <__cvt+0x3c>
 8003f1e:	3601      	adds	r6, #1
 8003f20:	2102      	movs	r1, #2
 8003f22:	e000      	b.n	8003f26 <__cvt+0x42>
 8003f24:	2103      	movs	r1, #3
 8003f26:	ab03      	add	r3, sp, #12
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	ab02      	add	r3, sp, #8
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4632      	mov	r2, r6
 8003f30:	4653      	mov	r3, sl
 8003f32:	ec45 4b10 	vmov	d0, r4, r5
 8003f36:	f000 fcdf 	bl	80048f8 <_dtoa_r>
 8003f3a:	2f47      	cmp	r7, #71	; 0x47
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	d102      	bne.n	8003f46 <__cvt+0x62>
 8003f40:	f019 0f01 	tst.w	r9, #1
 8003f44:	d026      	beq.n	8003f94 <__cvt+0xb0>
 8003f46:	2f46      	cmp	r7, #70	; 0x46
 8003f48:	eb08 0906 	add.w	r9, r8, r6
 8003f4c:	d111      	bne.n	8003f72 <__cvt+0x8e>
 8003f4e:	f898 3000 	ldrb.w	r3, [r8]
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d10a      	bne.n	8003f6c <__cvt+0x88>
 8003f56:	2200      	movs	r2, #0
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	f7fc fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f62:	b918      	cbnz	r0, 8003f6c <__cvt+0x88>
 8003f64:	f1c6 0601 	rsb	r6, r6, #1
 8003f68:	f8ca 6000 	str.w	r6, [sl]
 8003f6c:	f8da 3000 	ldr.w	r3, [sl]
 8003f70:	4499      	add	r9, r3
 8003f72:	2200      	movs	r2, #0
 8003f74:	2300      	movs	r3, #0
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f7e:	b938      	cbnz	r0, 8003f90 <__cvt+0xac>
 8003f80:	2230      	movs	r2, #48	; 0x30
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	454b      	cmp	r3, r9
 8003f86:	d205      	bcs.n	8003f94 <__cvt+0xb0>
 8003f88:	1c59      	adds	r1, r3, #1
 8003f8a:	9103      	str	r1, [sp, #12]
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e7f8      	b.n	8003f82 <__cvt+0x9e>
 8003f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f98:	eba3 0308 	sub.w	r3, r3, r8
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	b004      	add	sp, #16
 8003fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fa6 <__exponent>:
 8003fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	4604      	mov	r4, r0
 8003fac:	bfba      	itte	lt
 8003fae:	4249      	neglt	r1, r1
 8003fb0:	232d      	movlt	r3, #45	; 0x2d
 8003fb2:	232b      	movge	r3, #43	; 0x2b
 8003fb4:	2909      	cmp	r1, #9
 8003fb6:	f804 2b02 	strb.w	r2, [r4], #2
 8003fba:	7043      	strb	r3, [r0, #1]
 8003fbc:	dd20      	ble.n	8004000 <__exponent+0x5a>
 8003fbe:	f10d 0307 	add.w	r3, sp, #7
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	260a      	movs	r6, #10
 8003fc6:	fb91 f5f6 	sdiv	r5, r1, r6
 8003fca:	fb06 1115 	mls	r1, r6, r5, r1
 8003fce:	3130      	adds	r1, #48	; 0x30
 8003fd0:	2d09      	cmp	r5, #9
 8003fd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fd6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003fda:	4629      	mov	r1, r5
 8003fdc:	dc09      	bgt.n	8003ff2 <__exponent+0x4c>
 8003fde:	3130      	adds	r1, #48	; 0x30
 8003fe0:	3b02      	subs	r3, #2
 8003fe2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003fe6:	42bb      	cmp	r3, r7
 8003fe8:	4622      	mov	r2, r4
 8003fea:	d304      	bcc.n	8003ff6 <__exponent+0x50>
 8003fec:	1a10      	subs	r0, r2, r0
 8003fee:	b003      	add	sp, #12
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	e7e7      	b.n	8003fc6 <__exponent+0x20>
 8003ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ffa:	f804 2b01 	strb.w	r2, [r4], #1
 8003ffe:	e7f2      	b.n	8003fe6 <__exponent+0x40>
 8004000:	2330      	movs	r3, #48	; 0x30
 8004002:	4419      	add	r1, r3
 8004004:	7083      	strb	r3, [r0, #2]
 8004006:	1d02      	adds	r2, r0, #4
 8004008:	70c1      	strb	r1, [r0, #3]
 800400a:	e7ef      	b.n	8003fec <__exponent+0x46>

0800400c <_printf_float>:
 800400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004010:	b08d      	sub	sp, #52	; 0x34
 8004012:	460c      	mov	r4, r1
 8004014:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004018:	4616      	mov	r6, r2
 800401a:	461f      	mov	r7, r3
 800401c:	4605      	mov	r5, r0
 800401e:	f001 fa23 	bl	8005468 <_localeconv_r>
 8004022:	6803      	ldr	r3, [r0, #0]
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc f8da 	bl	80001e0 <strlen>
 800402c:	2300      	movs	r3, #0
 800402e:	930a      	str	r3, [sp, #40]	; 0x28
 8004030:	f8d8 3000 	ldr.w	r3, [r8]
 8004034:	9005      	str	r0, [sp, #20]
 8004036:	3307      	adds	r3, #7
 8004038:	f023 0307 	bic.w	r3, r3, #7
 800403c:	f103 0208 	add.w	r2, r3, #8
 8004040:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004044:	f8d4 b000 	ldr.w	fp, [r4]
 8004048:	f8c8 2000 	str.w	r2, [r8]
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004054:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004058:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800405c:	9307      	str	r3, [sp, #28]
 800405e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004066:	4ba7      	ldr	r3, [pc, #668]	; (8004304 <_printf_float+0x2f8>)
 8004068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800406c:	f7fc fd66 	bl	8000b3c <__aeabi_dcmpun>
 8004070:	bb70      	cbnz	r0, 80040d0 <_printf_float+0xc4>
 8004072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004076:	4ba3      	ldr	r3, [pc, #652]	; (8004304 <_printf_float+0x2f8>)
 8004078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800407c:	f7fc fd40 	bl	8000b00 <__aeabi_dcmple>
 8004080:	bb30      	cbnz	r0, 80040d0 <_printf_float+0xc4>
 8004082:	2200      	movs	r2, #0
 8004084:	2300      	movs	r3, #0
 8004086:	4640      	mov	r0, r8
 8004088:	4649      	mov	r1, r9
 800408a:	f7fc fd2f 	bl	8000aec <__aeabi_dcmplt>
 800408e:	b110      	cbz	r0, 8004096 <_printf_float+0x8a>
 8004090:	232d      	movs	r3, #45	; 0x2d
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004096:	4a9c      	ldr	r2, [pc, #624]	; (8004308 <_printf_float+0x2fc>)
 8004098:	4b9c      	ldr	r3, [pc, #624]	; (800430c <_printf_float+0x300>)
 800409a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800409e:	bf8c      	ite	hi
 80040a0:	4690      	movhi	r8, r2
 80040a2:	4698      	movls	r8, r3
 80040a4:	2303      	movs	r3, #3
 80040a6:	f02b 0204 	bic.w	r2, fp, #4
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	6022      	str	r2, [r4, #0]
 80040ae:	f04f 0900 	mov.w	r9, #0
 80040b2:	9700      	str	r7, [sp, #0]
 80040b4:	4633      	mov	r3, r6
 80040b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80040b8:	4621      	mov	r1, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 f9e6 	bl	800448c <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	f040 808d 	bne.w	80041e0 <_printf_float+0x1d4>
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ca:	b00d      	add	sp, #52	; 0x34
 80040cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc fd30 	bl	8000b3c <__aeabi_dcmpun>
 80040dc:	b110      	cbz	r0, 80040e4 <_printf_float+0xd8>
 80040de:	4a8c      	ldr	r2, [pc, #560]	; (8004310 <_printf_float+0x304>)
 80040e0:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <_printf_float+0x308>)
 80040e2:	e7da      	b.n	800409a <_printf_float+0x8e>
 80040e4:	6861      	ldr	r1, [r4, #4]
 80040e6:	1c4b      	adds	r3, r1, #1
 80040e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80040ec:	a80a      	add	r0, sp, #40	; 0x28
 80040ee:	d13e      	bne.n	800416e <_printf_float+0x162>
 80040f0:	2306      	movs	r3, #6
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	2300      	movs	r3, #0
 80040f6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80040fa:	ab09      	add	r3, sp, #36	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	ec49 8b10 	vmov	d0, r8, r9
 8004102:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004106:	6022      	str	r2, [r4, #0]
 8004108:	f8cd a004 	str.w	sl, [sp, #4]
 800410c:	6861      	ldr	r1, [r4, #4]
 800410e:	4628      	mov	r0, r5
 8004110:	f7ff fee8 	bl	8003ee4 <__cvt>
 8004114:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004118:	2b47      	cmp	r3, #71	; 0x47
 800411a:	4680      	mov	r8, r0
 800411c:	d109      	bne.n	8004132 <_printf_float+0x126>
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	1cd8      	adds	r0, r3, #3
 8004122:	db02      	blt.n	800412a <_printf_float+0x11e>
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	4293      	cmp	r3, r2
 8004128:	dd47      	ble.n	80041ba <_printf_float+0x1ae>
 800412a:	f1aa 0a02 	sub.w	sl, sl, #2
 800412e:	fa5f fa8a 	uxtb.w	sl, sl
 8004132:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004136:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004138:	d824      	bhi.n	8004184 <_printf_float+0x178>
 800413a:	3901      	subs	r1, #1
 800413c:	4652      	mov	r2, sl
 800413e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004142:	9109      	str	r1, [sp, #36]	; 0x24
 8004144:	f7ff ff2f 	bl	8003fa6 <__exponent>
 8004148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800414a:	1813      	adds	r3, r2, r0
 800414c:	2a01      	cmp	r2, #1
 800414e:	4681      	mov	r9, r0
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	dc02      	bgt.n	800415a <_printf_float+0x14e>
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	07d1      	lsls	r1, r2, #31
 8004158:	d501      	bpl.n	800415e <_printf_float+0x152>
 800415a:	3301      	adds	r3, #1
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0a5      	beq.n	80040b2 <_printf_float+0xa6>
 8004166:	232d      	movs	r3, #45	; 0x2d
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416c:	e7a1      	b.n	80040b2 <_printf_float+0xa6>
 800416e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004172:	f000 8177 	beq.w	8004464 <_printf_float+0x458>
 8004176:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800417a:	d1bb      	bne.n	80040f4 <_printf_float+0xe8>
 800417c:	2900      	cmp	r1, #0
 800417e:	d1b9      	bne.n	80040f4 <_printf_float+0xe8>
 8004180:	2301      	movs	r3, #1
 8004182:	e7b6      	b.n	80040f2 <_printf_float+0xe6>
 8004184:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004188:	d119      	bne.n	80041be <_printf_float+0x1b2>
 800418a:	2900      	cmp	r1, #0
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	dd0c      	ble.n	80041aa <_printf_float+0x19e>
 8004190:	6121      	str	r1, [r4, #16]
 8004192:	b913      	cbnz	r3, 800419a <_printf_float+0x18e>
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	07d2      	lsls	r2, r2, #31
 8004198:	d502      	bpl.n	80041a0 <_printf_float+0x194>
 800419a:	3301      	adds	r3, #1
 800419c:	440b      	add	r3, r1
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80041a4:	f04f 0900 	mov.w	r9, #0
 80041a8:	e7d9      	b.n	800415e <_printf_float+0x152>
 80041aa:	b913      	cbnz	r3, 80041b2 <_printf_float+0x1a6>
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	07d0      	lsls	r0, r2, #31
 80041b0:	d501      	bpl.n	80041b6 <_printf_float+0x1aa>
 80041b2:	3302      	adds	r3, #2
 80041b4:	e7f3      	b.n	800419e <_printf_float+0x192>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e7f1      	b.n	800419e <_printf_float+0x192>
 80041ba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80041be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80041c2:	4293      	cmp	r3, r2
 80041c4:	db05      	blt.n	80041d2 <_printf_float+0x1c6>
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	07d1      	lsls	r1, r2, #31
 80041cc:	d5e8      	bpl.n	80041a0 <_printf_float+0x194>
 80041ce:	3301      	adds	r3, #1
 80041d0:	e7e5      	b.n	800419e <_printf_float+0x192>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bfd4      	ite	le
 80041d6:	f1c3 0302 	rsble	r3, r3, #2
 80041da:	2301      	movgt	r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	e7de      	b.n	800419e <_printf_float+0x192>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	055a      	lsls	r2, r3, #21
 80041e4:	d407      	bmi.n	80041f6 <_printf_float+0x1ea>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	4642      	mov	r2, r8
 80041ea:	4631      	mov	r1, r6
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b8      	blx	r7
 80041f0:	3001      	adds	r0, #1
 80041f2:	d12b      	bne.n	800424c <_printf_float+0x240>
 80041f4:	e767      	b.n	80040c6 <_printf_float+0xba>
 80041f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80041fa:	f240 80dc 	bls.w	80043b6 <_printf_float+0x3aa>
 80041fe:	2200      	movs	r2, #0
 8004200:	2300      	movs	r3, #0
 8004202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004206:	f7fc fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800420a:	2800      	cmp	r0, #0
 800420c:	d033      	beq.n	8004276 <_printf_float+0x26a>
 800420e:	2301      	movs	r3, #1
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <_printf_float+0x30c>)
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f af54 	beq.w	80040c6 <_printf_float+0xba>
 800421e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004222:	429a      	cmp	r2, r3
 8004224:	db02      	blt.n	800422c <_printf_float+0x220>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	07d8      	lsls	r0, r3, #31
 800422a:	d50f      	bpl.n	800424c <_printf_float+0x240>
 800422c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	f43f af45 	beq.w	80040c6 <_printf_float+0xba>
 800423c:	f04f 0800 	mov.w	r8, #0
 8004240:	f104 091a 	add.w	r9, r4, #26
 8004244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	4543      	cmp	r3, r8
 800424a:	dc09      	bgt.n	8004260 <_printf_float+0x254>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	079b      	lsls	r3, r3, #30
 8004250:	f100 8103 	bmi.w	800445a <_printf_float+0x44e>
 8004254:	68e0      	ldr	r0, [r4, #12]
 8004256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004258:	4298      	cmp	r0, r3
 800425a:	bfb8      	it	lt
 800425c:	4618      	movlt	r0, r3
 800425e:	e734      	b.n	80040ca <_printf_float+0xbe>
 8004260:	2301      	movs	r3, #1
 8004262:	464a      	mov	r2, r9
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af2b 	beq.w	80040c6 <_printf_float+0xba>
 8004270:	f108 0801 	add.w	r8, r8, #1
 8004274:	e7e6      	b.n	8004244 <_printf_float+0x238>
 8004276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	dc2b      	bgt.n	80042d4 <_printf_float+0x2c8>
 800427c:	2301      	movs	r3, #1
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <_printf_float+0x30c>)
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f af1d 	beq.w	80040c6 <_printf_float+0xba>
 800428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428e:	b923      	cbnz	r3, 800429a <_printf_float+0x28e>
 8004290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004292:	b913      	cbnz	r3, 800429a <_printf_float+0x28e>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	07d9      	lsls	r1, r3, #31
 8004298:	d5d8      	bpl.n	800424c <_printf_float+0x240>
 800429a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	f43f af0e 	beq.w	80040c6 <_printf_float+0xba>
 80042aa:	f04f 0900 	mov.w	r9, #0
 80042ae:	f104 0a1a 	add.w	sl, r4, #26
 80042b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b4:	425b      	negs	r3, r3
 80042b6:	454b      	cmp	r3, r9
 80042b8:	dc01      	bgt.n	80042be <_printf_float+0x2b2>
 80042ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042bc:	e794      	b.n	80041e8 <_printf_float+0x1dc>
 80042be:	2301      	movs	r3, #1
 80042c0:	4652      	mov	r2, sl
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f aefc 	beq.w	80040c6 <_printf_float+0xba>
 80042ce:	f109 0901 	add.w	r9, r9, #1
 80042d2:	e7ee      	b.n	80042b2 <_printf_float+0x2a6>
 80042d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042d8:	429a      	cmp	r2, r3
 80042da:	bfa8      	it	ge
 80042dc:	461a      	movge	r2, r3
 80042de:	2a00      	cmp	r2, #0
 80042e0:	4691      	mov	r9, r2
 80042e2:	dd07      	ble.n	80042f4 <_printf_float+0x2e8>
 80042e4:	4613      	mov	r3, r2
 80042e6:	4631      	mov	r1, r6
 80042e8:	4642      	mov	r2, r8
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f aee9 	beq.w	80040c6 <_printf_float+0xba>
 80042f4:	f104 031a 	add.w	r3, r4, #26
 80042f8:	f04f 0b00 	mov.w	fp, #0
 80042fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004300:	9306      	str	r3, [sp, #24]
 8004302:	e015      	b.n	8004330 <_printf_float+0x324>
 8004304:	7fefffff 	.word	0x7fefffff
 8004308:	08006030 	.word	0x08006030
 800430c:	0800602c 	.word	0x0800602c
 8004310:	08006038 	.word	0x08006038
 8004314:	08006034 	.word	0x08006034
 8004318:	0800603c 	.word	0x0800603c
 800431c:	2301      	movs	r3, #1
 800431e:	9a06      	ldr	r2, [sp, #24]
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f aecd 	beq.w	80040c6 <_printf_float+0xba>
 800432c:	f10b 0b01 	add.w	fp, fp, #1
 8004330:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004334:	ebaa 0309 	sub.w	r3, sl, r9
 8004338:	455b      	cmp	r3, fp
 800433a:	dcef      	bgt.n	800431c <_printf_float+0x310>
 800433c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004340:	429a      	cmp	r2, r3
 8004342:	44d0      	add	r8, sl
 8004344:	db15      	blt.n	8004372 <_printf_float+0x366>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07da      	lsls	r2, r3, #31
 800434a:	d412      	bmi.n	8004372 <_printf_float+0x366>
 800434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004350:	eba3 020a 	sub.w	r2, r3, sl
 8004354:	eba3 0a01 	sub.w	sl, r3, r1
 8004358:	4592      	cmp	sl, r2
 800435a:	bfa8      	it	ge
 800435c:	4692      	movge	sl, r2
 800435e:	f1ba 0f00 	cmp.w	sl, #0
 8004362:	dc0e      	bgt.n	8004382 <_printf_float+0x376>
 8004364:	f04f 0800 	mov.w	r8, #0
 8004368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800436c:	f104 091a 	add.w	r9, r4, #26
 8004370:	e019      	b.n	80043a6 <_printf_float+0x39a>
 8004372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	47b8      	blx	r7
 800437c:	3001      	adds	r0, #1
 800437e:	d1e5      	bne.n	800434c <_printf_float+0x340>
 8004380:	e6a1      	b.n	80040c6 <_printf_float+0xba>
 8004382:	4653      	mov	r3, sl
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	d1e9      	bne.n	8004364 <_printf_float+0x358>
 8004390:	e699      	b.n	80040c6 <_printf_float+0xba>
 8004392:	2301      	movs	r3, #1
 8004394:	464a      	mov	r2, r9
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f ae92 	beq.w	80040c6 <_printf_float+0xba>
 80043a2:	f108 0801 	add.w	r8, r8, #1
 80043a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	eba3 030a 	sub.w	r3, r3, sl
 80043b0:	4543      	cmp	r3, r8
 80043b2:	dcee      	bgt.n	8004392 <_printf_float+0x386>
 80043b4:	e74a      	b.n	800424c <_printf_float+0x240>
 80043b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043b8:	2a01      	cmp	r2, #1
 80043ba:	dc01      	bgt.n	80043c0 <_printf_float+0x3b4>
 80043bc:	07db      	lsls	r3, r3, #31
 80043be:	d53a      	bpl.n	8004436 <_printf_float+0x42a>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4642      	mov	r2, r8
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f ae7b 	beq.w	80040c6 <_printf_float+0xba>
 80043d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	f108 0801 	add.w	r8, r8, #1
 80043e0:	f43f ae71 	beq.w	80040c6 <_printf_float+0xba>
 80043e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e6:	2200      	movs	r2, #0
 80043e8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80043ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f0:	2300      	movs	r3, #0
 80043f2:	f7fc fb71 	bl	8000ad8 <__aeabi_dcmpeq>
 80043f6:	b9c8      	cbnz	r0, 800442c <_printf_float+0x420>
 80043f8:	4653      	mov	r3, sl
 80043fa:	4642      	mov	r2, r8
 80043fc:	4631      	mov	r1, r6
 80043fe:	4628      	mov	r0, r5
 8004400:	47b8      	blx	r7
 8004402:	3001      	adds	r0, #1
 8004404:	d10e      	bne.n	8004424 <_printf_float+0x418>
 8004406:	e65e      	b.n	80040c6 <_printf_float+0xba>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f ae57 	beq.w	80040c6 <_printf_float+0xba>
 8004418:	f108 0801 	add.w	r8, r8, #1
 800441c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	4543      	cmp	r3, r8
 8004422:	dcf1      	bgt.n	8004408 <_printf_float+0x3fc>
 8004424:	464b      	mov	r3, r9
 8004426:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800442a:	e6de      	b.n	80041ea <_printf_float+0x1de>
 800442c:	f04f 0800 	mov.w	r8, #0
 8004430:	f104 0a1a 	add.w	sl, r4, #26
 8004434:	e7f2      	b.n	800441c <_printf_float+0x410>
 8004436:	2301      	movs	r3, #1
 8004438:	e7df      	b.n	80043fa <_printf_float+0x3ee>
 800443a:	2301      	movs	r3, #1
 800443c:	464a      	mov	r2, r9
 800443e:	4631      	mov	r1, r6
 8004440:	4628      	mov	r0, r5
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	f43f ae3e 	beq.w	80040c6 <_printf_float+0xba>
 800444a:	f108 0801 	add.w	r8, r8, #1
 800444e:	68e3      	ldr	r3, [r4, #12]
 8004450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	4543      	cmp	r3, r8
 8004456:	dcf0      	bgt.n	800443a <_printf_float+0x42e>
 8004458:	e6fc      	b.n	8004254 <_printf_float+0x248>
 800445a:	f04f 0800 	mov.w	r8, #0
 800445e:	f104 0919 	add.w	r9, r4, #25
 8004462:	e7f4      	b.n	800444e <_printf_float+0x442>
 8004464:	2900      	cmp	r1, #0
 8004466:	f43f ae8b 	beq.w	8004180 <_printf_float+0x174>
 800446a:	2300      	movs	r3, #0
 800446c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004470:	ab09      	add	r3, sp, #36	; 0x24
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	ec49 8b10 	vmov	d0, r8, r9
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	f8cd a004 	str.w	sl, [sp, #4]
 800447e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004482:	4628      	mov	r0, r5
 8004484:	f7ff fd2e 	bl	8003ee4 <__cvt>
 8004488:	4680      	mov	r8, r0
 800448a:	e648      	b.n	800411e <_printf_float+0x112>

0800448c <_printf_common>:
 800448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	4691      	mov	r9, r2
 8004492:	461f      	mov	r7, r3
 8004494:	688a      	ldr	r2, [r1, #8]
 8004496:	690b      	ldr	r3, [r1, #16]
 8004498:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800449c:	4293      	cmp	r3, r2
 800449e:	bfb8      	it	lt
 80044a0:	4613      	movlt	r3, r2
 80044a2:	f8c9 3000 	str.w	r3, [r9]
 80044a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044aa:	4606      	mov	r6, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	b112      	cbz	r2, 80044b6 <_printf_common+0x2a>
 80044b0:	3301      	adds	r3, #1
 80044b2:	f8c9 3000 	str.w	r3, [r9]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	0699      	lsls	r1, r3, #26
 80044ba:	bf42      	ittt	mi
 80044bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044c0:	3302      	addmi	r3, #2
 80044c2:	f8c9 3000 	strmi.w	r3, [r9]
 80044c6:	6825      	ldr	r5, [r4, #0]
 80044c8:	f015 0506 	ands.w	r5, r5, #6
 80044cc:	d107      	bne.n	80044de <_printf_common+0x52>
 80044ce:	f104 0a19 	add.w	sl, r4, #25
 80044d2:	68e3      	ldr	r3, [r4, #12]
 80044d4:	f8d9 2000 	ldr.w	r2, [r9]
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	42ab      	cmp	r3, r5
 80044dc:	dc28      	bgt.n	8004530 <_printf_common+0xa4>
 80044de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044e2:	6822      	ldr	r2, [r4, #0]
 80044e4:	3300      	adds	r3, #0
 80044e6:	bf18      	it	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	0692      	lsls	r2, r2, #26
 80044ec:	d42d      	bmi.n	800454a <_printf_common+0xbe>
 80044ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f2:	4639      	mov	r1, r7
 80044f4:	4630      	mov	r0, r6
 80044f6:	47c0      	blx	r8
 80044f8:	3001      	adds	r0, #1
 80044fa:	d020      	beq.n	800453e <_printf_common+0xb2>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	68e5      	ldr	r5, [r4, #12]
 8004500:	f8d9 2000 	ldr.w	r2, [r9]
 8004504:	f003 0306 	and.w	r3, r3, #6
 8004508:	2b04      	cmp	r3, #4
 800450a:	bf08      	it	eq
 800450c:	1aad      	subeq	r5, r5, r2
 800450e:	68a3      	ldr	r3, [r4, #8]
 8004510:	6922      	ldr	r2, [r4, #16]
 8004512:	bf0c      	ite	eq
 8004514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004518:	2500      	movne	r5, #0
 800451a:	4293      	cmp	r3, r2
 800451c:	bfc4      	itt	gt
 800451e:	1a9b      	subgt	r3, r3, r2
 8004520:	18ed      	addgt	r5, r5, r3
 8004522:	f04f 0900 	mov.w	r9, #0
 8004526:	341a      	adds	r4, #26
 8004528:	454d      	cmp	r5, r9
 800452a:	d11a      	bne.n	8004562 <_printf_common+0xd6>
 800452c:	2000      	movs	r0, #0
 800452e:	e008      	b.n	8004542 <_printf_common+0xb6>
 8004530:	2301      	movs	r3, #1
 8004532:	4652      	mov	r2, sl
 8004534:	4639      	mov	r1, r7
 8004536:	4630      	mov	r0, r6
 8004538:	47c0      	blx	r8
 800453a:	3001      	adds	r0, #1
 800453c:	d103      	bne.n	8004546 <_printf_common+0xba>
 800453e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	3501      	adds	r5, #1
 8004548:	e7c3      	b.n	80044d2 <_printf_common+0x46>
 800454a:	18e1      	adds	r1, r4, r3
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	2030      	movs	r0, #48	; 0x30
 8004550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004554:	4422      	add	r2, r4
 8004556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800455e:	3302      	adds	r3, #2
 8004560:	e7c5      	b.n	80044ee <_printf_common+0x62>
 8004562:	2301      	movs	r3, #1
 8004564:	4622      	mov	r2, r4
 8004566:	4639      	mov	r1, r7
 8004568:	4630      	mov	r0, r6
 800456a:	47c0      	blx	r8
 800456c:	3001      	adds	r0, #1
 800456e:	d0e6      	beq.n	800453e <_printf_common+0xb2>
 8004570:	f109 0901 	add.w	r9, r9, #1
 8004574:	e7d8      	b.n	8004528 <_printf_common+0x9c>
	...

08004578 <_printf_i>:
 8004578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800457c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004580:	460c      	mov	r4, r1
 8004582:	7e09      	ldrb	r1, [r1, #24]
 8004584:	b085      	sub	sp, #20
 8004586:	296e      	cmp	r1, #110	; 0x6e
 8004588:	4617      	mov	r7, r2
 800458a:	4606      	mov	r6, r0
 800458c:	4698      	mov	r8, r3
 800458e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004590:	f000 80b3 	beq.w	80046fa <_printf_i+0x182>
 8004594:	d822      	bhi.n	80045dc <_printf_i+0x64>
 8004596:	2963      	cmp	r1, #99	; 0x63
 8004598:	d036      	beq.n	8004608 <_printf_i+0x90>
 800459a:	d80a      	bhi.n	80045b2 <_printf_i+0x3a>
 800459c:	2900      	cmp	r1, #0
 800459e:	f000 80b9 	beq.w	8004714 <_printf_i+0x19c>
 80045a2:	2958      	cmp	r1, #88	; 0x58
 80045a4:	f000 8083 	beq.w	80046ae <_printf_i+0x136>
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045b0:	e032      	b.n	8004618 <_printf_i+0xa0>
 80045b2:	2964      	cmp	r1, #100	; 0x64
 80045b4:	d001      	beq.n	80045ba <_printf_i+0x42>
 80045b6:	2969      	cmp	r1, #105	; 0x69
 80045b8:	d1f6      	bne.n	80045a8 <_printf_i+0x30>
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	0605      	lsls	r5, r0, #24
 80045c0:	f103 0104 	add.w	r1, r3, #4
 80045c4:	d52a      	bpl.n	800461c <_printf_i+0xa4>
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da03      	bge.n	80045d6 <_printf_i+0x5e>
 80045ce:	222d      	movs	r2, #45	; 0x2d
 80045d0:	425b      	negs	r3, r3
 80045d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045d6:	486f      	ldr	r0, [pc, #444]	; (8004794 <_printf_i+0x21c>)
 80045d8:	220a      	movs	r2, #10
 80045da:	e039      	b.n	8004650 <_printf_i+0xd8>
 80045dc:	2973      	cmp	r1, #115	; 0x73
 80045de:	f000 809d 	beq.w	800471c <_printf_i+0x1a4>
 80045e2:	d808      	bhi.n	80045f6 <_printf_i+0x7e>
 80045e4:	296f      	cmp	r1, #111	; 0x6f
 80045e6:	d020      	beq.n	800462a <_printf_i+0xb2>
 80045e8:	2970      	cmp	r1, #112	; 0x70
 80045ea:	d1dd      	bne.n	80045a8 <_printf_i+0x30>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f043 0320 	orr.w	r3, r3, #32
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	e003      	b.n	80045fe <_printf_i+0x86>
 80045f6:	2975      	cmp	r1, #117	; 0x75
 80045f8:	d017      	beq.n	800462a <_printf_i+0xb2>
 80045fa:	2978      	cmp	r1, #120	; 0x78
 80045fc:	d1d4      	bne.n	80045a8 <_printf_i+0x30>
 80045fe:	2378      	movs	r3, #120	; 0x78
 8004600:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004604:	4864      	ldr	r0, [pc, #400]	; (8004798 <_printf_i+0x220>)
 8004606:	e055      	b.n	80046b4 <_printf_i+0x13c>
 8004608:	6813      	ldr	r3, [r2, #0]
 800460a:	1d19      	adds	r1, r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6011      	str	r1, [r2, #0]
 8004610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004618:	2301      	movs	r3, #1
 800461a:	e08c      	b.n	8004736 <_printf_i+0x1be>
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6011      	str	r1, [r2, #0]
 8004620:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004624:	bf18      	it	ne
 8004626:	b21b      	sxthne	r3, r3
 8004628:	e7cf      	b.n	80045ca <_printf_i+0x52>
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	6825      	ldr	r5, [r4, #0]
 800462e:	1d18      	adds	r0, r3, #4
 8004630:	6010      	str	r0, [r2, #0]
 8004632:	0628      	lsls	r0, r5, #24
 8004634:	d501      	bpl.n	800463a <_printf_i+0xc2>
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	e002      	b.n	8004640 <_printf_i+0xc8>
 800463a:	0668      	lsls	r0, r5, #25
 800463c:	d5fb      	bpl.n	8004636 <_printf_i+0xbe>
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	4854      	ldr	r0, [pc, #336]	; (8004794 <_printf_i+0x21c>)
 8004642:	296f      	cmp	r1, #111	; 0x6f
 8004644:	bf14      	ite	ne
 8004646:	220a      	movne	r2, #10
 8004648:	2208      	moveq	r2, #8
 800464a:	2100      	movs	r1, #0
 800464c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004650:	6865      	ldr	r5, [r4, #4]
 8004652:	60a5      	str	r5, [r4, #8]
 8004654:	2d00      	cmp	r5, #0
 8004656:	f2c0 8095 	blt.w	8004784 <_printf_i+0x20c>
 800465a:	6821      	ldr	r1, [r4, #0]
 800465c:	f021 0104 	bic.w	r1, r1, #4
 8004660:	6021      	str	r1, [r4, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d13d      	bne.n	80046e2 <_printf_i+0x16a>
 8004666:	2d00      	cmp	r5, #0
 8004668:	f040 808e 	bne.w	8004788 <_printf_i+0x210>
 800466c:	4665      	mov	r5, ip
 800466e:	2a08      	cmp	r2, #8
 8004670:	d10b      	bne.n	800468a <_printf_i+0x112>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	07db      	lsls	r3, r3, #31
 8004676:	d508      	bpl.n	800468a <_printf_i+0x112>
 8004678:	6923      	ldr	r3, [r4, #16]
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	bfde      	ittt	le
 8004680:	2330      	movle	r3, #48	; 0x30
 8004682:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004686:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800468a:	ebac 0305 	sub.w	r3, ip, r5
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	f8cd 8000 	str.w	r8, [sp]
 8004694:	463b      	mov	r3, r7
 8004696:	aa03      	add	r2, sp, #12
 8004698:	4621      	mov	r1, r4
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff fef6 	bl	800448c <_printf_common>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d14d      	bne.n	8004740 <_printf_i+0x1c8>
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046a8:	b005      	add	sp, #20
 80046aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ae:	4839      	ldr	r0, [pc, #228]	; (8004794 <_printf_i+0x21c>)
 80046b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046b4:	6813      	ldr	r3, [r2, #0]
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	1d1d      	adds	r5, r3, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6015      	str	r5, [r2, #0]
 80046be:	060a      	lsls	r2, r1, #24
 80046c0:	d50b      	bpl.n	80046da <_printf_i+0x162>
 80046c2:	07ca      	lsls	r2, r1, #31
 80046c4:	bf44      	itt	mi
 80046c6:	f041 0120 	orrmi.w	r1, r1, #32
 80046ca:	6021      	strmi	r1, [r4, #0]
 80046cc:	b91b      	cbnz	r3, 80046d6 <_printf_i+0x15e>
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	f022 0220 	bic.w	r2, r2, #32
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	2210      	movs	r2, #16
 80046d8:	e7b7      	b.n	800464a <_printf_i+0xd2>
 80046da:	064d      	lsls	r5, r1, #25
 80046dc:	bf48      	it	mi
 80046de:	b29b      	uxthmi	r3, r3
 80046e0:	e7ef      	b.n	80046c2 <_printf_i+0x14a>
 80046e2:	4665      	mov	r5, ip
 80046e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80046e8:	fb02 3311 	mls	r3, r2, r1, r3
 80046ec:	5cc3      	ldrb	r3, [r0, r3]
 80046ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046f2:	460b      	mov	r3, r1
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d1f5      	bne.n	80046e4 <_printf_i+0x16c>
 80046f8:	e7b9      	b.n	800466e <_printf_i+0xf6>
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	6961      	ldr	r1, [r4, #20]
 8004700:	1d18      	adds	r0, r3, #4
 8004702:	6010      	str	r0, [r2, #0]
 8004704:	0628      	lsls	r0, r5, #24
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	d501      	bpl.n	800470e <_printf_i+0x196>
 800470a:	6019      	str	r1, [r3, #0]
 800470c:	e002      	b.n	8004714 <_printf_i+0x19c>
 800470e:	066a      	lsls	r2, r5, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0x192>
 8004712:	8019      	strh	r1, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	6123      	str	r3, [r4, #16]
 8004718:	4665      	mov	r5, ip
 800471a:	e7b9      	b.n	8004690 <_printf_i+0x118>
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	1d19      	adds	r1, r3, #4
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	681d      	ldr	r5, [r3, #0]
 8004724:	6862      	ldr	r2, [r4, #4]
 8004726:	2100      	movs	r1, #0
 8004728:	4628      	mov	r0, r5
 800472a:	f7fb fd61 	bl	80001f0 <memchr>
 800472e:	b108      	cbz	r0, 8004734 <_printf_i+0x1bc>
 8004730:	1b40      	subs	r0, r0, r5
 8004732:	6060      	str	r0, [r4, #4]
 8004734:	6863      	ldr	r3, [r4, #4]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	e7a7      	b.n	8004690 <_printf_i+0x118>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	462a      	mov	r2, r5
 8004744:	4639      	mov	r1, r7
 8004746:	4630      	mov	r0, r6
 8004748:	47c0      	blx	r8
 800474a:	3001      	adds	r0, #1
 800474c:	d0aa      	beq.n	80046a4 <_printf_i+0x12c>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	079b      	lsls	r3, r3, #30
 8004752:	d413      	bmi.n	800477c <_printf_i+0x204>
 8004754:	68e0      	ldr	r0, [r4, #12]
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	4298      	cmp	r0, r3
 800475a:	bfb8      	it	lt
 800475c:	4618      	movlt	r0, r3
 800475e:	e7a3      	b.n	80046a8 <_printf_i+0x130>
 8004760:	2301      	movs	r3, #1
 8004762:	464a      	mov	r2, r9
 8004764:	4639      	mov	r1, r7
 8004766:	4630      	mov	r0, r6
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d09a      	beq.n	80046a4 <_printf_i+0x12c>
 800476e:	3501      	adds	r5, #1
 8004770:	68e3      	ldr	r3, [r4, #12]
 8004772:	9a03      	ldr	r2, [sp, #12]
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	42ab      	cmp	r3, r5
 8004778:	dcf2      	bgt.n	8004760 <_printf_i+0x1e8>
 800477a:	e7eb      	b.n	8004754 <_printf_i+0x1dc>
 800477c:	2500      	movs	r5, #0
 800477e:	f104 0919 	add.w	r9, r4, #25
 8004782:	e7f5      	b.n	8004770 <_printf_i+0x1f8>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ac      	bne.n	80046e2 <_printf_i+0x16a>
 8004788:	7803      	ldrb	r3, [r0, #0]
 800478a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800478e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004792:	e76c      	b.n	800466e <_printf_i+0xf6>
 8004794:	0800603e 	.word	0x0800603e
 8004798:	0800604f 	.word	0x0800604f

0800479c <siprintf>:
 800479c:	b40e      	push	{r1, r2, r3}
 800479e:	b500      	push	{lr}
 80047a0:	b09c      	sub	sp, #112	; 0x70
 80047a2:	ab1d      	add	r3, sp, #116	; 0x74
 80047a4:	9002      	str	r0, [sp, #8]
 80047a6:	9006      	str	r0, [sp, #24]
 80047a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047ac:	4809      	ldr	r0, [pc, #36]	; (80047d4 <siprintf+0x38>)
 80047ae:	9107      	str	r1, [sp, #28]
 80047b0:	9104      	str	r1, [sp, #16]
 80047b2:	4909      	ldr	r1, [pc, #36]	; (80047d8 <siprintf+0x3c>)
 80047b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b8:	9105      	str	r1, [sp, #20]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	a902      	add	r1, sp, #8
 80047c0:	f001 fa5e 	bl	8005c80 <_svfiprintf_r>
 80047c4:	9b02      	ldr	r3, [sp, #8]
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	b01c      	add	sp, #112	; 0x70
 80047cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d0:	b003      	add	sp, #12
 80047d2:	4770      	bx	lr
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	ffff0208 	.word	0xffff0208

080047dc <quorem>:
 80047dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	6903      	ldr	r3, [r0, #16]
 80047e2:	690c      	ldr	r4, [r1, #16]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	4680      	mov	r8, r0
 80047e8:	f2c0 8082 	blt.w	80048f0 <quorem+0x114>
 80047ec:	3c01      	subs	r4, #1
 80047ee:	f101 0714 	add.w	r7, r1, #20
 80047f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80047f6:	f100 0614 	add.w	r6, r0, #20
 80047fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80047fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004802:	eb06 030c 	add.w	r3, r6, ip
 8004806:	3501      	adds	r5, #1
 8004808:	eb07 090c 	add.w	r9, r7, ip
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004812:	b395      	cbz	r5, 800487a <quorem+0x9e>
 8004814:	f04f 0a00 	mov.w	sl, #0
 8004818:	4638      	mov	r0, r7
 800481a:	46b6      	mov	lr, r6
 800481c:	46d3      	mov	fp, sl
 800481e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004822:	b293      	uxth	r3, r2
 8004824:	fb05 a303 	mla	r3, r5, r3, sl
 8004828:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800482c:	b29b      	uxth	r3, r3
 800482e:	ebab 0303 	sub.w	r3, fp, r3
 8004832:	0c12      	lsrs	r2, r2, #16
 8004834:	f8de b000 	ldr.w	fp, [lr]
 8004838:	fb05 a202 	mla	r2, r5, r2, sl
 800483c:	fa13 f38b 	uxtah	r3, r3, fp
 8004840:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004844:	fa1f fb82 	uxth.w	fp, r2
 8004848:	f8de 2000 	ldr.w	r2, [lr]
 800484c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004854:	b29b      	uxth	r3, r3
 8004856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800485a:	4581      	cmp	r9, r0
 800485c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004860:	f84e 3b04 	str.w	r3, [lr], #4
 8004864:	d2db      	bcs.n	800481e <quorem+0x42>
 8004866:	f856 300c 	ldr.w	r3, [r6, ip]
 800486a:	b933      	cbnz	r3, 800487a <quorem+0x9e>
 800486c:	9b01      	ldr	r3, [sp, #4]
 800486e:	3b04      	subs	r3, #4
 8004870:	429e      	cmp	r6, r3
 8004872:	461a      	mov	r2, r3
 8004874:	d330      	bcc.n	80048d8 <quorem+0xfc>
 8004876:	f8c8 4010 	str.w	r4, [r8, #16]
 800487a:	4640      	mov	r0, r8
 800487c:	f001 f82a 	bl	80058d4 <__mcmp>
 8004880:	2800      	cmp	r0, #0
 8004882:	db25      	blt.n	80048d0 <quorem+0xf4>
 8004884:	3501      	adds	r5, #1
 8004886:	4630      	mov	r0, r6
 8004888:	f04f 0c00 	mov.w	ip, #0
 800488c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004890:	f8d0 e000 	ldr.w	lr, [r0]
 8004894:	b293      	uxth	r3, r2
 8004896:	ebac 0303 	sub.w	r3, ip, r3
 800489a:	0c12      	lsrs	r2, r2, #16
 800489c:	fa13 f38e 	uxtah	r3, r3, lr
 80048a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ae:	45b9      	cmp	r9, r7
 80048b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048b4:	f840 3b04 	str.w	r3, [r0], #4
 80048b8:	d2e8      	bcs.n	800488c <quorem+0xb0>
 80048ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048c2:	b92a      	cbnz	r2, 80048d0 <quorem+0xf4>
 80048c4:	3b04      	subs	r3, #4
 80048c6:	429e      	cmp	r6, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	d30b      	bcc.n	80048e4 <quorem+0x108>
 80048cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80048d0:	4628      	mov	r0, r5
 80048d2:	b003      	add	sp, #12
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	3b04      	subs	r3, #4
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d1ca      	bne.n	8004876 <quorem+0x9a>
 80048e0:	3c01      	subs	r4, #1
 80048e2:	e7c5      	b.n	8004870 <quorem+0x94>
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	3b04      	subs	r3, #4
 80048e8:	2a00      	cmp	r2, #0
 80048ea:	d1ef      	bne.n	80048cc <quorem+0xf0>
 80048ec:	3c01      	subs	r4, #1
 80048ee:	e7ea      	b.n	80048c6 <quorem+0xea>
 80048f0:	2000      	movs	r0, #0
 80048f2:	e7ee      	b.n	80048d2 <quorem+0xf6>
 80048f4:	0000      	movs	r0, r0
	...

080048f8 <_dtoa_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	ec57 6b10 	vmov	r6, r7, d0
 8004900:	b097      	sub	sp, #92	; 0x5c
 8004902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004904:	9106      	str	r1, [sp, #24]
 8004906:	4604      	mov	r4, r0
 8004908:	920b      	str	r2, [sp, #44]	; 0x2c
 800490a:	9312      	str	r3, [sp, #72]	; 0x48
 800490c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004910:	e9cd 6700 	strd	r6, r7, [sp]
 8004914:	b93d      	cbnz	r5, 8004926 <_dtoa_r+0x2e>
 8004916:	2010      	movs	r0, #16
 8004918:	f000 fdb4 	bl	8005484 <malloc>
 800491c:	6260      	str	r0, [r4, #36]	; 0x24
 800491e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004922:	6005      	str	r5, [r0, #0]
 8004924:	60c5      	str	r5, [r0, #12]
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	b151      	cbz	r1, 8004942 <_dtoa_r+0x4a>
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	604a      	str	r2, [r1, #4]
 8004930:	2301      	movs	r3, #1
 8004932:	4093      	lsls	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
 8004936:	4620      	mov	r0, r4
 8004938:	f000 fdeb 	bl	8005512 <_Bfree>
 800493c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	1e3b      	subs	r3, r7, #0
 8004944:	bfbb      	ittet	lt
 8004946:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800494a:	9301      	strlt	r3, [sp, #4]
 800494c:	2300      	movge	r3, #0
 800494e:	2201      	movlt	r2, #1
 8004950:	bfac      	ite	ge
 8004952:	f8c8 3000 	strge.w	r3, [r8]
 8004956:	f8c8 2000 	strlt.w	r2, [r8]
 800495a:	4baf      	ldr	r3, [pc, #700]	; (8004c18 <_dtoa_r+0x320>)
 800495c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004960:	ea33 0308 	bics.w	r3, r3, r8
 8004964:	d114      	bne.n	8004990 <_dtoa_r+0x98>
 8004966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004968:	f242 730f 	movw	r3, #9999	; 0x270f
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	b923      	cbnz	r3, 800497c <_dtoa_r+0x84>
 8004972:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004976:	2800      	cmp	r0, #0
 8004978:	f000 8542 	beq.w	8005400 <_dtoa_r+0xb08>
 800497c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800497e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004c2c <_dtoa_r+0x334>
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8544 	beq.w	8005410 <_dtoa_r+0xb18>
 8004988:	f10b 0303 	add.w	r3, fp, #3
 800498c:	f000 bd3e 	b.w	800540c <_dtoa_r+0xb14>
 8004990:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80049a0:	4681      	mov	r9, r0
 80049a2:	b168      	cbz	r0, 80049c0 <_dtoa_r+0xc8>
 80049a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049a6:	2301      	movs	r3, #1
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8524 	beq.w	80053fa <_dtoa_r+0xb02>
 80049b2:	4b9a      	ldr	r3, [pc, #616]	; (8004c1c <_dtoa_r+0x324>)
 80049b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049b6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	f000 bd28 	b.w	8005410 <_dtoa_r+0xb18>
 80049c0:	aa14      	add	r2, sp, #80	; 0x50
 80049c2:	a915      	add	r1, sp, #84	; 0x54
 80049c4:	ec47 6b10 	vmov	d0, r6, r7
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fffa 	bl	80059c2 <__d2b>
 80049ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80049d2:	9004      	str	r0, [sp, #16]
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	d07c      	beq.n	8004ad2 <_dtoa_r+0x1da>
 80049d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80049e0:	46b2      	mov	sl, r6
 80049e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80049e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80049ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80049ee:	2200      	movs	r2, #0
 80049f0:	4b8b      	ldr	r3, [pc, #556]	; (8004c20 <_dtoa_r+0x328>)
 80049f2:	4650      	mov	r0, sl
 80049f4:	4659      	mov	r1, fp
 80049f6:	f7fb fc4f 	bl	8000298 <__aeabi_dsub>
 80049fa:	a381      	add	r3, pc, #516	; (adr r3, 8004c00 <_dtoa_r+0x308>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fe02 	bl	8000608 <__aeabi_dmul>
 8004a04:	a380      	add	r3, pc, #512	; (adr r3, 8004c08 <_dtoa_r+0x310>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	f7fb fc47 	bl	800029c <__adddf3>
 8004a0e:	4606      	mov	r6, r0
 8004a10:	4628      	mov	r0, r5
 8004a12:	460f      	mov	r7, r1
 8004a14:	f7fb fd8e 	bl	8000534 <__aeabi_i2d>
 8004a18:	a37d      	add	r3, pc, #500	; (adr r3, 8004c10 <_dtoa_r+0x318>)
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	f7fb fdf3 	bl	8000608 <__aeabi_dmul>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4630      	mov	r0, r6
 8004a28:	4639      	mov	r1, r7
 8004a2a:	f7fb fc37 	bl	800029c <__adddf3>
 8004a2e:	4606      	mov	r6, r0
 8004a30:	460f      	mov	r7, r1
 8004a32:	f7fc f899 	bl	8000b68 <__aeabi_d2iz>
 8004a36:	2200      	movs	r2, #0
 8004a38:	4682      	mov	sl, r0
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4639      	mov	r1, r7
 8004a40:	f7fc f854 	bl	8000aec <__aeabi_dcmplt>
 8004a44:	b148      	cbz	r0, 8004a5a <_dtoa_r+0x162>
 8004a46:	4650      	mov	r0, sl
 8004a48:	f7fb fd74 	bl	8000534 <__aeabi_i2d>
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	463b      	mov	r3, r7
 8004a50:	f7fc f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a54:	b908      	cbnz	r0, 8004a5a <_dtoa_r+0x162>
 8004a56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a5a:	f1ba 0f16 	cmp.w	sl, #22
 8004a5e:	d859      	bhi.n	8004b14 <_dtoa_r+0x21c>
 8004a60:	4970      	ldr	r1, [pc, #448]	; (8004c24 <_dtoa_r+0x32c>)
 8004a62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a6e:	f7fc f85b 	bl	8000b28 <__aeabi_dcmpgt>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d050      	beq.n	8004b18 <_dtoa_r+0x220>
 8004a76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a80:	1b5d      	subs	r5, r3, r5
 8004a82:	f1b5 0801 	subs.w	r8, r5, #1
 8004a86:	bf49      	itett	mi
 8004a88:	f1c5 0301 	rsbmi	r3, r5, #1
 8004a8c:	2300      	movpl	r3, #0
 8004a8e:	9305      	strmi	r3, [sp, #20]
 8004a90:	f04f 0800 	movmi.w	r8, #0
 8004a94:	bf58      	it	pl
 8004a96:	9305      	strpl	r3, [sp, #20]
 8004a98:	f1ba 0f00 	cmp.w	sl, #0
 8004a9c:	db3e      	blt.n	8004b1c <_dtoa_r+0x224>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	44d0      	add	r8, sl
 8004aa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004aa6:	9307      	str	r3, [sp, #28]
 8004aa8:	9b06      	ldr	r3, [sp, #24]
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	f200 8090 	bhi.w	8004bd0 <_dtoa_r+0x2d8>
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	bfc4      	itt	gt
 8004ab4:	3b04      	subgt	r3, #4
 8004ab6:	9306      	strgt	r3, [sp, #24]
 8004ab8:	9b06      	ldr	r3, [sp, #24]
 8004aba:	f1a3 0302 	sub.w	r3, r3, #2
 8004abe:	bfcc      	ite	gt
 8004ac0:	2500      	movgt	r5, #0
 8004ac2:	2501      	movle	r5, #1
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	f200 808f 	bhi.w	8004be8 <_dtoa_r+0x2f0>
 8004aca:	e8df f003 	tbb	[pc, r3]
 8004ace:	7f7d      	.short	0x7f7d
 8004ad0:	7131      	.short	0x7131
 8004ad2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004ad6:	441d      	add	r5, r3
 8004ad8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004adc:	2820      	cmp	r0, #32
 8004ade:	dd13      	ble.n	8004b08 <_dtoa_r+0x210>
 8004ae0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004ae4:	9b00      	ldr	r3, [sp, #0]
 8004ae6:	fa08 f800 	lsl.w	r8, r8, r0
 8004aea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004aee:	fa23 f000 	lsr.w	r0, r3, r0
 8004af2:	ea48 0000 	orr.w	r0, r8, r0
 8004af6:	f7fb fd0d 	bl	8000514 <__aeabi_ui2d>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4682      	mov	sl, r0
 8004afe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004b02:	3d01      	subs	r5, #1
 8004b04:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b06:	e772      	b.n	80049ee <_dtoa_r+0xf6>
 8004b08:	9b00      	ldr	r3, [sp, #0]
 8004b0a:	f1c0 0020 	rsb	r0, r0, #32
 8004b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b12:	e7f0      	b.n	8004af6 <_dtoa_r+0x1fe>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e7b1      	b.n	8004a7c <_dtoa_r+0x184>
 8004b18:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b1a:	e7b0      	b.n	8004a7e <_dtoa_r+0x186>
 8004b1c:	9b05      	ldr	r3, [sp, #20]
 8004b1e:	eba3 030a 	sub.w	r3, r3, sl
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	f1ca 0300 	rsb	r3, sl, #0
 8004b28:	9307      	str	r3, [sp, #28]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b2e:	e7bb      	b.n	8004aa8 <_dtoa_r+0x1b0>
 8004b30:	2301      	movs	r3, #1
 8004b32:	930a      	str	r3, [sp, #40]	; 0x28
 8004b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dd59      	ble.n	8004bee <_dtoa_r+0x2f6>
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	4699      	mov	r9, r3
 8004b3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b40:	2200      	movs	r2, #0
 8004b42:	6072      	str	r2, [r6, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	f102 0014 	add.w	r0, r2, #20
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	6871      	ldr	r1, [r6, #4]
 8004b4e:	d953      	bls.n	8004bf8 <_dtoa_r+0x300>
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fcaa 	bl	80054aa <_Balloc>
 8004b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b58:	6030      	str	r0, [r6, #0]
 8004b5a:	f1b9 0f0e 	cmp.w	r9, #14
 8004b5e:	f8d3 b000 	ldr.w	fp, [r3]
 8004b62:	f200 80e6 	bhi.w	8004d32 <_dtoa_r+0x43a>
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	f000 80e3 	beq.w	8004d32 <_dtoa_r+0x43a>
 8004b6c:	ed9d 7b00 	vldr	d7, [sp]
 8004b70:	f1ba 0f00 	cmp.w	sl, #0
 8004b74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004b78:	dd74      	ble.n	8004c64 <_dtoa_r+0x36c>
 8004b7a:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <_dtoa_r+0x32c>)
 8004b7c:	f00a 030f 	and.w	r3, sl, #15
 8004b80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b84:	ed93 7b00 	vldr	d7, [r3]
 8004b88:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004b8c:	06f0      	lsls	r0, r6, #27
 8004b8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004b92:	d565      	bpl.n	8004c60 <_dtoa_r+0x368>
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <_dtoa_r+0x330>)
 8004b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b9e:	f7fb fe5d 	bl	800085c <__aeabi_ddiv>
 8004ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ba6:	f006 060f 	and.w	r6, r6, #15
 8004baa:	2503      	movs	r5, #3
 8004bac:	4f1e      	ldr	r7, [pc, #120]	; (8004c28 <_dtoa_r+0x330>)
 8004bae:	e04c      	b.n	8004c4a <_dtoa_r+0x352>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb6:	4453      	add	r3, sl
 8004bb8:	f103 0901 	add.w	r9, r3, #1
 8004bbc:	9302      	str	r3, [sp, #8]
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bfb8      	it	lt
 8004bc4:	2301      	movlt	r3, #1
 8004bc6:	e7ba      	b.n	8004b3e <_dtoa_r+0x246>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e7b2      	b.n	8004b32 <_dtoa_r+0x23a>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e7f0      	b.n	8004bb2 <_dtoa_r+0x2ba>
 8004bd0:	2501      	movs	r5, #1
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9306      	str	r3, [sp, #24]
 8004bd6:	950a      	str	r5, [sp, #40]	; 0x28
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bdc:	9302      	str	r3, [sp, #8]
 8004bde:	4699      	mov	r9, r3
 8004be0:	2200      	movs	r2, #0
 8004be2:	2312      	movs	r3, #18
 8004be4:	920b      	str	r2, [sp, #44]	; 0x2c
 8004be6:	e7aa      	b.n	8004b3e <_dtoa_r+0x246>
 8004be8:	2301      	movs	r3, #1
 8004bea:	930a      	str	r3, [sp, #40]	; 0x28
 8004bec:	e7f4      	b.n	8004bd8 <_dtoa_r+0x2e0>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	9302      	str	r3, [sp, #8]
 8004bf2:	4699      	mov	r9, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	e7f5      	b.n	8004be4 <_dtoa_r+0x2ec>
 8004bf8:	3101      	adds	r1, #1
 8004bfa:	6071      	str	r1, [r6, #4]
 8004bfc:	0052      	lsls	r2, r2, #1
 8004bfe:	e7a2      	b.n	8004b46 <_dtoa_r+0x24e>
 8004c00:	636f4361 	.word	0x636f4361
 8004c04:	3fd287a7 	.word	0x3fd287a7
 8004c08:	8b60c8b3 	.word	0x8b60c8b3
 8004c0c:	3fc68a28 	.word	0x3fc68a28
 8004c10:	509f79fb 	.word	0x509f79fb
 8004c14:	3fd34413 	.word	0x3fd34413
 8004c18:	7ff00000 	.word	0x7ff00000
 8004c1c:	0800603d 	.word	0x0800603d
 8004c20:	3ff80000 	.word	0x3ff80000
 8004c24:	08006098 	.word	0x08006098
 8004c28:	08006070 	.word	0x08006070
 8004c2c:	08006069 	.word	0x08006069
 8004c30:	07f1      	lsls	r1, r6, #31
 8004c32:	d508      	bpl.n	8004c46 <_dtoa_r+0x34e>
 8004c34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3c:	f7fb fce4 	bl	8000608 <__aeabi_dmul>
 8004c40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c44:	3501      	adds	r5, #1
 8004c46:	1076      	asrs	r6, r6, #1
 8004c48:	3708      	adds	r7, #8
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d1f0      	bne.n	8004c30 <_dtoa_r+0x338>
 8004c4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c56:	f7fb fe01 	bl	800085c <__aeabi_ddiv>
 8004c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c5e:	e01a      	b.n	8004c96 <_dtoa_r+0x39e>
 8004c60:	2502      	movs	r5, #2
 8004c62:	e7a3      	b.n	8004bac <_dtoa_r+0x2b4>
 8004c64:	f000 80a0 	beq.w	8004da8 <_dtoa_r+0x4b0>
 8004c68:	f1ca 0600 	rsb	r6, sl, #0
 8004c6c:	4b9f      	ldr	r3, [pc, #636]	; (8004eec <_dtoa_r+0x5f4>)
 8004c6e:	4fa0      	ldr	r7, [pc, #640]	; (8004ef0 <_dtoa_r+0x5f8>)
 8004c70:	f006 020f 	and.w	r2, r6, #15
 8004c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c80:	f7fb fcc2 	bl	8000608 <__aeabi_dmul>
 8004c84:	e9cd 0100 	strd	r0, r1, [sp]
 8004c88:	1136      	asrs	r6, r6, #4
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2502      	movs	r5, #2
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d17f      	bne.n	8004d92 <_dtoa_r+0x49a>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e1      	bne.n	8004c5a <_dtoa_r+0x362>
 8004c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8087 	beq.w	8004dac <_dtoa_r+0x4b4>
 8004c9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	4b93      	ldr	r3, [pc, #588]	; (8004ef4 <_dtoa_r+0x5fc>)
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4639      	mov	r1, r7
 8004caa:	f7fb ff1f 	bl	8000aec <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d07c      	beq.n	8004dac <_dtoa_r+0x4b4>
 8004cb2:	f1b9 0f00 	cmp.w	r9, #0
 8004cb6:	d079      	beq.n	8004dac <_dtoa_r+0x4b4>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dd35      	ble.n	8004d2a <_dtoa_r+0x432>
 8004cbe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004cc2:	9308      	str	r3, [sp, #32]
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4b8b      	ldr	r3, [pc, #556]	; (8004ef8 <_dtoa_r+0x600>)
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f7fb fc9c 	bl	8000608 <__aeabi_dmul>
 8004cd0:	e9cd 0100 	strd	r0, r1, [sp]
 8004cd4:	9f02      	ldr	r7, [sp, #8]
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f7fb fc2b 	bl	8000534 <__aeabi_i2d>
 8004cde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ce2:	f7fb fc91 	bl	8000608 <__aeabi_dmul>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4b84      	ldr	r3, [pc, #528]	; (8004efc <_dtoa_r+0x604>)
 8004cea:	f7fb fad7 	bl	800029c <__adddf3>
 8004cee:	4605      	mov	r5, r0
 8004cf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	d15d      	bne.n	8004db4 <_dtoa_r+0x4bc>
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4b81      	ldr	r3, [pc, #516]	; (8004f00 <_dtoa_r+0x608>)
 8004cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d00:	f7fb faca 	bl	8000298 <__aeabi_dsub>
 8004d04:	462a      	mov	r2, r5
 8004d06:	4633      	mov	r3, r6
 8004d08:	e9cd 0100 	strd	r0, r1, [sp]
 8004d0c:	f7fb ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f040 8288 	bne.w	8005226 <_dtoa_r+0x92e>
 8004d16:	462a      	mov	r2, r5
 8004d18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d20:	f7fb fee4 	bl	8000aec <__aeabi_dcmplt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f040 827c 	bne.w	8005222 <_dtoa_r+0x92a>
 8004d2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d2e:	e9cd 2300 	strd	r2, r3, [sp]
 8004d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f2c0 8150 	blt.w	8004fda <_dtoa_r+0x6e2>
 8004d3a:	f1ba 0f0e 	cmp.w	sl, #14
 8004d3e:	f300 814c 	bgt.w	8004fda <_dtoa_r+0x6e2>
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <_dtoa_r+0x5f4>)
 8004d44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d48:	ed93 7b00 	vldr	d7, [r3]
 8004d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d54:	f280 80d8 	bge.w	8004f08 <_dtoa_r+0x610>
 8004d58:	f1b9 0f00 	cmp.w	r9, #0
 8004d5c:	f300 80d4 	bgt.w	8004f08 <_dtoa_r+0x610>
 8004d60:	f040 825e 	bne.w	8005220 <_dtoa_r+0x928>
 8004d64:	2200      	movs	r2, #0
 8004d66:	4b66      	ldr	r3, [pc, #408]	; (8004f00 <_dtoa_r+0x608>)
 8004d68:	ec51 0b17 	vmov	r0, r1, d7
 8004d6c:	f7fb fc4c 	bl	8000608 <__aeabi_dmul>
 8004d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d74:	f7fb fece 	bl	8000b14 <__aeabi_dcmpge>
 8004d78:	464f      	mov	r7, r9
 8004d7a:	464e      	mov	r6, r9
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f040 8234 	bne.w	80051ea <_dtoa_r+0x8f2>
 8004d82:	2331      	movs	r3, #49	; 0x31
 8004d84:	f10b 0501 	add.w	r5, fp, #1
 8004d88:	f88b 3000 	strb.w	r3, [fp]
 8004d8c:	f10a 0a01 	add.w	sl, sl, #1
 8004d90:	e22f      	b.n	80051f2 <_dtoa_r+0x8fa>
 8004d92:	07f2      	lsls	r2, r6, #31
 8004d94:	d505      	bpl.n	8004da2 <_dtoa_r+0x4aa>
 8004d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9a:	f7fb fc35 	bl	8000608 <__aeabi_dmul>
 8004d9e:	3501      	adds	r5, #1
 8004da0:	2301      	movs	r3, #1
 8004da2:	1076      	asrs	r6, r6, #1
 8004da4:	3708      	adds	r7, #8
 8004da6:	e772      	b.n	8004c8e <_dtoa_r+0x396>
 8004da8:	2502      	movs	r5, #2
 8004daa:	e774      	b.n	8004c96 <_dtoa_r+0x39e>
 8004dac:	f8cd a020 	str.w	sl, [sp, #32]
 8004db0:	464f      	mov	r7, r9
 8004db2:	e791      	b.n	8004cd8 <_dtoa_r+0x3e0>
 8004db4:	4b4d      	ldr	r3, [pc, #308]	; (8004eec <_dtoa_r+0x5f4>)
 8004db6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d047      	beq.n	8004e54 <_dtoa_r+0x55c>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	2000      	movs	r0, #0
 8004dca:	494e      	ldr	r1, [pc, #312]	; (8004f04 <_dtoa_r+0x60c>)
 8004dcc:	f7fb fd46 	bl	800085c <__aeabi_ddiv>
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4633      	mov	r3, r6
 8004dd4:	f7fb fa60 	bl	8000298 <__aeabi_dsub>
 8004dd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ddc:	465d      	mov	r5, fp
 8004dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004de2:	f7fb fec1 	bl	8000b68 <__aeabi_d2iz>
 8004de6:	4606      	mov	r6, r0
 8004de8:	f7fb fba4 	bl	8000534 <__aeabi_i2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004df4:	f7fb fa50 	bl	8000298 <__aeabi_dsub>
 8004df8:	3630      	adds	r6, #48	; 0x30
 8004dfa:	f805 6b01 	strb.w	r6, [r5], #1
 8004dfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e02:	e9cd 0100 	strd	r0, r1, [sp]
 8004e06:	f7fb fe71 	bl	8000aec <__aeabi_dcmplt>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d163      	bne.n	8004ed6 <_dtoa_r+0x5de>
 8004e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e12:	2000      	movs	r0, #0
 8004e14:	4937      	ldr	r1, [pc, #220]	; (8004ef4 <_dtoa_r+0x5fc>)
 8004e16:	f7fb fa3f 	bl	8000298 <__aeabi_dsub>
 8004e1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e1e:	f7fb fe65 	bl	8000aec <__aeabi_dcmplt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	f040 80b7 	bne.w	8004f96 <_dtoa_r+0x69e>
 8004e28:	eba5 030b 	sub.w	r3, r5, fp
 8004e2c:	429f      	cmp	r7, r3
 8004e2e:	f77f af7c 	ble.w	8004d2a <_dtoa_r+0x432>
 8004e32:	2200      	movs	r2, #0
 8004e34:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <_dtoa_r+0x600>)
 8004e36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e3a:	f7fb fbe5 	bl	8000608 <__aeabi_dmul>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e44:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <_dtoa_r+0x600>)
 8004e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e4a:	f7fb fbdd 	bl	8000608 <__aeabi_dmul>
 8004e4e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e52:	e7c4      	b.n	8004dde <_dtoa_r+0x4e6>
 8004e54:	462a      	mov	r2, r5
 8004e56:	4633      	mov	r3, r6
 8004e58:	f7fb fbd6 	bl	8000608 <__aeabi_dmul>
 8004e5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e60:	eb0b 0507 	add.w	r5, fp, r7
 8004e64:	465e      	mov	r6, fp
 8004e66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e6a:	f7fb fe7d 	bl	8000b68 <__aeabi_d2iz>
 8004e6e:	4607      	mov	r7, r0
 8004e70:	f7fb fb60 	bl	8000534 <__aeabi_i2d>
 8004e74:	3730      	adds	r7, #48	; 0x30
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e7e:	f7fb fa0b 	bl	8000298 <__aeabi_dsub>
 8004e82:	f806 7b01 	strb.w	r7, [r6], #1
 8004e86:	42ae      	cmp	r6, r5
 8004e88:	e9cd 0100 	strd	r0, r1, [sp]
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	d126      	bne.n	8004ee0 <_dtoa_r+0x5e8>
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <_dtoa_r+0x60c>)
 8004e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e98:	f7fb fa00 	bl	800029c <__adddf3>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ea4:	f7fb fe40 	bl	8000b28 <__aeabi_dcmpgt>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d174      	bne.n	8004f96 <_dtoa_r+0x69e>
 8004eac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	4914      	ldr	r1, [pc, #80]	; (8004f04 <_dtoa_r+0x60c>)
 8004eb4:	f7fb f9f0 	bl	8000298 <__aeabi_dsub>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ec0:	f7fb fe14 	bl	8000aec <__aeabi_dcmplt>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f43f af30 	beq.w	8004d2a <_dtoa_r+0x432>
 8004eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ece:	2b30      	cmp	r3, #48	; 0x30
 8004ed0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004ed4:	d002      	beq.n	8004edc <_dtoa_r+0x5e4>
 8004ed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004eda:	e04a      	b.n	8004f72 <_dtoa_r+0x67a>
 8004edc:	4615      	mov	r5, r2
 8004ede:	e7f4      	b.n	8004eca <_dtoa_r+0x5d2>
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <_dtoa_r+0x600>)
 8004ee2:	f7fb fb91 	bl	8000608 <__aeabi_dmul>
 8004ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8004eea:	e7bc      	b.n	8004e66 <_dtoa_r+0x56e>
 8004eec:	08006098 	.word	0x08006098
 8004ef0:	08006070 	.word	0x08006070
 8004ef4:	3ff00000 	.word	0x3ff00000
 8004ef8:	40240000 	.word	0x40240000
 8004efc:	401c0000 	.word	0x401c0000
 8004f00:	40140000 	.word	0x40140000
 8004f04:	3fe00000 	.word	0x3fe00000
 8004f08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f0c:	465d      	mov	r5, fp
 8004f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f12:	4630      	mov	r0, r6
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb fca1 	bl	800085c <__aeabi_ddiv>
 8004f1a:	f7fb fe25 	bl	8000b68 <__aeabi_d2iz>
 8004f1e:	4680      	mov	r8, r0
 8004f20:	f7fb fb08 	bl	8000534 <__aeabi_i2d>
 8004f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f28:	f7fb fb6e 	bl	8000608 <__aeabi_dmul>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4630      	mov	r0, r6
 8004f32:	4639      	mov	r1, r7
 8004f34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004f38:	f7fb f9ae 	bl	8000298 <__aeabi_dsub>
 8004f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8004f40:	eba5 060b 	sub.w	r6, r5, fp
 8004f44:	45b1      	cmp	r9, r6
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	d139      	bne.n	8004fc0 <_dtoa_r+0x6c8>
 8004f4c:	f7fb f9a6 	bl	800029c <__adddf3>
 8004f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f54:	4606      	mov	r6, r0
 8004f56:	460f      	mov	r7, r1
 8004f58:	f7fb fde6 	bl	8000b28 <__aeabi_dcmpgt>
 8004f5c:	b9c8      	cbnz	r0, 8004f92 <_dtoa_r+0x69a>
 8004f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f6a:	b110      	cbz	r0, 8004f72 <_dtoa_r+0x67a>
 8004f6c:	f018 0f01 	tst.w	r8, #1
 8004f70:	d10f      	bne.n	8004f92 <_dtoa_r+0x69a>
 8004f72:	9904      	ldr	r1, [sp, #16]
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 facc 	bl	8005512 <_Bfree>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f7e:	702b      	strb	r3, [r5, #0]
 8004f80:	f10a 0301 	add.w	r3, sl, #1
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8241 	beq.w	8005410 <_dtoa_r+0xb18>
 8004f8e:	601d      	str	r5, [r3, #0]
 8004f90:	e23e      	b.n	8005410 <_dtoa_r+0xb18>
 8004f92:	f8cd a020 	str.w	sl, [sp, #32]
 8004f96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f9a:	2a39      	cmp	r2, #57	; 0x39
 8004f9c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8004fa0:	d108      	bne.n	8004fb4 <_dtoa_r+0x6bc>
 8004fa2:	459b      	cmp	fp, r3
 8004fa4:	d10a      	bne.n	8004fbc <_dtoa_r+0x6c4>
 8004fa6:	9b08      	ldr	r3, [sp, #32]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	9308      	str	r3, [sp, #32]
 8004fac:	2330      	movs	r3, #48	; 0x30
 8004fae:	f88b 3000 	strb.w	r3, [fp]
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	3201      	adds	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e78c      	b.n	8004ed6 <_dtoa_r+0x5de>
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	e7ea      	b.n	8004f96 <_dtoa_r+0x69e>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b9b      	ldr	r3, [pc, #620]	; (8005230 <_dtoa_r+0x938>)
 8004fc4:	f7fb fb20 	bl	8000608 <__aeabi_dmul>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4606      	mov	r6, r0
 8004fce:	460f      	mov	r7, r1
 8004fd0:	f7fb fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d09a      	beq.n	8004f0e <_dtoa_r+0x616>
 8004fd8:	e7cb      	b.n	8004f72 <_dtoa_r+0x67a>
 8004fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fdc:	2a00      	cmp	r2, #0
 8004fde:	f000 808b 	beq.w	80050f8 <_dtoa_r+0x800>
 8004fe2:	9a06      	ldr	r2, [sp, #24]
 8004fe4:	2a01      	cmp	r2, #1
 8004fe6:	dc6e      	bgt.n	80050c6 <_dtoa_r+0x7ce>
 8004fe8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004fea:	2a00      	cmp	r2, #0
 8004fec:	d067      	beq.n	80050be <_dtoa_r+0x7c6>
 8004fee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ff2:	9f07      	ldr	r7, [sp, #28]
 8004ff4:	9d05      	ldr	r5, [sp, #20]
 8004ff6:	9a05      	ldr	r2, [sp, #20]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	441a      	add	r2, r3
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	9205      	str	r2, [sp, #20]
 8005000:	4498      	add	r8, r3
 8005002:	f000 fb26 	bl	8005652 <__i2b>
 8005006:	4606      	mov	r6, r0
 8005008:	2d00      	cmp	r5, #0
 800500a:	dd0c      	ble.n	8005026 <_dtoa_r+0x72e>
 800500c:	f1b8 0f00 	cmp.w	r8, #0
 8005010:	dd09      	ble.n	8005026 <_dtoa_r+0x72e>
 8005012:	4545      	cmp	r5, r8
 8005014:	9a05      	ldr	r2, [sp, #20]
 8005016:	462b      	mov	r3, r5
 8005018:	bfa8      	it	ge
 800501a:	4643      	movge	r3, r8
 800501c:	1ad2      	subs	r2, r2, r3
 800501e:	9205      	str	r2, [sp, #20]
 8005020:	1aed      	subs	r5, r5, r3
 8005022:	eba8 0803 	sub.w	r8, r8, r3
 8005026:	9b07      	ldr	r3, [sp, #28]
 8005028:	b1eb      	cbz	r3, 8005066 <_dtoa_r+0x76e>
 800502a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d067      	beq.n	8005100 <_dtoa_r+0x808>
 8005030:	b18f      	cbz	r7, 8005056 <_dtoa_r+0x75e>
 8005032:	4631      	mov	r1, r6
 8005034:	463a      	mov	r2, r7
 8005036:	4620      	mov	r0, r4
 8005038:	f000 fbaa 	bl	8005790 <__pow5mult>
 800503c:	9a04      	ldr	r2, [sp, #16]
 800503e:	4601      	mov	r1, r0
 8005040:	4606      	mov	r6, r0
 8005042:	4620      	mov	r0, r4
 8005044:	f000 fb0e 	bl	8005664 <__multiply>
 8005048:	9904      	ldr	r1, [sp, #16]
 800504a:	9008      	str	r0, [sp, #32]
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fa60 	bl	8005512 <_Bfree>
 8005052:	9b08      	ldr	r3, [sp, #32]
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	9b07      	ldr	r3, [sp, #28]
 8005058:	1bda      	subs	r2, r3, r7
 800505a:	d004      	beq.n	8005066 <_dtoa_r+0x76e>
 800505c:	9904      	ldr	r1, [sp, #16]
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fb96 	bl	8005790 <__pow5mult>
 8005064:	9004      	str	r0, [sp, #16]
 8005066:	2101      	movs	r1, #1
 8005068:	4620      	mov	r0, r4
 800506a:	f000 faf2 	bl	8005652 <__i2b>
 800506e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005070:	4607      	mov	r7, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 81d0 	beq.w	8005418 <_dtoa_r+0xb20>
 8005078:	461a      	mov	r2, r3
 800507a:	4601      	mov	r1, r0
 800507c:	4620      	mov	r0, r4
 800507e:	f000 fb87 	bl	8005790 <__pow5mult>
 8005082:	9b06      	ldr	r3, [sp, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	4607      	mov	r7, r0
 8005088:	dc40      	bgt.n	800510c <_dtoa_r+0x814>
 800508a:	9b00      	ldr	r3, [sp, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d139      	bne.n	8005104 <_dtoa_r+0x80c>
 8005090:	9b01      	ldr	r3, [sp, #4]
 8005092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005096:	2b00      	cmp	r3, #0
 8005098:	d136      	bne.n	8005108 <_dtoa_r+0x810>
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050a0:	0d1b      	lsrs	r3, r3, #20
 80050a2:	051b      	lsls	r3, r3, #20
 80050a4:	b12b      	cbz	r3, 80050b2 <_dtoa_r+0x7ba>
 80050a6:	9b05      	ldr	r3, [sp, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	f108 0801 	add.w	r8, r8, #1
 80050b0:	2301      	movs	r3, #1
 80050b2:	9307      	str	r3, [sp, #28]
 80050b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d12a      	bne.n	8005110 <_dtoa_r+0x818>
 80050ba:	2001      	movs	r0, #1
 80050bc:	e030      	b.n	8005120 <_dtoa_r+0x828>
 80050be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050c4:	e795      	b.n	8004ff2 <_dtoa_r+0x6fa>
 80050c6:	9b07      	ldr	r3, [sp, #28]
 80050c8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80050cc:	42bb      	cmp	r3, r7
 80050ce:	bfbf      	itttt	lt
 80050d0:	9b07      	ldrlt	r3, [sp, #28]
 80050d2:	9707      	strlt	r7, [sp, #28]
 80050d4:	1afa      	sublt	r2, r7, r3
 80050d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050d8:	bfbb      	ittet	lt
 80050da:	189b      	addlt	r3, r3, r2
 80050dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050de:	1bdf      	subge	r7, r3, r7
 80050e0:	2700      	movlt	r7, #0
 80050e2:	f1b9 0f00 	cmp.w	r9, #0
 80050e6:	bfb5      	itete	lt
 80050e8:	9b05      	ldrlt	r3, [sp, #20]
 80050ea:	9d05      	ldrge	r5, [sp, #20]
 80050ec:	eba3 0509 	sublt.w	r5, r3, r9
 80050f0:	464b      	movge	r3, r9
 80050f2:	bfb8      	it	lt
 80050f4:	2300      	movlt	r3, #0
 80050f6:	e77e      	b.n	8004ff6 <_dtoa_r+0x6fe>
 80050f8:	9f07      	ldr	r7, [sp, #28]
 80050fa:	9d05      	ldr	r5, [sp, #20]
 80050fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80050fe:	e783      	b.n	8005008 <_dtoa_r+0x710>
 8005100:	9a07      	ldr	r2, [sp, #28]
 8005102:	e7ab      	b.n	800505c <_dtoa_r+0x764>
 8005104:	2300      	movs	r3, #0
 8005106:	e7d4      	b.n	80050b2 <_dtoa_r+0x7ba>
 8005108:	9b00      	ldr	r3, [sp, #0]
 800510a:	e7d2      	b.n	80050b2 <_dtoa_r+0x7ba>
 800510c:	2300      	movs	r3, #0
 800510e:	9307      	str	r3, [sp, #28]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005116:	6918      	ldr	r0, [r3, #16]
 8005118:	f000 fa4d 	bl	80055b6 <__hi0bits>
 800511c:	f1c0 0020 	rsb	r0, r0, #32
 8005120:	4440      	add	r0, r8
 8005122:	f010 001f 	ands.w	r0, r0, #31
 8005126:	d047      	beq.n	80051b8 <_dtoa_r+0x8c0>
 8005128:	f1c0 0320 	rsb	r3, r0, #32
 800512c:	2b04      	cmp	r3, #4
 800512e:	dd3b      	ble.n	80051a8 <_dtoa_r+0x8b0>
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	f1c0 001c 	rsb	r0, r0, #28
 8005136:	4403      	add	r3, r0
 8005138:	9305      	str	r3, [sp, #20]
 800513a:	4405      	add	r5, r0
 800513c:	4480      	add	r8, r0
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dd05      	ble.n	8005150 <_dtoa_r+0x858>
 8005144:	461a      	mov	r2, r3
 8005146:	9904      	ldr	r1, [sp, #16]
 8005148:	4620      	mov	r0, r4
 800514a:	f000 fb6f 	bl	800582c <__lshift>
 800514e:	9004      	str	r0, [sp, #16]
 8005150:	f1b8 0f00 	cmp.w	r8, #0
 8005154:	dd05      	ble.n	8005162 <_dtoa_r+0x86a>
 8005156:	4639      	mov	r1, r7
 8005158:	4642      	mov	r2, r8
 800515a:	4620      	mov	r0, r4
 800515c:	f000 fb66 	bl	800582c <__lshift>
 8005160:	4607      	mov	r7, r0
 8005162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005164:	b353      	cbz	r3, 80051bc <_dtoa_r+0x8c4>
 8005166:	4639      	mov	r1, r7
 8005168:	9804      	ldr	r0, [sp, #16]
 800516a:	f000 fbb3 	bl	80058d4 <__mcmp>
 800516e:	2800      	cmp	r0, #0
 8005170:	da24      	bge.n	80051bc <_dtoa_r+0x8c4>
 8005172:	2300      	movs	r3, #0
 8005174:	220a      	movs	r2, #10
 8005176:	9904      	ldr	r1, [sp, #16]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 f9e1 	bl	8005540 <__multadd>
 800517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005180:	9004      	str	r0, [sp, #16]
 8005182:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 814d 	beq.w	8005426 <_dtoa_r+0xb2e>
 800518c:	2300      	movs	r3, #0
 800518e:	4631      	mov	r1, r6
 8005190:	220a      	movs	r2, #10
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f9d4 	bl	8005540 <__multadd>
 8005198:	9b02      	ldr	r3, [sp, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	4606      	mov	r6, r0
 800519e:	dc4f      	bgt.n	8005240 <_dtoa_r+0x948>
 80051a0:	9b06      	ldr	r3, [sp, #24]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	dd4c      	ble.n	8005240 <_dtoa_r+0x948>
 80051a6:	e011      	b.n	80051cc <_dtoa_r+0x8d4>
 80051a8:	d0c9      	beq.n	800513e <_dtoa_r+0x846>
 80051aa:	9a05      	ldr	r2, [sp, #20]
 80051ac:	331c      	adds	r3, #28
 80051ae:	441a      	add	r2, r3
 80051b0:	9205      	str	r2, [sp, #20]
 80051b2:	441d      	add	r5, r3
 80051b4:	4498      	add	r8, r3
 80051b6:	e7c2      	b.n	800513e <_dtoa_r+0x846>
 80051b8:	4603      	mov	r3, r0
 80051ba:	e7f6      	b.n	80051aa <_dtoa_r+0x8b2>
 80051bc:	f1b9 0f00 	cmp.w	r9, #0
 80051c0:	dc38      	bgt.n	8005234 <_dtoa_r+0x93c>
 80051c2:	9b06      	ldr	r3, [sp, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	dd35      	ble.n	8005234 <_dtoa_r+0x93c>
 80051c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80051cc:	9b02      	ldr	r3, [sp, #8]
 80051ce:	b963      	cbnz	r3, 80051ea <_dtoa_r+0x8f2>
 80051d0:	4639      	mov	r1, r7
 80051d2:	2205      	movs	r2, #5
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f9b3 	bl	8005540 <__multadd>
 80051da:	4601      	mov	r1, r0
 80051dc:	4607      	mov	r7, r0
 80051de:	9804      	ldr	r0, [sp, #16]
 80051e0:	f000 fb78 	bl	80058d4 <__mcmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f73f adcc 	bgt.w	8004d82 <_dtoa_r+0x48a>
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	465d      	mov	r5, fp
 80051ee:	ea6f 0a03 	mvn.w	sl, r3
 80051f2:	f04f 0900 	mov.w	r9, #0
 80051f6:	4639      	mov	r1, r7
 80051f8:	4620      	mov	r0, r4
 80051fa:	f000 f98a 	bl	8005512 <_Bfree>
 80051fe:	2e00      	cmp	r6, #0
 8005200:	f43f aeb7 	beq.w	8004f72 <_dtoa_r+0x67a>
 8005204:	f1b9 0f00 	cmp.w	r9, #0
 8005208:	d005      	beq.n	8005216 <_dtoa_r+0x91e>
 800520a:	45b1      	cmp	r9, r6
 800520c:	d003      	beq.n	8005216 <_dtoa_r+0x91e>
 800520e:	4649      	mov	r1, r9
 8005210:	4620      	mov	r0, r4
 8005212:	f000 f97e 	bl	8005512 <_Bfree>
 8005216:	4631      	mov	r1, r6
 8005218:	4620      	mov	r0, r4
 800521a:	f000 f97a 	bl	8005512 <_Bfree>
 800521e:	e6a8      	b.n	8004f72 <_dtoa_r+0x67a>
 8005220:	2700      	movs	r7, #0
 8005222:	463e      	mov	r6, r7
 8005224:	e7e1      	b.n	80051ea <_dtoa_r+0x8f2>
 8005226:	f8dd a020 	ldr.w	sl, [sp, #32]
 800522a:	463e      	mov	r6, r7
 800522c:	e5a9      	b.n	8004d82 <_dtoa_r+0x48a>
 800522e:	bf00      	nop
 8005230:	40240000 	.word	0x40240000
 8005234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005236:	f8cd 9008 	str.w	r9, [sp, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80fa 	beq.w	8005434 <_dtoa_r+0xb3c>
 8005240:	2d00      	cmp	r5, #0
 8005242:	dd05      	ble.n	8005250 <_dtoa_r+0x958>
 8005244:	4631      	mov	r1, r6
 8005246:	462a      	mov	r2, r5
 8005248:	4620      	mov	r0, r4
 800524a:	f000 faef 	bl	800582c <__lshift>
 800524e:	4606      	mov	r6, r0
 8005250:	9b07      	ldr	r3, [sp, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d04c      	beq.n	80052f0 <_dtoa_r+0x9f8>
 8005256:	6871      	ldr	r1, [r6, #4]
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f926 	bl	80054aa <_Balloc>
 800525e:	6932      	ldr	r2, [r6, #16]
 8005260:	3202      	adds	r2, #2
 8005262:	4605      	mov	r5, r0
 8005264:	0092      	lsls	r2, r2, #2
 8005266:	f106 010c 	add.w	r1, r6, #12
 800526a:	300c      	adds	r0, #12
 800526c:	f000 f912 	bl	8005494 <memcpy>
 8005270:	2201      	movs	r2, #1
 8005272:	4629      	mov	r1, r5
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fad9 	bl	800582c <__lshift>
 800527a:	9b00      	ldr	r3, [sp, #0]
 800527c:	f8cd b014 	str.w	fp, [sp, #20]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	46b1      	mov	r9, r6
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	4606      	mov	r6, r0
 800528a:	4639      	mov	r1, r7
 800528c:	9804      	ldr	r0, [sp, #16]
 800528e:	f7ff faa5 	bl	80047dc <quorem>
 8005292:	4649      	mov	r1, r9
 8005294:	4605      	mov	r5, r0
 8005296:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800529a:	9804      	ldr	r0, [sp, #16]
 800529c:	f000 fb1a 	bl	80058d4 <__mcmp>
 80052a0:	4632      	mov	r2, r6
 80052a2:	9000      	str	r0, [sp, #0]
 80052a4:	4639      	mov	r1, r7
 80052a6:	4620      	mov	r0, r4
 80052a8:	f000 fb2e 	bl	8005908 <__mdiff>
 80052ac:	68c3      	ldr	r3, [r0, #12]
 80052ae:	4602      	mov	r2, r0
 80052b0:	bb03      	cbnz	r3, 80052f4 <_dtoa_r+0x9fc>
 80052b2:	4601      	mov	r1, r0
 80052b4:	9008      	str	r0, [sp, #32]
 80052b6:	9804      	ldr	r0, [sp, #16]
 80052b8:	f000 fb0c 	bl	80058d4 <__mcmp>
 80052bc:	9a08      	ldr	r2, [sp, #32]
 80052be:	4603      	mov	r3, r0
 80052c0:	4611      	mov	r1, r2
 80052c2:	4620      	mov	r0, r4
 80052c4:	9308      	str	r3, [sp, #32]
 80052c6:	f000 f924 	bl	8005512 <_Bfree>
 80052ca:	9b08      	ldr	r3, [sp, #32]
 80052cc:	b9a3      	cbnz	r3, 80052f8 <_dtoa_r+0xa00>
 80052ce:	9a06      	ldr	r2, [sp, #24]
 80052d0:	b992      	cbnz	r2, 80052f8 <_dtoa_r+0xa00>
 80052d2:	9a07      	ldr	r2, [sp, #28]
 80052d4:	b982      	cbnz	r2, 80052f8 <_dtoa_r+0xa00>
 80052d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80052da:	d029      	beq.n	8005330 <_dtoa_r+0xa38>
 80052dc:	9b00      	ldr	r3, [sp, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dd01      	ble.n	80052e6 <_dtoa_r+0x9ee>
 80052e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80052e6:	9b05      	ldr	r3, [sp, #20]
 80052e8:	1c5d      	adds	r5, r3, #1
 80052ea:	f883 8000 	strb.w	r8, [r3]
 80052ee:	e782      	b.n	80051f6 <_dtoa_r+0x8fe>
 80052f0:	4630      	mov	r0, r6
 80052f2:	e7c2      	b.n	800527a <_dtoa_r+0x982>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7e3      	b.n	80052c0 <_dtoa_r+0x9c8>
 80052f8:	9a00      	ldr	r2, [sp, #0]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	db04      	blt.n	8005308 <_dtoa_r+0xa10>
 80052fe:	d125      	bne.n	800534c <_dtoa_r+0xa54>
 8005300:	9a06      	ldr	r2, [sp, #24]
 8005302:	bb1a      	cbnz	r2, 800534c <_dtoa_r+0xa54>
 8005304:	9a07      	ldr	r2, [sp, #28]
 8005306:	bb0a      	cbnz	r2, 800534c <_dtoa_r+0xa54>
 8005308:	2b00      	cmp	r3, #0
 800530a:	ddec      	ble.n	80052e6 <_dtoa_r+0x9ee>
 800530c:	2201      	movs	r2, #1
 800530e:	9904      	ldr	r1, [sp, #16]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fa8b 	bl	800582c <__lshift>
 8005316:	4639      	mov	r1, r7
 8005318:	9004      	str	r0, [sp, #16]
 800531a:	f000 fadb 	bl	80058d4 <__mcmp>
 800531e:	2800      	cmp	r0, #0
 8005320:	dc03      	bgt.n	800532a <_dtoa_r+0xa32>
 8005322:	d1e0      	bne.n	80052e6 <_dtoa_r+0x9ee>
 8005324:	f018 0f01 	tst.w	r8, #1
 8005328:	d0dd      	beq.n	80052e6 <_dtoa_r+0x9ee>
 800532a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800532e:	d1d8      	bne.n	80052e2 <_dtoa_r+0x9ea>
 8005330:	9b05      	ldr	r3, [sp, #20]
 8005332:	9a05      	ldr	r2, [sp, #20]
 8005334:	1c5d      	adds	r5, r3, #1
 8005336:	2339      	movs	r3, #57	; 0x39
 8005338:	7013      	strb	r3, [r2, #0]
 800533a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800533e:	2b39      	cmp	r3, #57	; 0x39
 8005340:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005344:	d04f      	beq.n	80053e6 <_dtoa_r+0xaee>
 8005346:	3301      	adds	r3, #1
 8005348:	7013      	strb	r3, [r2, #0]
 800534a:	e754      	b.n	80051f6 <_dtoa_r+0x8fe>
 800534c:	9a05      	ldr	r2, [sp, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f102 0501 	add.w	r5, r2, #1
 8005354:	dd06      	ble.n	8005364 <_dtoa_r+0xa6c>
 8005356:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800535a:	d0e9      	beq.n	8005330 <_dtoa_r+0xa38>
 800535c:	f108 0801 	add.w	r8, r8, #1
 8005360:	9b05      	ldr	r3, [sp, #20]
 8005362:	e7c2      	b.n	80052ea <_dtoa_r+0x9f2>
 8005364:	9a02      	ldr	r2, [sp, #8]
 8005366:	f805 8c01 	strb.w	r8, [r5, #-1]
 800536a:	eba5 030b 	sub.w	r3, r5, fp
 800536e:	4293      	cmp	r3, r2
 8005370:	d021      	beq.n	80053b6 <_dtoa_r+0xabe>
 8005372:	2300      	movs	r3, #0
 8005374:	220a      	movs	r2, #10
 8005376:	9904      	ldr	r1, [sp, #16]
 8005378:	4620      	mov	r0, r4
 800537a:	f000 f8e1 	bl	8005540 <__multadd>
 800537e:	45b1      	cmp	r9, r6
 8005380:	9004      	str	r0, [sp, #16]
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	f04f 020a 	mov.w	r2, #10
 800538a:	4649      	mov	r1, r9
 800538c:	4620      	mov	r0, r4
 800538e:	d105      	bne.n	800539c <_dtoa_r+0xaa4>
 8005390:	f000 f8d6 	bl	8005540 <__multadd>
 8005394:	4681      	mov	r9, r0
 8005396:	4606      	mov	r6, r0
 8005398:	9505      	str	r5, [sp, #20]
 800539a:	e776      	b.n	800528a <_dtoa_r+0x992>
 800539c:	f000 f8d0 	bl	8005540 <__multadd>
 80053a0:	4631      	mov	r1, r6
 80053a2:	4681      	mov	r9, r0
 80053a4:	2300      	movs	r3, #0
 80053a6:	220a      	movs	r2, #10
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f8c9 	bl	8005540 <__multadd>
 80053ae:	4606      	mov	r6, r0
 80053b0:	e7f2      	b.n	8005398 <_dtoa_r+0xaa0>
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	2201      	movs	r2, #1
 80053b8:	9904      	ldr	r1, [sp, #16]
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fa36 	bl	800582c <__lshift>
 80053c0:	4639      	mov	r1, r7
 80053c2:	9004      	str	r0, [sp, #16]
 80053c4:	f000 fa86 	bl	80058d4 <__mcmp>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	dcb6      	bgt.n	800533a <_dtoa_r+0xa42>
 80053cc:	d102      	bne.n	80053d4 <_dtoa_r+0xadc>
 80053ce:	f018 0f01 	tst.w	r8, #1
 80053d2:	d1b2      	bne.n	800533a <_dtoa_r+0xa42>
 80053d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80053de:	f47f af0a 	bne.w	80051f6 <_dtoa_r+0x8fe>
 80053e2:	4615      	mov	r5, r2
 80053e4:	e7f6      	b.n	80053d4 <_dtoa_r+0xadc>
 80053e6:	4593      	cmp	fp, r2
 80053e8:	d105      	bne.n	80053f6 <_dtoa_r+0xafe>
 80053ea:	2331      	movs	r3, #49	; 0x31
 80053ec:	f10a 0a01 	add.w	sl, sl, #1
 80053f0:	f88b 3000 	strb.w	r3, [fp]
 80053f4:	e6ff      	b.n	80051f6 <_dtoa_r+0x8fe>
 80053f6:	4615      	mov	r5, r2
 80053f8:	e79f      	b.n	800533a <_dtoa_r+0xa42>
 80053fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005460 <_dtoa_r+0xb68>
 80053fe:	e007      	b.n	8005410 <_dtoa_r+0xb18>
 8005400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005402:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005464 <_dtoa_r+0xb6c>
 8005406:	b11b      	cbz	r3, 8005410 <_dtoa_r+0xb18>
 8005408:	f10b 0308 	add.w	r3, fp, #8
 800540c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4658      	mov	r0, fp
 8005412:	b017      	add	sp, #92	; 0x5c
 8005414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005418:	9b06      	ldr	r3, [sp, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	f77f ae35 	ble.w	800508a <_dtoa_r+0x792>
 8005420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005422:	9307      	str	r3, [sp, #28]
 8005424:	e649      	b.n	80050ba <_dtoa_r+0x7c2>
 8005426:	9b02      	ldr	r3, [sp, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	dc03      	bgt.n	8005434 <_dtoa_r+0xb3c>
 800542c:	9b06      	ldr	r3, [sp, #24]
 800542e:	2b02      	cmp	r3, #2
 8005430:	f73f aecc 	bgt.w	80051cc <_dtoa_r+0x8d4>
 8005434:	465d      	mov	r5, fp
 8005436:	4639      	mov	r1, r7
 8005438:	9804      	ldr	r0, [sp, #16]
 800543a:	f7ff f9cf 	bl	80047dc <quorem>
 800543e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005442:	f805 8b01 	strb.w	r8, [r5], #1
 8005446:	9a02      	ldr	r2, [sp, #8]
 8005448:	eba5 030b 	sub.w	r3, r5, fp
 800544c:	429a      	cmp	r2, r3
 800544e:	ddb0      	ble.n	80053b2 <_dtoa_r+0xaba>
 8005450:	2300      	movs	r3, #0
 8005452:	220a      	movs	r2, #10
 8005454:	9904      	ldr	r1, [sp, #16]
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f872 	bl	8005540 <__multadd>
 800545c:	9004      	str	r0, [sp, #16]
 800545e:	e7ea      	b.n	8005436 <_dtoa_r+0xb3e>
 8005460:	0800603c 	.word	0x0800603c
 8005464:	08006060 	.word	0x08006060

08005468 <_localeconv_r>:
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <_localeconv_r+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a18      	ldr	r0, [r3, #32]
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <_localeconv_r+0x18>)
 8005470:	2800      	cmp	r0, #0
 8005472:	bf08      	it	eq
 8005474:	4618      	moveq	r0, r3
 8005476:	30f0      	adds	r0, #240	; 0xf0
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c
 8005480:	20000070 	.word	0x20000070

08005484 <malloc>:
 8005484:	4b02      	ldr	r3, [pc, #8]	; (8005490 <malloc+0xc>)
 8005486:	4601      	mov	r1, r0
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	f000 bb45 	b.w	8005b18 <_malloc_r>
 800548e:	bf00      	nop
 8005490:	2000000c 	.word	0x2000000c

08005494 <memcpy>:
 8005494:	b510      	push	{r4, lr}
 8005496:	1e43      	subs	r3, r0, #1
 8005498:	440a      	add	r2, r1
 800549a:	4291      	cmp	r1, r2
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	bd10      	pop	{r4, pc}
 80054a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a8:	e7f7      	b.n	800549a <memcpy+0x6>

080054aa <_Balloc>:
 80054aa:	b570      	push	{r4, r5, r6, lr}
 80054ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054ae:	4604      	mov	r4, r0
 80054b0:	460e      	mov	r6, r1
 80054b2:	b93d      	cbnz	r5, 80054c4 <_Balloc+0x1a>
 80054b4:	2010      	movs	r0, #16
 80054b6:	f7ff ffe5 	bl	8005484 <malloc>
 80054ba:	6260      	str	r0, [r4, #36]	; 0x24
 80054bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054c0:	6005      	str	r5, [r0, #0]
 80054c2:	60c5      	str	r5, [r0, #12]
 80054c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054c6:	68eb      	ldr	r3, [r5, #12]
 80054c8:	b183      	cbz	r3, 80054ec <_Balloc+0x42>
 80054ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80054d2:	b9b8      	cbnz	r0, 8005504 <_Balloc+0x5a>
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f506 	lsl.w	r5, r1, r6
 80054da:	1d6a      	adds	r2, r5, #5
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	4620      	mov	r0, r4
 80054e0:	f000 fabe 	bl	8005a60 <_calloc_r>
 80054e4:	b160      	cbz	r0, 8005500 <_Balloc+0x56>
 80054e6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80054ea:	e00e      	b.n	800550a <_Balloc+0x60>
 80054ec:	2221      	movs	r2, #33	; 0x21
 80054ee:	2104      	movs	r1, #4
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fab5 	bl	8005a60 <_calloc_r>
 80054f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f8:	60e8      	str	r0, [r5, #12]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e4      	bne.n	80054ca <_Balloc+0x20>
 8005500:	2000      	movs	r0, #0
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	6802      	ldr	r2, [r0, #0]
 8005506:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800550a:	2300      	movs	r3, #0
 800550c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005510:	e7f7      	b.n	8005502 <_Balloc+0x58>

08005512 <_Bfree>:
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005516:	4606      	mov	r6, r0
 8005518:	460d      	mov	r5, r1
 800551a:	b93c      	cbnz	r4, 800552c <_Bfree+0x1a>
 800551c:	2010      	movs	r0, #16
 800551e:	f7ff ffb1 	bl	8005484 <malloc>
 8005522:	6270      	str	r0, [r6, #36]	; 0x24
 8005524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005528:	6004      	str	r4, [r0, #0]
 800552a:	60c4      	str	r4, [r0, #12]
 800552c:	b13d      	cbz	r5, 800553e <_Bfree+0x2c>
 800552e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005530:	686a      	ldr	r2, [r5, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005538:	6029      	str	r1, [r5, #0]
 800553a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800553e:	bd70      	pop	{r4, r5, r6, pc}

08005540 <__multadd>:
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	690d      	ldr	r5, [r1, #16]
 8005546:	461f      	mov	r7, r3
 8005548:	4606      	mov	r6, r0
 800554a:	460c      	mov	r4, r1
 800554c:	f101 0c14 	add.w	ip, r1, #20
 8005550:	2300      	movs	r3, #0
 8005552:	f8dc 0000 	ldr.w	r0, [ip]
 8005556:	b281      	uxth	r1, r0
 8005558:	fb02 7101 	mla	r1, r2, r1, r7
 800555c:	0c0f      	lsrs	r7, r1, #16
 800555e:	0c00      	lsrs	r0, r0, #16
 8005560:	fb02 7000 	mla	r0, r2, r0, r7
 8005564:	b289      	uxth	r1, r1
 8005566:	3301      	adds	r3, #1
 8005568:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800556c:	429d      	cmp	r5, r3
 800556e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005572:	f84c 1b04 	str.w	r1, [ip], #4
 8005576:	dcec      	bgt.n	8005552 <__multadd+0x12>
 8005578:	b1d7      	cbz	r7, 80055b0 <__multadd+0x70>
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	42ab      	cmp	r3, r5
 800557e:	dc12      	bgt.n	80055a6 <__multadd+0x66>
 8005580:	6861      	ldr	r1, [r4, #4]
 8005582:	4630      	mov	r0, r6
 8005584:	3101      	adds	r1, #1
 8005586:	f7ff ff90 	bl	80054aa <_Balloc>
 800558a:	6922      	ldr	r2, [r4, #16]
 800558c:	3202      	adds	r2, #2
 800558e:	f104 010c 	add.w	r1, r4, #12
 8005592:	4680      	mov	r8, r0
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	300c      	adds	r0, #12
 8005598:	f7ff ff7c 	bl	8005494 <memcpy>
 800559c:	4621      	mov	r1, r4
 800559e:	4630      	mov	r0, r6
 80055a0:	f7ff ffb7 	bl	8005512 <_Bfree>
 80055a4:	4644      	mov	r4, r8
 80055a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055aa:	3501      	adds	r5, #1
 80055ac:	615f      	str	r7, [r3, #20]
 80055ae:	6125      	str	r5, [r4, #16]
 80055b0:	4620      	mov	r0, r4
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055b6 <__hi0bits>:
 80055b6:	0c02      	lsrs	r2, r0, #16
 80055b8:	0412      	lsls	r2, r2, #16
 80055ba:	4603      	mov	r3, r0
 80055bc:	b9b2      	cbnz	r2, 80055ec <__hi0bits+0x36>
 80055be:	0403      	lsls	r3, r0, #16
 80055c0:	2010      	movs	r0, #16
 80055c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055c6:	bf04      	itt	eq
 80055c8:	021b      	lsleq	r3, r3, #8
 80055ca:	3008      	addeq	r0, #8
 80055cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055d0:	bf04      	itt	eq
 80055d2:	011b      	lsleq	r3, r3, #4
 80055d4:	3004      	addeq	r0, #4
 80055d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80055da:	bf04      	itt	eq
 80055dc:	009b      	lsleq	r3, r3, #2
 80055de:	3002      	addeq	r0, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db06      	blt.n	80055f2 <__hi0bits+0x3c>
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	d503      	bpl.n	80055f0 <__hi0bits+0x3a>
 80055e8:	3001      	adds	r0, #1
 80055ea:	4770      	bx	lr
 80055ec:	2000      	movs	r0, #0
 80055ee:	e7e8      	b.n	80055c2 <__hi0bits+0xc>
 80055f0:	2020      	movs	r0, #32
 80055f2:	4770      	bx	lr

080055f4 <__lo0bits>:
 80055f4:	6803      	ldr	r3, [r0, #0]
 80055f6:	f013 0207 	ands.w	r2, r3, #7
 80055fa:	4601      	mov	r1, r0
 80055fc:	d00b      	beq.n	8005616 <__lo0bits+0x22>
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d423      	bmi.n	800564a <__lo0bits+0x56>
 8005602:	0798      	lsls	r0, r3, #30
 8005604:	bf49      	itett	mi
 8005606:	085b      	lsrmi	r3, r3, #1
 8005608:	089b      	lsrpl	r3, r3, #2
 800560a:	2001      	movmi	r0, #1
 800560c:	600b      	strmi	r3, [r1, #0]
 800560e:	bf5c      	itt	pl
 8005610:	600b      	strpl	r3, [r1, #0]
 8005612:	2002      	movpl	r0, #2
 8005614:	4770      	bx	lr
 8005616:	b298      	uxth	r0, r3
 8005618:	b9a8      	cbnz	r0, 8005646 <__lo0bits+0x52>
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	2010      	movs	r0, #16
 800561e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005622:	bf04      	itt	eq
 8005624:	0a1b      	lsreq	r3, r3, #8
 8005626:	3008      	addeq	r0, #8
 8005628:	071a      	lsls	r2, r3, #28
 800562a:	bf04      	itt	eq
 800562c:	091b      	lsreq	r3, r3, #4
 800562e:	3004      	addeq	r0, #4
 8005630:	079a      	lsls	r2, r3, #30
 8005632:	bf04      	itt	eq
 8005634:	089b      	lsreq	r3, r3, #2
 8005636:	3002      	addeq	r0, #2
 8005638:	07da      	lsls	r2, r3, #31
 800563a:	d402      	bmi.n	8005642 <__lo0bits+0x4e>
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	d006      	beq.n	800564e <__lo0bits+0x5a>
 8005640:	3001      	adds	r0, #1
 8005642:	600b      	str	r3, [r1, #0]
 8005644:	4770      	bx	lr
 8005646:	4610      	mov	r0, r2
 8005648:	e7e9      	b.n	800561e <__lo0bits+0x2a>
 800564a:	2000      	movs	r0, #0
 800564c:	4770      	bx	lr
 800564e:	2020      	movs	r0, #32
 8005650:	4770      	bx	lr

08005652 <__i2b>:
 8005652:	b510      	push	{r4, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	2101      	movs	r1, #1
 8005658:	f7ff ff27 	bl	80054aa <_Balloc>
 800565c:	2201      	movs	r2, #1
 800565e:	6144      	str	r4, [r0, #20]
 8005660:	6102      	str	r2, [r0, #16]
 8005662:	bd10      	pop	{r4, pc}

08005664 <__multiply>:
 8005664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005668:	4614      	mov	r4, r2
 800566a:	690a      	ldr	r2, [r1, #16]
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	bfb8      	it	lt
 8005672:	460b      	movlt	r3, r1
 8005674:	4688      	mov	r8, r1
 8005676:	bfbc      	itt	lt
 8005678:	46a0      	movlt	r8, r4
 800567a:	461c      	movlt	r4, r3
 800567c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005680:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005684:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005688:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800568c:	eb07 0609 	add.w	r6, r7, r9
 8005690:	42b3      	cmp	r3, r6
 8005692:	bfb8      	it	lt
 8005694:	3101      	addlt	r1, #1
 8005696:	f7ff ff08 	bl	80054aa <_Balloc>
 800569a:	f100 0514 	add.w	r5, r0, #20
 800569e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80056a2:	462b      	mov	r3, r5
 80056a4:	2200      	movs	r2, #0
 80056a6:	4573      	cmp	r3, lr
 80056a8:	d316      	bcc.n	80056d8 <__multiply+0x74>
 80056aa:	f104 0214 	add.w	r2, r4, #20
 80056ae:	f108 0114 	add.w	r1, r8, #20
 80056b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80056b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	9201      	str	r2, [sp, #4]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d80c      	bhi.n	80056de <__multiply+0x7a>
 80056c4:	2e00      	cmp	r6, #0
 80056c6:	dd03      	ble.n	80056d0 <__multiply+0x6c>
 80056c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d05d      	beq.n	800578c <__multiply+0x128>
 80056d0:	6106      	str	r6, [r0, #16]
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	f843 2b04 	str.w	r2, [r3], #4
 80056dc:	e7e3      	b.n	80056a6 <__multiply+0x42>
 80056de:	f8b2 b000 	ldrh.w	fp, [r2]
 80056e2:	f1bb 0f00 	cmp.w	fp, #0
 80056e6:	d023      	beq.n	8005730 <__multiply+0xcc>
 80056e8:	4689      	mov	r9, r1
 80056ea:	46ac      	mov	ip, r5
 80056ec:	f04f 0800 	mov.w	r8, #0
 80056f0:	f859 4b04 	ldr.w	r4, [r9], #4
 80056f4:	f8dc a000 	ldr.w	sl, [ip]
 80056f8:	b2a3      	uxth	r3, r4
 80056fa:	fa1f fa8a 	uxth.w	sl, sl
 80056fe:	fb0b a303 	mla	r3, fp, r3, sl
 8005702:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005706:	f8dc 4000 	ldr.w	r4, [ip]
 800570a:	4443      	add	r3, r8
 800570c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005710:	fb0b 840a 	mla	r4, fp, sl, r8
 8005714:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005718:	46e2      	mov	sl, ip
 800571a:	b29b      	uxth	r3, r3
 800571c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005720:	454f      	cmp	r7, r9
 8005722:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005726:	f84a 3b04 	str.w	r3, [sl], #4
 800572a:	d82b      	bhi.n	8005784 <__multiply+0x120>
 800572c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005736:	3204      	adds	r2, #4
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	d020      	beq.n	8005780 <__multiply+0x11c>
 800573e:	682b      	ldr	r3, [r5, #0]
 8005740:	4689      	mov	r9, r1
 8005742:	46a8      	mov	r8, r5
 8005744:	f04f 0b00 	mov.w	fp, #0
 8005748:	f8b9 c000 	ldrh.w	ip, [r9]
 800574c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005750:	fb0a 440c 	mla	r4, sl, ip, r4
 8005754:	445c      	add	r4, fp
 8005756:	46c4      	mov	ip, r8
 8005758:	b29b      	uxth	r3, r3
 800575a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800575e:	f84c 3b04 	str.w	r3, [ip], #4
 8005762:	f859 3b04 	ldr.w	r3, [r9], #4
 8005766:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	fb0a b303 	mla	r3, sl, r3, fp
 8005770:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005774:	454f      	cmp	r7, r9
 8005776:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800577a:	d805      	bhi.n	8005788 <__multiply+0x124>
 800577c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005780:	3504      	adds	r5, #4
 8005782:	e79b      	b.n	80056bc <__multiply+0x58>
 8005784:	46d4      	mov	ip, sl
 8005786:	e7b3      	b.n	80056f0 <__multiply+0x8c>
 8005788:	46e0      	mov	r8, ip
 800578a:	e7dd      	b.n	8005748 <__multiply+0xe4>
 800578c:	3e01      	subs	r6, #1
 800578e:	e799      	b.n	80056c4 <__multiply+0x60>

08005790 <__pow5mult>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	4615      	mov	r5, r2
 8005796:	f012 0203 	ands.w	r2, r2, #3
 800579a:	4606      	mov	r6, r0
 800579c:	460f      	mov	r7, r1
 800579e:	d007      	beq.n	80057b0 <__pow5mult+0x20>
 80057a0:	3a01      	subs	r2, #1
 80057a2:	4c21      	ldr	r4, [pc, #132]	; (8005828 <__pow5mult+0x98>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057aa:	f7ff fec9 	bl	8005540 <__multadd>
 80057ae:	4607      	mov	r7, r0
 80057b0:	10ad      	asrs	r5, r5, #2
 80057b2:	d035      	beq.n	8005820 <__pow5mult+0x90>
 80057b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057b6:	b93c      	cbnz	r4, 80057c8 <__pow5mult+0x38>
 80057b8:	2010      	movs	r0, #16
 80057ba:	f7ff fe63 	bl	8005484 <malloc>
 80057be:	6270      	str	r0, [r6, #36]	; 0x24
 80057c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057c4:	6004      	str	r4, [r0, #0]
 80057c6:	60c4      	str	r4, [r0, #12]
 80057c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057d0:	b94c      	cbnz	r4, 80057e6 <__pow5mult+0x56>
 80057d2:	f240 2171 	movw	r1, #625	; 0x271
 80057d6:	4630      	mov	r0, r6
 80057d8:	f7ff ff3b 	bl	8005652 <__i2b>
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c8 0008 	str.w	r0, [r8, #8]
 80057e2:	4604      	mov	r4, r0
 80057e4:	6003      	str	r3, [r0, #0]
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	07eb      	lsls	r3, r5, #31
 80057ec:	d50a      	bpl.n	8005804 <__pow5mult+0x74>
 80057ee:	4639      	mov	r1, r7
 80057f0:	4622      	mov	r2, r4
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff ff36 	bl	8005664 <__multiply>
 80057f8:	4639      	mov	r1, r7
 80057fa:	4681      	mov	r9, r0
 80057fc:	4630      	mov	r0, r6
 80057fe:	f7ff fe88 	bl	8005512 <_Bfree>
 8005802:	464f      	mov	r7, r9
 8005804:	106d      	asrs	r5, r5, #1
 8005806:	d00b      	beq.n	8005820 <__pow5mult+0x90>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	b938      	cbnz	r0, 800581c <__pow5mult+0x8c>
 800580c:	4622      	mov	r2, r4
 800580e:	4621      	mov	r1, r4
 8005810:	4630      	mov	r0, r6
 8005812:	f7ff ff27 	bl	8005664 <__multiply>
 8005816:	6020      	str	r0, [r4, #0]
 8005818:	f8c0 8000 	str.w	r8, [r0]
 800581c:	4604      	mov	r4, r0
 800581e:	e7e4      	b.n	80057ea <__pow5mult+0x5a>
 8005820:	4638      	mov	r0, r7
 8005822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005826:	bf00      	nop
 8005828:	08006160 	.word	0x08006160

0800582c <__lshift>:
 800582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	460c      	mov	r4, r1
 8005832:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6849      	ldr	r1, [r1, #4]
 800583a:	eb0a 0903 	add.w	r9, sl, r3
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	4607      	mov	r7, r0
 8005842:	4616      	mov	r6, r2
 8005844:	f109 0501 	add.w	r5, r9, #1
 8005848:	42ab      	cmp	r3, r5
 800584a:	db32      	blt.n	80058b2 <__lshift+0x86>
 800584c:	4638      	mov	r0, r7
 800584e:	f7ff fe2c 	bl	80054aa <_Balloc>
 8005852:	2300      	movs	r3, #0
 8005854:	4680      	mov	r8, r0
 8005856:	f100 0114 	add.w	r1, r0, #20
 800585a:	461a      	mov	r2, r3
 800585c:	4553      	cmp	r3, sl
 800585e:	db2b      	blt.n	80058b8 <__lshift+0x8c>
 8005860:	6920      	ldr	r0, [r4, #16]
 8005862:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005866:	f104 0314 	add.w	r3, r4, #20
 800586a:	f016 021f 	ands.w	r2, r6, #31
 800586e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005872:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005876:	d025      	beq.n	80058c4 <__lshift+0x98>
 8005878:	f1c2 0e20 	rsb	lr, r2, #32
 800587c:	2000      	movs	r0, #0
 800587e:	681e      	ldr	r6, [r3, #0]
 8005880:	468a      	mov	sl, r1
 8005882:	4096      	lsls	r6, r2
 8005884:	4330      	orrs	r0, r6
 8005886:	f84a 0b04 	str.w	r0, [sl], #4
 800588a:	f853 0b04 	ldr.w	r0, [r3], #4
 800588e:	459c      	cmp	ip, r3
 8005890:	fa20 f00e 	lsr.w	r0, r0, lr
 8005894:	d814      	bhi.n	80058c0 <__lshift+0x94>
 8005896:	6048      	str	r0, [r1, #4]
 8005898:	b108      	cbz	r0, 800589e <__lshift+0x72>
 800589a:	f109 0502 	add.w	r5, r9, #2
 800589e:	3d01      	subs	r5, #1
 80058a0:	4638      	mov	r0, r7
 80058a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80058a6:	4621      	mov	r1, r4
 80058a8:	f7ff fe33 	bl	8005512 <_Bfree>
 80058ac:	4640      	mov	r0, r8
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	3101      	adds	r1, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	e7c7      	b.n	8005848 <__lshift+0x1c>
 80058b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058bc:	3301      	adds	r3, #1
 80058be:	e7cd      	b.n	800585c <__lshift+0x30>
 80058c0:	4651      	mov	r1, sl
 80058c2:	e7dc      	b.n	800587e <__lshift+0x52>
 80058c4:	3904      	subs	r1, #4
 80058c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ca:	f841 2f04 	str.w	r2, [r1, #4]!
 80058ce:	459c      	cmp	ip, r3
 80058d0:	d8f9      	bhi.n	80058c6 <__lshift+0x9a>
 80058d2:	e7e4      	b.n	800589e <__lshift+0x72>

080058d4 <__mcmp>:
 80058d4:	6903      	ldr	r3, [r0, #16]
 80058d6:	690a      	ldr	r2, [r1, #16]
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	b530      	push	{r4, r5, lr}
 80058dc:	d10c      	bne.n	80058f8 <__mcmp+0x24>
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	3014      	adds	r0, #20
 80058e2:	3114      	adds	r1, #20
 80058e4:	1884      	adds	r4, r0, r2
 80058e6:	4411      	add	r1, r2
 80058e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058f0:	4295      	cmp	r5, r2
 80058f2:	d003      	beq.n	80058fc <__mcmp+0x28>
 80058f4:	d305      	bcc.n	8005902 <__mcmp+0x2e>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd30      	pop	{r4, r5, pc}
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d3f3      	bcc.n	80058e8 <__mcmp+0x14>
 8005900:	e7fa      	b.n	80058f8 <__mcmp+0x24>
 8005902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005906:	e7f7      	b.n	80058f8 <__mcmp+0x24>

08005908 <__mdiff>:
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	460d      	mov	r5, r1
 800590e:	4607      	mov	r7, r0
 8005910:	4611      	mov	r1, r2
 8005912:	4628      	mov	r0, r5
 8005914:	4614      	mov	r4, r2
 8005916:	f7ff ffdd 	bl	80058d4 <__mcmp>
 800591a:	1e06      	subs	r6, r0, #0
 800591c:	d108      	bne.n	8005930 <__mdiff+0x28>
 800591e:	4631      	mov	r1, r6
 8005920:	4638      	mov	r0, r7
 8005922:	f7ff fdc2 	bl	80054aa <_Balloc>
 8005926:	2301      	movs	r3, #1
 8005928:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800592c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005930:	bfa4      	itt	ge
 8005932:	4623      	movge	r3, r4
 8005934:	462c      	movge	r4, r5
 8005936:	4638      	mov	r0, r7
 8005938:	6861      	ldr	r1, [r4, #4]
 800593a:	bfa6      	itte	ge
 800593c:	461d      	movge	r5, r3
 800593e:	2600      	movge	r6, #0
 8005940:	2601      	movlt	r6, #1
 8005942:	f7ff fdb2 	bl	80054aa <_Balloc>
 8005946:	692b      	ldr	r3, [r5, #16]
 8005948:	60c6      	str	r6, [r0, #12]
 800594a:	6926      	ldr	r6, [r4, #16]
 800594c:	f105 0914 	add.w	r9, r5, #20
 8005950:	f104 0214 	add.w	r2, r4, #20
 8005954:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005958:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800595c:	f100 0514 	add.w	r5, r0, #20
 8005960:	f04f 0e00 	mov.w	lr, #0
 8005964:	f852 ab04 	ldr.w	sl, [r2], #4
 8005968:	f859 4b04 	ldr.w	r4, [r9], #4
 800596c:	fa1e f18a 	uxtah	r1, lr, sl
 8005970:	b2a3      	uxth	r3, r4
 8005972:	1ac9      	subs	r1, r1, r3
 8005974:	0c23      	lsrs	r3, r4, #16
 8005976:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800597a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800597e:	b289      	uxth	r1, r1
 8005980:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005984:	45c8      	cmp	r8, r9
 8005986:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800598a:	4694      	mov	ip, r2
 800598c:	f845 3b04 	str.w	r3, [r5], #4
 8005990:	d8e8      	bhi.n	8005964 <__mdiff+0x5c>
 8005992:	45bc      	cmp	ip, r7
 8005994:	d304      	bcc.n	80059a0 <__mdiff+0x98>
 8005996:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800599a:	b183      	cbz	r3, 80059be <__mdiff+0xb6>
 800599c:	6106      	str	r6, [r0, #16]
 800599e:	e7c5      	b.n	800592c <__mdiff+0x24>
 80059a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80059a4:	fa1e f381 	uxtah	r3, lr, r1
 80059a8:	141a      	asrs	r2, r3, #16
 80059aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80059b8:	f845 3b04 	str.w	r3, [r5], #4
 80059bc:	e7e9      	b.n	8005992 <__mdiff+0x8a>
 80059be:	3e01      	subs	r6, #1
 80059c0:	e7e9      	b.n	8005996 <__mdiff+0x8e>

080059c2 <__d2b>:
 80059c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059c6:	460e      	mov	r6, r1
 80059c8:	2101      	movs	r1, #1
 80059ca:	ec59 8b10 	vmov	r8, r9, d0
 80059ce:	4615      	mov	r5, r2
 80059d0:	f7ff fd6b 	bl	80054aa <_Balloc>
 80059d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80059d8:	4607      	mov	r7, r0
 80059da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059de:	bb34      	cbnz	r4, 8005a2e <__d2b+0x6c>
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	f1b8 0300 	subs.w	r3, r8, #0
 80059e6:	d027      	beq.n	8005a38 <__d2b+0x76>
 80059e8:	a802      	add	r0, sp, #8
 80059ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 80059ee:	f7ff fe01 	bl	80055f4 <__lo0bits>
 80059f2:	9900      	ldr	r1, [sp, #0]
 80059f4:	b1f0      	cbz	r0, 8005a34 <__d2b+0x72>
 80059f6:	9a01      	ldr	r2, [sp, #4]
 80059f8:	f1c0 0320 	rsb	r3, r0, #32
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	430b      	orrs	r3, r1
 8005a02:	40c2      	lsrs	r2, r0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	9201      	str	r2, [sp, #4]
 8005a08:	9b01      	ldr	r3, [sp, #4]
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf14      	ite	ne
 8005a10:	2102      	movne	r1, #2
 8005a12:	2101      	moveq	r1, #1
 8005a14:	6139      	str	r1, [r7, #16]
 8005a16:	b1c4      	cbz	r4, 8005a4a <__d2b+0x88>
 8005a18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a1c:	4404      	add	r4, r0
 8005a1e:	6034      	str	r4, [r6, #0]
 8005a20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a24:	6028      	str	r0, [r5, #0]
 8005a26:	4638      	mov	r0, r7
 8005a28:	b003      	add	sp, #12
 8005a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a32:	e7d5      	b.n	80059e0 <__d2b+0x1e>
 8005a34:	6179      	str	r1, [r7, #20]
 8005a36:	e7e7      	b.n	8005a08 <__d2b+0x46>
 8005a38:	a801      	add	r0, sp, #4
 8005a3a:	f7ff fddb 	bl	80055f4 <__lo0bits>
 8005a3e:	9b01      	ldr	r3, [sp, #4]
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	2101      	movs	r1, #1
 8005a44:	6139      	str	r1, [r7, #16]
 8005a46:	3020      	adds	r0, #32
 8005a48:	e7e5      	b.n	8005a16 <__d2b+0x54>
 8005a4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a52:	6030      	str	r0, [r6, #0]
 8005a54:	6918      	ldr	r0, [r3, #16]
 8005a56:	f7ff fdae 	bl	80055b6 <__hi0bits>
 8005a5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a5e:	e7e1      	b.n	8005a24 <__d2b+0x62>

08005a60 <_calloc_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	fb02 f401 	mul.w	r4, r2, r1
 8005a66:	4621      	mov	r1, r4
 8005a68:	f000 f856 	bl	8005b18 <_malloc_r>
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b118      	cbz	r0, 8005a78 <_calloc_r+0x18>
 8005a70:	4622      	mov	r2, r4
 8005a72:	2100      	movs	r1, #0
 8005a74:	f7fe fa2e 	bl	8003ed4 <memset>
 8005a78:	4628      	mov	r0, r5
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}

08005a7c <_free_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4605      	mov	r5, r0
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d045      	beq.n	8005b10 <_free_r+0x94>
 8005a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a88:	1f0c      	subs	r4, r1, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfb8      	it	lt
 8005a8e:	18e4      	addlt	r4, r4, r3
 8005a90:	f000 fa29 	bl	8005ee6 <__malloc_lock>
 8005a94:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <_free_r+0x98>)
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	4610      	mov	r0, r2
 8005a9a:	b933      	cbnz	r3, 8005aaa <_free_r+0x2e>
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6014      	str	r4, [r2, #0]
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa6:	f000 ba1f 	b.w	8005ee8 <__malloc_unlock>
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	d90c      	bls.n	8005ac8 <_free_r+0x4c>
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	1862      	adds	r2, r4, r1
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bf04      	itt	eq
 8005ab6:	681a      	ldreq	r2, [r3, #0]
 8005ab8:	685b      	ldreq	r3, [r3, #4]
 8005aba:	6063      	str	r3, [r4, #4]
 8005abc:	bf04      	itt	eq
 8005abe:	1852      	addeq	r2, r2, r1
 8005ac0:	6022      	streq	r2, [r4, #0]
 8005ac2:	6004      	str	r4, [r0, #0]
 8005ac4:	e7ec      	b.n	8005aa0 <_free_r+0x24>
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	b10a      	cbz	r2, 8005ad0 <_free_r+0x54>
 8005acc:	42a2      	cmp	r2, r4
 8005ace:	d9fa      	bls.n	8005ac6 <_free_r+0x4a>
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	1858      	adds	r0, r3, r1
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d10b      	bne.n	8005af0 <_free_r+0x74>
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	4401      	add	r1, r0
 8005adc:	1858      	adds	r0, r3, r1
 8005ade:	4282      	cmp	r2, r0
 8005ae0:	6019      	str	r1, [r3, #0]
 8005ae2:	d1dd      	bne.n	8005aa0 <_free_r+0x24>
 8005ae4:	6810      	ldr	r0, [r2, #0]
 8005ae6:	6852      	ldr	r2, [r2, #4]
 8005ae8:	605a      	str	r2, [r3, #4]
 8005aea:	4401      	add	r1, r0
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	e7d7      	b.n	8005aa0 <_free_r+0x24>
 8005af0:	d902      	bls.n	8005af8 <_free_r+0x7c>
 8005af2:	230c      	movs	r3, #12
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	e7d3      	b.n	8005aa0 <_free_r+0x24>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	1821      	adds	r1, r4, r0
 8005afc:	428a      	cmp	r2, r1
 8005afe:	bf04      	itt	eq
 8005b00:	6811      	ldreq	r1, [r2, #0]
 8005b02:	6852      	ldreq	r2, [r2, #4]
 8005b04:	6062      	str	r2, [r4, #4]
 8005b06:	bf04      	itt	eq
 8005b08:	1809      	addeq	r1, r1, r0
 8005b0a:	6021      	streq	r1, [r4, #0]
 8005b0c:	605c      	str	r4, [r3, #4]
 8005b0e:	e7c7      	b.n	8005aa0 <_free_r+0x24>
 8005b10:	bd38      	pop	{r3, r4, r5, pc}
 8005b12:	bf00      	nop
 8005b14:	200001fc 	.word	0x200001fc

08005b18 <_malloc_r>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	1ccd      	adds	r5, r1, #3
 8005b1c:	f025 0503 	bic.w	r5, r5, #3
 8005b20:	3508      	adds	r5, #8
 8005b22:	2d0c      	cmp	r5, #12
 8005b24:	bf38      	it	cc
 8005b26:	250c      	movcc	r5, #12
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	4606      	mov	r6, r0
 8005b2c:	db01      	blt.n	8005b32 <_malloc_r+0x1a>
 8005b2e:	42a9      	cmp	r1, r5
 8005b30:	d903      	bls.n	8005b3a <_malloc_r+0x22>
 8005b32:	230c      	movs	r3, #12
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	2000      	movs	r0, #0
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	f000 f9d4 	bl	8005ee6 <__malloc_lock>
 8005b3e:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <_malloc_r+0xac>)
 8005b40:	6814      	ldr	r4, [r2, #0]
 8005b42:	4621      	mov	r1, r4
 8005b44:	b991      	cbnz	r1, 8005b6c <_malloc_r+0x54>
 8005b46:	4c20      	ldr	r4, [pc, #128]	; (8005bc8 <_malloc_r+0xb0>)
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	b91b      	cbnz	r3, 8005b54 <_malloc_r+0x3c>
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f98f 	bl	8005e70 <_sbrk_r>
 8005b52:	6020      	str	r0, [r4, #0]
 8005b54:	4629      	mov	r1, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	f000 f98a 	bl	8005e70 <_sbrk_r>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d124      	bne.n	8005baa <_malloc_r+0x92>
 8005b60:	230c      	movs	r3, #12
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f9bf 	bl	8005ee8 <__malloc_unlock>
 8005b6a:	e7e4      	b.n	8005b36 <_malloc_r+0x1e>
 8005b6c:	680b      	ldr	r3, [r1, #0]
 8005b6e:	1b5b      	subs	r3, r3, r5
 8005b70:	d418      	bmi.n	8005ba4 <_malloc_r+0x8c>
 8005b72:	2b0b      	cmp	r3, #11
 8005b74:	d90f      	bls.n	8005b96 <_malloc_r+0x7e>
 8005b76:	600b      	str	r3, [r1, #0]
 8005b78:	50cd      	str	r5, [r1, r3]
 8005b7a:	18cc      	adds	r4, r1, r3
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 f9b3 	bl	8005ee8 <__malloc_unlock>
 8005b82:	f104 000b 	add.w	r0, r4, #11
 8005b86:	1d23      	adds	r3, r4, #4
 8005b88:	f020 0007 	bic.w	r0, r0, #7
 8005b8c:	1ac3      	subs	r3, r0, r3
 8005b8e:	d0d3      	beq.n	8005b38 <_malloc_r+0x20>
 8005b90:	425a      	negs	r2, r3
 8005b92:	50e2      	str	r2, [r4, r3]
 8005b94:	e7d0      	b.n	8005b38 <_malloc_r+0x20>
 8005b96:	428c      	cmp	r4, r1
 8005b98:	684b      	ldr	r3, [r1, #4]
 8005b9a:	bf16      	itet	ne
 8005b9c:	6063      	strne	r3, [r4, #4]
 8005b9e:	6013      	streq	r3, [r2, #0]
 8005ba0:	460c      	movne	r4, r1
 8005ba2:	e7eb      	b.n	8005b7c <_malloc_r+0x64>
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	6849      	ldr	r1, [r1, #4]
 8005ba8:	e7cc      	b.n	8005b44 <_malloc_r+0x2c>
 8005baa:	1cc4      	adds	r4, r0, #3
 8005bac:	f024 0403 	bic.w	r4, r4, #3
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d005      	beq.n	8005bc0 <_malloc_r+0xa8>
 8005bb4:	1a21      	subs	r1, r4, r0
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f000 f95a 	bl	8005e70 <_sbrk_r>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d0cf      	beq.n	8005b60 <_malloc_r+0x48>
 8005bc0:	6025      	str	r5, [r4, #0]
 8005bc2:	e7db      	b.n	8005b7c <_malloc_r+0x64>
 8005bc4:	200001fc 	.word	0x200001fc
 8005bc8:	20000200 	.word	0x20000200

08005bcc <__ssputs_r>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	688e      	ldr	r6, [r1, #8]
 8005bd2:	429e      	cmp	r6, r3
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4690      	mov	r8, r2
 8005bda:	4699      	mov	r9, r3
 8005bdc:	d837      	bhi.n	8005c4e <__ssputs_r+0x82>
 8005bde:	898a      	ldrh	r2, [r1, #12]
 8005be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005be4:	d031      	beq.n	8005c4a <__ssputs_r+0x7e>
 8005be6:	6825      	ldr	r5, [r4, #0]
 8005be8:	6909      	ldr	r1, [r1, #16]
 8005bea:	1a6f      	subs	r7, r5, r1
 8005bec:	6965      	ldr	r5, [r4, #20]
 8005bee:	2302      	movs	r3, #2
 8005bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005bf8:	f109 0301 	add.w	r3, r9, #1
 8005bfc:	443b      	add	r3, r7
 8005bfe:	429d      	cmp	r5, r3
 8005c00:	bf38      	it	cc
 8005c02:	461d      	movcc	r5, r3
 8005c04:	0553      	lsls	r3, r2, #21
 8005c06:	d530      	bpl.n	8005c6a <__ssputs_r+0x9e>
 8005c08:	4629      	mov	r1, r5
 8005c0a:	f7ff ff85 	bl	8005b18 <_malloc_r>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	b950      	cbnz	r0, 8005c28 <__ssputs_r+0x5c>
 8005c12:	230c      	movs	r3, #12
 8005c14:	f8ca 3000 	str.w	r3, [sl]
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	463a      	mov	r2, r7
 8005c2a:	6921      	ldr	r1, [r4, #16]
 8005c2c:	f7ff fc32 	bl	8005494 <memcpy>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	6126      	str	r6, [r4, #16]
 8005c3e:	6165      	str	r5, [r4, #20]
 8005c40:	443e      	add	r6, r7
 8005c42:	1bed      	subs	r5, r5, r7
 8005c44:	6026      	str	r6, [r4, #0]
 8005c46:	60a5      	str	r5, [r4, #8]
 8005c48:	464e      	mov	r6, r9
 8005c4a:	454e      	cmp	r6, r9
 8005c4c:	d900      	bls.n	8005c50 <__ssputs_r+0x84>
 8005c4e:	464e      	mov	r6, r9
 8005c50:	4632      	mov	r2, r6
 8005c52:	4641      	mov	r1, r8
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	f000 f92d 	bl	8005eb4 <memmove>
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	1b9b      	subs	r3, r3, r6
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	441e      	add	r6, r3
 8005c64:	6026      	str	r6, [r4, #0]
 8005c66:	2000      	movs	r0, #0
 8005c68:	e7dc      	b.n	8005c24 <__ssputs_r+0x58>
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	f000 f93d 	bl	8005eea <_realloc_r>
 8005c70:	4606      	mov	r6, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d1e2      	bne.n	8005c3c <__ssputs_r+0x70>
 8005c76:	6921      	ldr	r1, [r4, #16]
 8005c78:	4650      	mov	r0, sl
 8005c7a:	f7ff feff 	bl	8005a7c <_free_r>
 8005c7e:	e7c8      	b.n	8005c12 <__ssputs_r+0x46>

08005c80 <_svfiprintf_r>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	461d      	mov	r5, r3
 8005c86:	898b      	ldrh	r3, [r1, #12]
 8005c88:	061f      	lsls	r7, r3, #24
 8005c8a:	b09d      	sub	sp, #116	; 0x74
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4616      	mov	r6, r2
 8005c92:	d50f      	bpl.n	8005cb4 <_svfiprintf_r+0x34>
 8005c94:	690b      	ldr	r3, [r1, #16]
 8005c96:	b96b      	cbnz	r3, 8005cb4 <_svfiprintf_r+0x34>
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	f7ff ff3d 	bl	8005b18 <_malloc_r>
 8005c9e:	6020      	str	r0, [r4, #0]
 8005ca0:	6120      	str	r0, [r4, #16]
 8005ca2:	b928      	cbnz	r0, 8005cb0 <_svfiprintf_r+0x30>
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	f8c8 3000 	str.w	r3, [r8]
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cae:	e0c8      	b.n	8005e42 <_svfiprintf_r+0x1c2>
 8005cb0:	2340      	movs	r3, #64	; 0x40
 8005cb2:	6163      	str	r3, [r4, #20]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cbe:	2330      	movs	r3, #48	; 0x30
 8005cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc4:	9503      	str	r5, [sp, #12]
 8005cc6:	f04f 0b01 	mov.w	fp, #1
 8005cca:	4637      	mov	r7, r6
 8005ccc:	463d      	mov	r5, r7
 8005cce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cd2:	b10b      	cbz	r3, 8005cd8 <_svfiprintf_r+0x58>
 8005cd4:	2b25      	cmp	r3, #37	; 0x25
 8005cd6:	d13e      	bne.n	8005d56 <_svfiprintf_r+0xd6>
 8005cd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cdc:	d00b      	beq.n	8005cf6 <_svfiprintf_r+0x76>
 8005cde:	4653      	mov	r3, sl
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	f7ff ff71 	bl	8005bcc <__ssputs_r>
 8005cea:	3001      	adds	r0, #1
 8005cec:	f000 80a4 	beq.w	8005e38 <_svfiprintf_r+0x1b8>
 8005cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf2:	4453      	add	r3, sl
 8005cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf6:	783b      	ldrb	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 809d 	beq.w	8005e38 <_svfiprintf_r+0x1b8>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d10:	931a      	str	r3, [sp, #104]	; 0x68
 8005d12:	462f      	mov	r7, r5
 8005d14:	2205      	movs	r2, #5
 8005d16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d1a:	4850      	ldr	r0, [pc, #320]	; (8005e5c <_svfiprintf_r+0x1dc>)
 8005d1c:	f7fa fa68 	bl	80001f0 <memchr>
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	b9d0      	cbnz	r0, 8005d5a <_svfiprintf_r+0xda>
 8005d24:	06d9      	lsls	r1, r3, #27
 8005d26:	bf44      	itt	mi
 8005d28:	2220      	movmi	r2, #32
 8005d2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d2e:	071a      	lsls	r2, r3, #28
 8005d30:	bf44      	itt	mi
 8005d32:	222b      	movmi	r2, #43	; 0x2b
 8005d34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d38:	782a      	ldrb	r2, [r5, #0]
 8005d3a:	2a2a      	cmp	r2, #42	; 0x2a
 8005d3c:	d015      	beq.n	8005d6a <_svfiprintf_r+0xea>
 8005d3e:	9a07      	ldr	r2, [sp, #28]
 8005d40:	462f      	mov	r7, r5
 8005d42:	2000      	movs	r0, #0
 8005d44:	250a      	movs	r5, #10
 8005d46:	4639      	mov	r1, r7
 8005d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d4c:	3b30      	subs	r3, #48	; 0x30
 8005d4e:	2b09      	cmp	r3, #9
 8005d50:	d94d      	bls.n	8005dee <_svfiprintf_r+0x16e>
 8005d52:	b1b8      	cbz	r0, 8005d84 <_svfiprintf_r+0x104>
 8005d54:	e00f      	b.n	8005d76 <_svfiprintf_r+0xf6>
 8005d56:	462f      	mov	r7, r5
 8005d58:	e7b8      	b.n	8005ccc <_svfiprintf_r+0x4c>
 8005d5a:	4a40      	ldr	r2, [pc, #256]	; (8005e5c <_svfiprintf_r+0x1dc>)
 8005d5c:	1a80      	subs	r0, r0, r2
 8005d5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005d62:	4318      	orrs	r0, r3
 8005d64:	9004      	str	r0, [sp, #16]
 8005d66:	463d      	mov	r5, r7
 8005d68:	e7d3      	b.n	8005d12 <_svfiprintf_r+0x92>
 8005d6a:	9a03      	ldr	r2, [sp, #12]
 8005d6c:	1d11      	adds	r1, r2, #4
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	9103      	str	r1, [sp, #12]
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	db01      	blt.n	8005d7a <_svfiprintf_r+0xfa>
 8005d76:	9207      	str	r2, [sp, #28]
 8005d78:	e004      	b.n	8005d84 <_svfiprintf_r+0x104>
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	9207      	str	r2, [sp, #28]
 8005d82:	9304      	str	r3, [sp, #16]
 8005d84:	783b      	ldrb	r3, [r7, #0]
 8005d86:	2b2e      	cmp	r3, #46	; 0x2e
 8005d88:	d10c      	bne.n	8005da4 <_svfiprintf_r+0x124>
 8005d8a:	787b      	ldrb	r3, [r7, #1]
 8005d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d8e:	d133      	bne.n	8005df8 <_svfiprintf_r+0x178>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	1d1a      	adds	r2, r3, #4
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	9203      	str	r2, [sp, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bfb8      	it	lt
 8005d9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005da0:	3702      	adds	r7, #2
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	4d2e      	ldr	r5, [pc, #184]	; (8005e60 <_svfiprintf_r+0x1e0>)
 8005da6:	7839      	ldrb	r1, [r7, #0]
 8005da8:	2203      	movs	r2, #3
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fa fa20 	bl	80001f0 <memchr>
 8005db0:	b138      	cbz	r0, 8005dc2 <_svfiprintf_r+0x142>
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	1b40      	subs	r0, r0, r5
 8005db6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	4303      	orrs	r3, r0
 8005dbe:	3701      	adds	r7, #1
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	7839      	ldrb	r1, [r7, #0]
 8005dc4:	4827      	ldr	r0, [pc, #156]	; (8005e64 <_svfiprintf_r+0x1e4>)
 8005dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dca:	2206      	movs	r2, #6
 8005dcc:	1c7e      	adds	r6, r7, #1
 8005dce:	f7fa fa0f 	bl	80001f0 <memchr>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d038      	beq.n	8005e48 <_svfiprintf_r+0x1c8>
 8005dd6:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <_svfiprintf_r+0x1e8>)
 8005dd8:	bb13      	cbnz	r3, 8005e20 <_svfiprintf_r+0x1a0>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	3307      	adds	r3, #7
 8005dde:	f023 0307 	bic.w	r3, r3, #7
 8005de2:	3308      	adds	r3, #8
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de8:	444b      	add	r3, r9
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	e76d      	b.n	8005cca <_svfiprintf_r+0x4a>
 8005dee:	fb05 3202 	mla	r2, r5, r2, r3
 8005df2:	2001      	movs	r0, #1
 8005df4:	460f      	mov	r7, r1
 8005df6:	e7a6      	b.n	8005d46 <_svfiprintf_r+0xc6>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	3701      	adds	r7, #1
 8005dfc:	9305      	str	r3, [sp, #20]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	250a      	movs	r5, #10
 8005e02:	4638      	mov	r0, r7
 8005e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e08:	3a30      	subs	r2, #48	; 0x30
 8005e0a:	2a09      	cmp	r2, #9
 8005e0c:	d903      	bls.n	8005e16 <_svfiprintf_r+0x196>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0c8      	beq.n	8005da4 <_svfiprintf_r+0x124>
 8005e12:	9105      	str	r1, [sp, #20]
 8005e14:	e7c6      	b.n	8005da4 <_svfiprintf_r+0x124>
 8005e16:	fb05 2101 	mla	r1, r5, r1, r2
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	e7f0      	b.n	8005e02 <_svfiprintf_r+0x182>
 8005e20:	ab03      	add	r3, sp, #12
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4622      	mov	r2, r4
 8005e26:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <_svfiprintf_r+0x1ec>)
 8005e28:	a904      	add	r1, sp, #16
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7fe f8ee 	bl	800400c <_printf_float>
 8005e30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e34:	4681      	mov	r9, r0
 8005e36:	d1d6      	bne.n	8005de6 <_svfiprintf_r+0x166>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	065b      	lsls	r3, r3, #25
 8005e3c:	f53f af35 	bmi.w	8005caa <_svfiprintf_r+0x2a>
 8005e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e42:	b01d      	add	sp, #116	; 0x74
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	ab03      	add	r3, sp, #12
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <_svfiprintf_r+0x1ec>)
 8005e50:	a904      	add	r1, sp, #16
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7fe fb90 	bl	8004578 <_printf_i>
 8005e58:	e7ea      	b.n	8005e30 <_svfiprintf_r+0x1b0>
 8005e5a:	bf00      	nop
 8005e5c:	0800616c 	.word	0x0800616c
 8005e60:	08006172 	.word	0x08006172
 8005e64:	08006176 	.word	0x08006176
 8005e68:	0800400d 	.word	0x0800400d
 8005e6c:	08005bcd 	.word	0x08005bcd

08005e70 <_sbrk_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4c06      	ldr	r4, [pc, #24]	; (8005e8c <_sbrk_r+0x1c>)
 8005e74:	2300      	movs	r3, #0
 8005e76:	4605      	mov	r5, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	f7fd ff74 	bl	8003d68 <_sbrk>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_sbrk_r+0x1a>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_sbrk_r+0x1a>
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	2000038c 	.word	0x2000038c

08005e90 <__ascii_mbtowc>:
 8005e90:	b082      	sub	sp, #8
 8005e92:	b901      	cbnz	r1, 8005e96 <__ascii_mbtowc+0x6>
 8005e94:	a901      	add	r1, sp, #4
 8005e96:	b142      	cbz	r2, 8005eaa <__ascii_mbtowc+0x1a>
 8005e98:	b14b      	cbz	r3, 8005eae <__ascii_mbtowc+0x1e>
 8005e9a:	7813      	ldrb	r3, [r2, #0]
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	1c10      	adds	r0, r2, #0
 8005ea2:	bf18      	it	ne
 8005ea4:	2001      	movne	r0, #1
 8005ea6:	b002      	add	sp, #8
 8005ea8:	4770      	bx	lr
 8005eaa:	4610      	mov	r0, r2
 8005eac:	e7fb      	b.n	8005ea6 <__ascii_mbtowc+0x16>
 8005eae:	f06f 0001 	mvn.w	r0, #1
 8005eb2:	e7f8      	b.n	8005ea6 <__ascii_mbtowc+0x16>

08005eb4 <memmove>:
 8005eb4:	4288      	cmp	r0, r1
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	eb01 0302 	add.w	r3, r1, r2
 8005ebc:	d807      	bhi.n	8005ece <memmove+0x1a>
 8005ebe:	1e42      	subs	r2, r0, #1
 8005ec0:	4299      	cmp	r1, r3
 8005ec2:	d00a      	beq.n	8005eda <memmove+0x26>
 8005ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ecc:	e7f8      	b.n	8005ec0 <memmove+0xc>
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	d9f5      	bls.n	8005ebe <memmove+0xa>
 8005ed2:	1881      	adds	r1, r0, r2
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	42d3      	cmn	r3, r2
 8005ed8:	d100      	bne.n	8005edc <memmove+0x28>
 8005eda:	bd10      	pop	{r4, pc}
 8005edc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ee0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ee4:	e7f7      	b.n	8005ed6 <memmove+0x22>

08005ee6 <__malloc_lock>:
 8005ee6:	4770      	bx	lr

08005ee8 <__malloc_unlock>:
 8005ee8:	4770      	bx	lr

08005eea <_realloc_r>:
 8005eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eec:	4607      	mov	r7, r0
 8005eee:	4614      	mov	r4, r2
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	b921      	cbnz	r1, 8005efe <_realloc_r+0x14>
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005efa:	f7ff be0d 	b.w	8005b18 <_malloc_r>
 8005efe:	b922      	cbnz	r2, 8005f0a <_realloc_r+0x20>
 8005f00:	f7ff fdbc 	bl	8005a7c <_free_r>
 8005f04:	4625      	mov	r5, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0a:	f000 f821 	bl	8005f50 <_malloc_usable_size_r>
 8005f0e:	42a0      	cmp	r0, r4
 8005f10:	d20f      	bcs.n	8005f32 <_realloc_r+0x48>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff fdff 	bl	8005b18 <_malloc_r>
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0f2      	beq.n	8005f06 <_realloc_r+0x1c>
 8005f20:	4631      	mov	r1, r6
 8005f22:	4622      	mov	r2, r4
 8005f24:	f7ff fab6 	bl	8005494 <memcpy>
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f7ff fda6 	bl	8005a7c <_free_r>
 8005f30:	e7e9      	b.n	8005f06 <_realloc_r+0x1c>
 8005f32:	4635      	mov	r5, r6
 8005f34:	e7e7      	b.n	8005f06 <_realloc_r+0x1c>

08005f36 <__ascii_wctomb>:
 8005f36:	b149      	cbz	r1, 8005f4c <__ascii_wctomb+0x16>
 8005f38:	2aff      	cmp	r2, #255	; 0xff
 8005f3a:	bf85      	ittet	hi
 8005f3c:	238a      	movhi	r3, #138	; 0x8a
 8005f3e:	6003      	strhi	r3, [r0, #0]
 8005f40:	700a      	strbls	r2, [r1, #0]
 8005f42:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f46:	bf98      	it	ls
 8005f48:	2001      	movls	r0, #1
 8005f4a:	4770      	bx	lr
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4770      	bx	lr

08005f50 <_malloc_usable_size_r>:
 8005f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f54:	1f18      	subs	r0, r3, #4
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bfbc      	itt	lt
 8005f5a:	580b      	ldrlt	r3, [r1, r0]
 8005f5c:	18c0      	addlt	r0, r0, r3
 8005f5e:	4770      	bx	lr

08005f60 <_init>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr

08005f6c <_fini>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr
