
Midterm_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006298  08006298  00016298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a0  080065a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a8  080065a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080065b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001dc  0800678c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800678c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa93  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018b7  00000000  00000000  0002ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  0002d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162a4  00000000  00000000  0002db60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008071  00000000  00000000  00043e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c09e  00000000  00000000  0004be75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c4  00000000  00000000  000d7f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006280 	.word	0x08006280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006280 	.word	0x08006280

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f94d 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f002 ff54 	bl	8003e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f965 	bl	800128a <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f92d 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000004 	.word	0x20000004
 8001020:	20000208 	.word	0x20000208

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000208 	.word	0x20000208

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000004 	.word	0x20000004

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e159      	b.n	8001574 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8148 	bne.w	800156e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x4a>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	69b9      	ldr	r1, [r7, #24]
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0203 	and.w	r2, r3, #3
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d00b      	beq.n	800138a <HAL_GPIO_Init+0xe6>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137e:	2b11      	cmp	r3, #17
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b12      	cmp	r3, #18
 8001388:	d130      	bne.n	80013ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a2 	beq.w	800156e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a55      	ldr	r2, [pc, #340]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a51      	ldr	r2, [pc, #324]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x202>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a47      	ldr	r2, [pc, #284]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x1fe>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a46      	ldr	r2, [pc, #280]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x1fa>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <HAL_GPIO_Init+0x2f8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x1f6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x1f2>
 8001492:	2304      	movs	r3, #4
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 8001496:	2307      	movs	r3, #7
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a6:	2300      	movs	r3, #0
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_GPIO_Init+0x2e8>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c6:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ea:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001514:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	f67f aea2 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800157c:	bf00      	nop
 800157e:	3724      	adds	r7, #36	; 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400
 8001598:	40020800 	.word	0x40020800
 800159c:	40020c00 	.word	0x40020c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e001      	b.n	80015ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	401a      	ands	r2, r3
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	429a      	cmp	r2, r3
 8001622:	d104      	bne.n	800162e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	041a      	lsls	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 f952 	bl	8003908 <HAL_GPIO_EXTI_Callback>
  }
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e22d      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d075      	beq.n	800177a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d00c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169a:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d112      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a6:	4b9d      	ldr	r3, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b2:	d10b      	bne.n	80016cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	4b99      	ldr	r3, [pc, #612]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d05b      	beq.n	8001778 <HAL_RCC_OscConfig+0x108>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d157      	bne.n	8001778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e208      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x74>
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a90      	ldr	r2, [pc, #576]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x98>
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a8a      	ldr	r2, [pc, #552]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a87      	ldr	r2, [pc, #540]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xb0>
 8001708:	4b84      	ldr	r3, [pc, #528]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a83      	ldr	r2, [pc, #524]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a80      	ldr	r2, [pc, #512]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fc7c 	bl	8001024 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fc78 	bl	8001024 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1cd      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xc0>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fc68 	bl	8001024 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fc64 	bl	8001024 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1b9      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0xe8>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	2b08      	cmp	r3, #8
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x152>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e18d      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4952      	ldr	r1, [pc, #328]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_RCC_OscConfig+0x2b0>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fc1d 	bl	8001024 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fc19 	bl	8001024 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e16e      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4940      	ldr	r1, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x2b0>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fbfc 	bl	8001024 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fbf8 	bl	8001024 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e14d      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d030      	beq.n	80018bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d016      	beq.n	8001890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x2b4>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fbdc 	bl	8001024 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fbd8 	bl	8001024 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e12d      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 8001884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x200>
 800188e:	e015      	b.n	80018bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x2b4>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff fbc5 	bl	8001024 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fbc1 	bl	8001024 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e116      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a0 	beq.w	8001a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10f      	bne.n	80018fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	2b00      	cmp	r3, #0
 8001904:	d121      	bne.n	800194a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_RCC_OscConfig+0x2b8>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001912:	f7ff fb87 	bl	8001024 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	e011      	b.n	800193e <HAL_RCC_OscConfig+0x2ce>
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	42470000 	.word	0x42470000
 8001924:	42470e80 	.word	0x42470e80
 8001928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff fb7a 	bl	8001024 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0cf      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x478>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a65      	ldr	r2, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x32a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x312>
 8001968:	4b60      	ldr	r3, [pc, #384]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196c:	4a5f      	ldr	r2, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	; 0x70
 8001974:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x32a>
 8001982:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a59      	ldr	r2, [pc, #356]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb3f 	bl	8001024 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fb3b 	bl	8001024 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e08e      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x33a>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb29 	bl	8001024 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fb25 	bl	8001024 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e078      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d064      	beq.n	8001adc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d05c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d141      	bne.n	8001aaa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x480>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fafa 	bl	8001024 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff faf6 	bl	8001024 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04b      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	491d      	ldr	r1, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x480>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff facf 	bl	8001024 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff facb 	bl	8001024 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e020      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x41a>
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_OscConfig+0x480>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fab8 	bl	8001024 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff fab4 	bl	8001024 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCC_OscConfig+0x47c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x448>
 8001ad6:	e001      	b.n	8001adc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	42470060 	.word	0x42470060

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0ca      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d90c      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b64      	ldr	r3, [pc, #400]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b6      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b58      	ldr	r3, [pc, #352]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494c      	ldr	r1, [pc, #304]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07d      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06d      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e065      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4933      	ldr	r1, [pc, #204]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff fa1e 	bl	8001024 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff fa1a 	bl	8001024 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04d      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e030      	b.n	8001c9e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4915      	ldr	r1, [pc, #84]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490d      	ldr	r1, [pc, #52]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f81d 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff f980 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	0800632c 	.word	0x0800632c
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d007      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x32>
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 80b4 	bne.w	8001e4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ce6:	60bb      	str	r3, [r7, #8]
       break;
 8001ce8:	e0b3      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cec:	60bb      	str	r3, [r7, #8]
      break;
 8001cee:	e0b0      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d04a      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	f04f 0400 	mov.w	r4, #0
 8001d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	ea03 0501 	and.w	r5, r3, r1
 8001d1c:	ea04 0602 	and.w	r6, r4, r2
 8001d20:	4629      	mov	r1, r5
 8001d22:	4632      	mov	r2, r6
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	f04f 0400 	mov.w	r4, #0
 8001d2c:	0154      	lsls	r4, r2, #5
 8001d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d32:	014b      	lsls	r3, r1, #5
 8001d34:	4619      	mov	r1, r3
 8001d36:	4622      	mov	r2, r4
 8001d38:	1b49      	subs	r1, r1, r5
 8001d3a:	eb62 0206 	sbc.w	r2, r2, r6
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	0194      	lsls	r4, r2, #6
 8001d48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d4c:	018b      	lsls	r3, r1, #6
 8001d4e:	1a5b      	subs	r3, r3, r1
 8001d50:	eb64 0402 	sbc.w	r4, r4, r2
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	00e2      	lsls	r2, r4, #3
 8001d5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d62:	00d9      	lsls	r1, r3, #3
 8001d64:	460b      	mov	r3, r1
 8001d66:	4614      	mov	r4, r2
 8001d68:	195b      	adds	r3, r3, r5
 8001d6a:	eb44 0406 	adc.w	r4, r4, r6
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	0262      	lsls	r2, r4, #9
 8001d78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d7c:	0259      	lsls	r1, r3, #9
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	4621      	mov	r1, r4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f04f 0400 	mov.w	r4, #0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	f7fe ff62 	bl	8000c58 <__aeabi_uldivmod>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e049      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	f04f 0400 	mov.w	r4, #0
 8001da6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	ea03 0501 	and.w	r5, r3, r1
 8001db2:	ea04 0602 	and.w	r6, r4, r2
 8001db6:	4629      	mov	r1, r5
 8001db8:	4632      	mov	r2, r6
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	f04f 0400 	mov.w	r4, #0
 8001dc2:	0154      	lsls	r4, r2, #5
 8001dc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dc8:	014b      	lsls	r3, r1, #5
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4622      	mov	r2, r4
 8001dce:	1b49      	subs	r1, r1, r5
 8001dd0:	eb62 0206 	sbc.w	r2, r2, r6
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	f04f 0400 	mov.w	r4, #0
 8001ddc:	0194      	lsls	r4, r2, #6
 8001dde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	1a5b      	subs	r3, r3, r1
 8001de6:	eb64 0402 	sbc.w	r4, r4, r2
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	00e2      	lsls	r2, r4, #3
 8001df4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001df8:	00d9      	lsls	r1, r3, #3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	195b      	adds	r3, r3, r5
 8001e00:	eb44 0406 	adc.w	r4, r4, r6
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	02a2      	lsls	r2, r4, #10
 8001e0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e12:	0299      	lsls	r1, r3, #10
 8001e14:	460b      	mov	r3, r1
 8001e16:	4614      	mov	r4, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f04f 0400 	mov.w	r4, #0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	f7fe ff17 	bl	8000c58 <__aeabi_uldivmod>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	0c1b      	lsrs	r3, r3, #16
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	60bb      	str	r3, [r7, #8]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e4e:	60bb      	str	r3, [r7, #8]
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	68bb      	ldr	r3, [r7, #8]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4601      	mov	r1, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	0800633c 	.word	0x0800633c

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eac:	f7ff ffdc 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0b5b      	lsrs	r3, r3, #13
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0800633c 	.word	0x0800633c

08001ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e01d      	b.n	8001f1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f001 ffc6 	bl	8003e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f000 fb4c 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e01d      	b.n	8001fbc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f815 	bl	8001fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4610      	mov	r0, r2
 8001fae:	f000 fafd 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd84 	bl	8002af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a10      	ldr	r2, [pc, #64]	; (8002038 <HAL_TIM_PWM_Start+0x60>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d107      	bne.n	800200a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d007      	beq.n	800202c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000

0800203c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0202 	mvn.w	r2, #2
 8002068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa75 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa67 	bl	800255a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa78 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0204 	mvn.w	r2, #4
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa4b 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fa3d 	bl	800255a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fa4e 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b08      	cmp	r3, #8
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0208 	mvn.w	r2, #8
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa21 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa13 	bl	800255a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fa24 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b10      	cmp	r3, #16
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b10      	cmp	r3, #16
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0210 	mvn.w	r2, #16
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2208      	movs	r2, #8
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f9f7 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f9e9 	bl	800255a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9fa 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0201 	mvn.w	r2, #1
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f9c3 	bl	8002546 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b80      	cmp	r3, #128	; 0x80
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fcfa 	bl	8002be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9bf 	bl	8002596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b20      	cmp	r3, #32
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b20      	cmp	r3, #32
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fcc4 	bl	8002bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002262:	2302      	movs	r3, #2
 8002264:	e0b4      	b.n	80023d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	f200 809f 	bhi.w	80023bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022b9 	.word	0x080022b9
 8002288:	080023bd 	.word	0x080023bd
 800228c:	080023bd 	.word	0x080023bd
 8002290:	080023bd 	.word	0x080023bd
 8002294:	080022f9 	.word	0x080022f9
 8002298:	080023bd 	.word	0x080023bd
 800229c:	080023bd 	.word	0x080023bd
 80022a0:	080023bd 	.word	0x080023bd
 80022a4:	0800233b 	.word	0x0800233b
 80022a8:	080023bd 	.word	0x080023bd
 80022ac:	080023bd 	.word	0x080023bd
 80022b0:	080023bd 	.word	0x080023bd
 80022b4:	0800237b 	.word	0x0800237b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f9f4 	bl	80026ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0208 	orr.w	r2, r2, #8
 80022d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6999      	ldr	r1, [r3, #24]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	619a      	str	r2, [r3, #24]
      break;
 80022f6:	e062      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fa3a 	bl	8002778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6999      	ldr	r1, [r3, #24]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	619a      	str	r2, [r3, #24]
      break;
 8002338:	e041      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fa85 	bl	8002850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0208 	orr.w	r2, r2, #8
 8002354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0204 	bic.w	r2, r2, #4
 8002364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
      break;
 8002378:	e021      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 facf 	bl	8002924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69d9      	ldr	r1, [r3, #28]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	61da      	str	r2, [r3, #28]
      break;
 80023ba:	e000      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80023bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x18>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0a6      	b.n	800253e <HAL_TIM_ConfigClockSource+0x166>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002416:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d067      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0x120>
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d80b      	bhi.n	8002444 <HAL_TIM_ConfigClockSource+0x6c>
 800242c:	2b10      	cmp	r3, #16
 800242e:	d073      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x140>
 8002430:	2b10      	cmp	r3, #16
 8002432:	d802      	bhi.n	800243a <HAL_TIM_ConfigClockSource+0x62>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d06f      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002438:	e078      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800243a:	2b20      	cmp	r3, #32
 800243c:	d06c      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x140>
 800243e:	2b30      	cmp	r3, #48	; 0x30
 8002440:	d06a      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002442:	e073      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d00d      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x8c>
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d804      	bhi.n	8002456 <HAL_TIM_ConfigClockSource+0x7e>
 800244c:	2b50      	cmp	r3, #80	; 0x50
 800244e:	d033      	beq.n	80024b8 <HAL_TIM_ConfigClockSource+0xe0>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d041      	beq.n	80024d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002454:	e06a      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	d066      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x152>
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d017      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002462:	e063      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f000 fb20 	bl	8002ab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002486:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	609a      	str	r2, [r3, #8]
      break;
 8002490:	e04c      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f000 fb09 	bl	8002ab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b4:	609a      	str	r2, [r3, #8]
      break;
 80024b6:	e039      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	461a      	mov	r2, r3
 80024c6:	f000 fa7d 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2150      	movs	r1, #80	; 0x50
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fad6 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 80024d6:	e029      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	461a      	mov	r2, r3
 80024e6:	f000 fa9c 	bl	8002a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2160      	movs	r1, #96	; 0x60
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fac6 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 80024f6:	e019      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	461a      	mov	r2, r3
 8002506:	f000 fa5d 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2140      	movs	r1, #64	; 0x40
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fab6 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 8002516:	e009      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 faad 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 8002528:	e000      	b.n	800252c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800252a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a34      	ldr	r2, [pc, #208]	; (8002690 <TIM_Base_SetConfig+0xe4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00f      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a31      	ldr	r2, [pc, #196]	; (8002694 <TIM_Base_SetConfig+0xe8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <TIM_Base_SetConfig+0xec>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x38>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a2f      	ldr	r2, [pc, #188]	; (800269c <TIM_Base_SetConfig+0xf0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a25      	ldr	r2, [pc, #148]	; (8002690 <TIM_Base_SetConfig+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <TIM_Base_SetConfig+0xe8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <TIM_Base_SetConfig+0xec>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a20      	ldr	r2, [pc, #128]	; (800269c <TIM_Base_SetConfig+0xf0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <TIM_Base_SetConfig+0xf4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <TIM_Base_SetConfig+0xf8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x8a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <TIM_Base_SetConfig+0xfc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <TIM_Base_SetConfig+0xe4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d103      	bne.n	800267c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	615a      	str	r2, [r3, #20]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40010000 	.word	0x40010000
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40014400 	.word	0x40014400
 80026a8:	40014800 	.word	0x40014800

080026ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0201 	bic.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 0302 	bic.w	r3, r3, #2
 80026f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <TIM_OC1_SetConfig+0xc8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10c      	bne.n	8002722 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0308 	bic.w	r3, r3, #8
 800270e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <TIM_OC1_SetConfig+0xc8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40010000 	.word	0x40010000

08002778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0320 	bic.w	r3, r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <TIM_OC2_SetConfig+0xd4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10d      	bne.n	80027f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <TIM_OC2_SetConfig+0xd4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d113      	bne.n	8002824 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800280a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40010000 	.word	0x40010000

08002850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <TIM_OC3_SetConfig+0xd0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10d      	bne.n	80028ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <TIM_OC3_SetConfig+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d113      	bne.n	80028fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40010000 	.word	0x40010000

08002924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800296e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <TIM_OC4_SetConfig+0x9c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d109      	bne.n	8002998 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800298a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	621a      	str	r2, [r3, #32]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000

080029c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0201 	bic.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 030a 	bic.w	r3, r3, #10
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0210 	bic.w	r2, r3, #16
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f043 0307 	orr.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e032      	b.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03f      	b.n	8002c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 f9ac 	bl	8003f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f90b 	bl	8002e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b088      	sub	sp, #32
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	f040 8083 	bne.w	8002db6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Transmit+0x2e>
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e07b      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Transmit+0x40>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e074      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe f99e 	bl	8001024 <HAL_GetTick>
 8002ce8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf6:	e042      	b.n	8002d7e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d122      	bne.n	8002d56 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f850 	bl	8002dc0 <UART_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e046      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	e017      	b.n	8002d7e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	e013      	b.n	8002d7e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f82d 	bl	8002dc0 <UART_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e023      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1b7      	bne.n	8002cf8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f814 	bl	8002dc0 <UART_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e00a      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd0:	e02c      	b.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d028      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de0:	f7fe f920 	bl	8001024 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d21d      	bcs.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e00f      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d0c3      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e94:	f023 030c 	bic.w	r3, r3, #12
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec0:	f040 80e4 	bne.w	800308c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4aab      	ldr	r2, [pc, #684]	; (8003178 <UART_SetConfig+0x324>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <UART_SetConfig+0x84>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4aaa      	ldr	r2, [pc, #680]	; (800317c <UART_SetConfig+0x328>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d16c      	bne.n	8002fb2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ed8:	f7fe ffe6 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	441a      	add	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4aa3      	ldr	r2, [pc, #652]	; (8003180 <UART_SetConfig+0x32c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	011c      	lsls	r4, r3, #4
 8002efc:	f7fe ffd4 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009a      	lsls	r2, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f16:	f7fe ffc7 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	4a93      	ldr	r2, [pc, #588]	; (8003180 <UART_SetConfig+0x32c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2264      	movs	r2, #100	; 0x64
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	1aeb      	subs	r3, r5, r3
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	3332      	adds	r3, #50	; 0x32
 8002f44:	4a8e      	ldr	r2, [pc, #568]	; (8003180 <UART_SetConfig+0x32c>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f52:	441c      	add	r4, r3
 8002f54:	f7fe ffa8 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f6e:	f7fe ff9b 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009a      	lsls	r2, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	4a7d      	ldr	r2, [pc, #500]	; (8003180 <UART_SetConfig+0x32c>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2264      	movs	r2, #100	; 0x64
 8002f92:	fb02 f303 	mul.w	r3, r2, r3
 8002f96:	1aeb      	subs	r3, r5, r3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a78      	ldr	r2, [pc, #480]	; (8003180 <UART_SetConfig+0x32c>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4422      	add	r2, r4
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	e154      	b.n	800325c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002fb2:	f7fe ff65 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fcc:	4a6c      	ldr	r2, [pc, #432]	; (8003180 <UART_SetConfig+0x32c>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011c      	lsls	r4, r3, #4
 8002fd6:	f7fe ff53 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009a      	lsls	r2, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ff0:	f7fe ff46 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <UART_SetConfig+0x32c>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	2264      	movs	r2, #100	; 0x64
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	1aeb      	subs	r3, r5, r3
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3332      	adds	r3, #50	; 0x32
 800301e:	4a58      	ldr	r2, [pc, #352]	; (8003180 <UART_SetConfig+0x32c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800302c:	441c      	add	r4, r3
 800302e:	f7fe ff27 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003032:	4602      	mov	r2, r0
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb2 f5f3 	udiv	r5, r2, r3
 8003048:	f7fe ff1a 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800304c:	4602      	mov	r2, r0
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4a47      	ldr	r2, [pc, #284]	; (8003180 <UART_SetConfig+0x32c>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	2264      	movs	r2, #100	; 0x64
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	1aeb      	subs	r3, r5, r3
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	3332      	adds	r3, #50	; 0x32
 8003076:	4a42      	ldr	r2, [pc, #264]	; (8003180 <UART_SetConfig+0x32c>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	f003 0207 	and.w	r2, r3, #7
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4422      	add	r2, r4
 8003088:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800308a:	e0e7      	b.n	800325c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	; (8003178 <UART_SetConfig+0x324>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <UART_SetConfig+0x24c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a38      	ldr	r2, [pc, #224]	; (800317c <UART_SetConfig+0x328>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d171      	bne.n	8003184 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030a0:	f7fe ff02 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <UART_SetConfig+0x32c>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	011c      	lsls	r4, r3, #4
 80030c4:	f7fe fef0 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	fbb2 f5f3 	udiv	r5, r2, r3
 80030de:	f7fe fee3 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	4a21      	ldr	r2, [pc, #132]	; (8003180 <UART_SetConfig+0x32c>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2264      	movs	r2, #100	; 0x64
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	1aeb      	subs	r3, r5, r3
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	3332      	adds	r3, #50	; 0x32
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <UART_SetConfig+0x32c>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003118:	441c      	add	r4, r3
 800311a:	f7fe fec5 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 800311e:	4602      	mov	r2, r0
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fbb2 f5f3 	udiv	r5, r2, r3
 8003134:	f7fe feb8 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 8003138:	4602      	mov	r2, r0
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009a      	lsls	r2, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <UART_SetConfig+0x32c>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2264      	movs	r2, #100	; 0x64
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	1aeb      	subs	r3, r5, r3
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a07      	ldr	r2, [pc, #28]	; (8003180 <UART_SetConfig+0x32c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4422      	add	r2, r4
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e071      	b.n	800325c <UART_SetConfig+0x408>
 8003178:	40011000 	.word	0x40011000
 800317c:	40011400 	.word	0x40011400
 8003180:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003184:	f7fe fe7c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003188:	4602      	mov	r2, r0
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009a      	lsls	r2, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <UART_SetConfig+0x410>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	011c      	lsls	r4, r3, #4
 80031a8:	f7fe fe6a 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	fbb2 f5f3 	udiv	r5, r2, r3
 80031c2:	f7fe fe5d 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	4a21      	ldr	r2, [pc, #132]	; (8003264 <UART_SetConfig+0x410>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	; 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1aeb      	subs	r3, r5, r3
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	3332      	adds	r3, #50	; 0x32
 80031f0:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <UART_SetConfig+0x410>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	441c      	add	r4, r3
 80031fe:	f7fe fe3f 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003202:	4602      	mov	r2, r0
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009a      	lsls	r2, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fbb2 f5f3 	udiv	r5, r2, r3
 8003218:	f7fe fe32 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800321c:	4602      	mov	r2, r0
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	009a      	lsls	r2, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <UART_SetConfig+0x410>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2264      	movs	r2, #100	; 0x64
 800323c:	fb02 f303 	mul.w	r3, r2, r3
 8003240:	1aeb      	subs	r3, r5, r3
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <UART_SetConfig+0x410>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4422      	add	r2, r4
 8003258:	609a      	str	r2, [r3, #8]
}
 800325a:	e7ff      	b.n	800325c <UART_SetConfig+0x408>
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bdb0      	pop	{r4, r5, r7, pc}
 8003264:	51eb851f 	.word	0x51eb851f

08003268 <MotorBegin>:

int i ;
char ch = 'A';


void MotorBegin(){
 8003268:	b598      	push	{r3, r4, r7, lr}
 800326a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = TIM4->ARR  * 100 / 100;
 800326c:	4bad      	ldr	r3, [pc, #692]	; (8003524 <MotorBegin+0x2bc>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2264      	movs	r2, #100	; 0x64
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	4aac      	ldr	r2, [pc, #688]	; (8003528 <MotorBegin+0x2c0>)
 8003278:	49ac      	ldr	r1, [pc, #688]	; (800352c <MotorBegin+0x2c4>)
 800327a:	fba1 1303 	umull	r1, r3, r1, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	6353      	str	r3, [r2, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003282:	2201      	movs	r2, #1
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	48aa      	ldr	r0, [pc, #680]	; (8003530 <MotorBegin+0x2c8>)
 8003288:	f7fe f9a6 	bl	80015d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);//set Motor 1 Forward
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	48a7      	ldr	r0, [pc, #668]	; (8003530 <MotorBegin+0x2c8>)
 8003292:	f7fe f9a1 	bl	80015d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003296:	2201      	movs	r2, #1
 8003298:	2101      	movs	r1, #1
 800329a:	48a6      	ldr	r0, [pc, #664]	; (8003534 <MotorBegin+0x2cc>)
 800329c:	f7fe f99c 	bl	80015d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);//Set Motor 2 Forward
 80032a0:	2200      	movs	r2, #0
 80032a2:	2102      	movs	r1, #2
 80032a4:	48a3      	ldr	r0, [pc, #652]	; (8003534 <MotorBegin+0x2cc>)
 80032a6:	f7fe f997 	bl	80015d8 <HAL_GPIO_WritePin>
	range = UltrasonicRange();// Measure side obstacle distance
 80032aa:	f000 f965 	bl	8003578 <UltrasonicRange>
 80032ae:	eef0 7a40 	vmov.f32	s15, s0
 80032b2:	4ba1      	ldr	r3, [pc, #644]	; (8003538 <MotorBegin+0x2d0>)
 80032b4:	edc3 7a00 	vstr	s15, [r3]
	sprintf(uartBuf,"Distance(cm)= %.1f\r\n", range);
 80032b8:	4b9f      	ldr	r3, [pc, #636]	; (8003538 <MotorBegin+0x2d0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f94b 	bl	8000558 <__aeabi_f2d>
 80032c2:	4603      	mov	r3, r0
 80032c4:	460c      	mov	r4, r1
 80032c6:	461a      	mov	r2, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	499c      	ldr	r1, [pc, #624]	; (800353c <MotorBegin+0x2d4>)
 80032cc:	489c      	ldr	r0, [pc, #624]	; (8003540 <MotorBegin+0x2d8>)
 80032ce:	f001 fbf5 	bl	8004abc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80032d2:	489b      	ldr	r0, [pc, #620]	; (8003540 <MotorBegin+0x2d8>)
 80032d4:	f7fc ff84 	bl	80001e0 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e0:	4997      	ldr	r1, [pc, #604]	; (8003540 <MotorBegin+0x2d8>)
 80032e2:	4898      	ldr	r0, [pc, #608]	; (8003544 <MotorBegin+0x2dc>)
 80032e4:	f7ff fcd3 	bl	8002c8e <HAL_UART_Transmit>
	i = 0;
 80032e8:	4b97      	ldr	r3, [pc, #604]	; (8003548 <MotorBegin+0x2e0>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
	while (i<3){
 80032ee:	e034      	b.n	800335a <MotorBegin+0xf2>
		HAL_Delay(200);
 80032f0:	20c8      	movs	r0, #200	; 0xc8
 80032f2:	f7fd fea3 	bl	800103c <HAL_Delay>
		range = UltrasonicRange();
 80032f6:	f000 f93f 	bl	8003578 <UltrasonicRange>
 80032fa:	eef0 7a40 	vmov.f32	s15, s0
 80032fe:	4b8e      	ldr	r3, [pc, #568]	; (8003538 <MotorBegin+0x2d0>)
 8003300:	edc3 7a00 	vstr	s15, [r3]

		if (range > 40){
 8003304:	4b8c      	ldr	r3, [pc, #560]	; (8003538 <MotorBegin+0x2d0>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800354c <MotorBegin+0x2e4>
 800330e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	dd05      	ble.n	8003324 <MotorBegin+0xbc>
			i++;
 8003318:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <MotorBegin+0x2e0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	4a8a      	ldr	r2, [pc, #552]	; (8003548 <MotorBegin+0x2e0>)
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e002      	b.n	800332a <MotorBegin+0xc2>
		}
		else{
			i = 0 ;
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <MotorBegin+0x2e0>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
		}// use while loop to identify the size of parking space
		sprintf(uartBuf,"Distance1(cm)= %.1f\r\n", range);
 800332a:	4b83      	ldr	r3, [pc, #524]	; (8003538 <MotorBegin+0x2d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f912 	bl	8000558 <__aeabi_f2d>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	461a      	mov	r2, r3
 800333a:	4623      	mov	r3, r4
 800333c:	4984      	ldr	r1, [pc, #528]	; (8003550 <MotorBegin+0x2e8>)
 800333e:	4880      	ldr	r0, [pc, #512]	; (8003540 <MotorBegin+0x2d8>)
 8003340:	f001 fbbc 	bl	8004abc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003344:	487e      	ldr	r0, [pc, #504]	; (8003540 <MotorBegin+0x2d8>)
 8003346:	f7fc ff4b 	bl	80001e0 <strlen>
 800334a:	4603      	mov	r3, r0
 800334c:	b29a      	uxth	r2, r3
 800334e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003352:	497b      	ldr	r1, [pc, #492]	; (8003540 <MotorBegin+0x2d8>)
 8003354:	487b      	ldr	r0, [pc, #492]	; (8003544 <MotorBegin+0x2dc>)
 8003356:	f7ff fc9a 	bl	8002c8e <HAL_UART_Transmit>
	while (i<3){
 800335a:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <MotorBegin+0x2e0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b02      	cmp	r3, #2
 8003360:	ddc6      	ble.n	80032f0 <MotorBegin+0x88>

	};
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003362:	2200      	movs	r2, #0
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	4872      	ldr	r0, [pc, #456]	; (8003530 <MotorBegin+0x2c8>)
 8003368:	f7fe f936 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);// stop both motor
 800336c:	2200      	movs	r2, #0
 800336e:	2101      	movs	r1, #1
 8003370:	4870      	ldr	r0, [pc, #448]	; (8003534 <MotorBegin+0x2cc>)
 8003372:	f7fe f931 	bl	80015d8 <HAL_GPIO_WritePin>

	Turn();// turn 90 degree for parallel park
 8003376:	f000 f975 	bl	8003664 <Turn>
	sprintf(uartBuf,"state2= %.1f\r\n", range);
 800337a:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <MotorBegin+0x2d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f8ea 	bl	8000558 <__aeabi_f2d>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	461a      	mov	r2, r3
 800338a:	4623      	mov	r3, r4
 800338c:	4971      	ldr	r1, [pc, #452]	; (8003554 <MotorBegin+0x2ec>)
 800338e:	486c      	ldr	r0, [pc, #432]	; (8003540 <MotorBegin+0x2d8>)
 8003390:	f001 fb94 	bl	8004abc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003394:	486a      	ldr	r0, [pc, #424]	; (8003540 <MotorBegin+0x2d8>)
 8003396:	f7fc ff23 	bl	80001e0 <strlen>
 800339a:	4603      	mov	r3, r0
 800339c:	b29a      	uxth	r2, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a2:	4967      	ldr	r1, [pc, #412]	; (8003540 <MotorBegin+0x2d8>)
 80033a4:	4867      	ldr	r0, [pc, #412]	; (8003544 <MotorBegin+0x2dc>)
 80033a6:	f7ff fc72 	bl	8002c8e <HAL_UART_Transmit>
	range = 100;
 80033aa:	4b63      	ldr	r3, [pc, #396]	; (8003538 <MotorBegin+0x2d0>)
 80033ac:	4a6a      	ldr	r2, [pc, #424]	; (8003558 <MotorBegin+0x2f0>)
 80033ae:	601a      	str	r2, [r3, #0]
	sprintf(uartBuf,"state2.1= %.1f\r\n", range);
 80033b0:	4b61      	ldr	r3, [pc, #388]	; (8003538 <MotorBegin+0x2d0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd f8cf 	bl	8000558 <__aeabi_f2d>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	4966      	ldr	r1, [pc, #408]	; (800355c <MotorBegin+0x2f4>)
 80033c4:	485e      	ldr	r0, [pc, #376]	; (8003540 <MotorBegin+0x2d8>)
 80033c6:	f001 fb79 	bl	8004abc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80033ca:	485d      	ldr	r0, [pc, #372]	; (8003540 <MotorBegin+0x2d8>)
 80033cc:	f7fc ff08 	bl	80001e0 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d8:	4959      	ldr	r1, [pc, #356]	; (8003540 <MotorBegin+0x2d8>)
 80033da:	485a      	ldr	r0, [pc, #360]	; (8003544 <MotorBegin+0x2dc>)
 80033dc:	f7ff fc57 	bl	8002c8e <HAL_UART_Transmit>
	while(range>7){
 80033e0:	e065      	b.n	80034ae <MotorBegin+0x246>
		left = LeftBackUltraRange();
 80033e2:	f000 f971 	bl	80036c8 <LeftBackUltraRange>
 80033e6:	eef0 7a40 	vmov.f32	s15, s0
 80033ea:	4b5d      	ldr	r3, [pc, #372]	; (8003560 <MotorBegin+0x2f8>)
 80033ec:	edc3 7a00 	vstr	s15, [r3]
		right = RightBackUltraRange();
 80033f0:	f000 f9e2 	bl	80037b8 <RightBackUltraRange>
 80033f4:	eef0 7a40 	vmov.f32	s15, s0
 80033f8:	4b5a      	ldr	r3, [pc, #360]	; (8003564 <MotorBegin+0x2fc>)
 80033fa:	edc3 7a00 	vstr	s15, [r3]
		sprintf(uartBuf,"whileleft= %.1f\r\n", left);
 80033fe:	4b58      	ldr	r3, [pc, #352]	; (8003560 <MotorBegin+0x2f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd f8a8 	bl	8000558 <__aeabi_f2d>
 8003408:	4603      	mov	r3, r0
 800340a:	460c      	mov	r4, r1
 800340c:	461a      	mov	r2, r3
 800340e:	4623      	mov	r3, r4
 8003410:	4955      	ldr	r1, [pc, #340]	; (8003568 <MotorBegin+0x300>)
 8003412:	484b      	ldr	r0, [pc, #300]	; (8003540 <MotorBegin+0x2d8>)
 8003414:	f001 fb52 	bl	8004abc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003418:	4849      	ldr	r0, [pc, #292]	; (8003540 <MotorBegin+0x2d8>)
 800341a:	f7fc fee1 	bl	80001e0 <strlen>
 800341e:	4603      	mov	r3, r0
 8003420:	b29a      	uxth	r2, r3
 8003422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003426:	4946      	ldr	r1, [pc, #280]	; (8003540 <MotorBegin+0x2d8>)
 8003428:	4846      	ldr	r0, [pc, #280]	; (8003544 <MotorBegin+0x2dc>)
 800342a:	f7ff fc30 	bl	8002c8e <HAL_UART_Transmit>
		sprintf(uartBuf,"whileright= %.1f\r\n", right);
 800342e:	4b4d      	ldr	r3, [pc, #308]	; (8003564 <MotorBegin+0x2fc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd f890 	bl	8000558 <__aeabi_f2d>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	461a      	mov	r2, r3
 800343e:	4623      	mov	r3, r4
 8003440:	494a      	ldr	r1, [pc, #296]	; (800356c <MotorBegin+0x304>)
 8003442:	483f      	ldr	r0, [pc, #252]	; (8003540 <MotorBegin+0x2d8>)
 8003444:	f001 fb3a 	bl	8004abc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 8003448:	483d      	ldr	r0, [pc, #244]	; (8003540 <MotorBegin+0x2d8>)
 800344a:	f7fc fec9 	bl	80001e0 <strlen>
 800344e:	4603      	mov	r3, r0
 8003450:	b29a      	uxth	r2, r3
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	493a      	ldr	r1, [pc, #232]	; (8003540 <MotorBegin+0x2d8>)
 8003458:	483a      	ldr	r0, [pc, #232]	; (8003544 <MotorBegin+0x2dc>)
 800345a:	f7ff fc18 	bl	8002c8e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	4833      	ldr	r0, [pc, #204]	; (8003530 <MotorBegin+0x2c8>)
 8003464:	f7fe f8b8 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003468:	2201      	movs	r2, #1
 800346a:	2140      	movs	r1, #64	; 0x40
 800346c:	4830      	ldr	r0, [pc, #192]	; (8003530 <MotorBegin+0x2c8>)
 800346e:	f7fe f8b3 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	482f      	ldr	r0, [pc, #188]	; (8003534 <MotorBegin+0x2cc>)
 8003478:	f7fe f8ae 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800347c:	2201      	movs	r2, #1
 800347e:	2102      	movs	r1, #2
 8003480:	482c      	ldr	r0, [pc, #176]	; (8003534 <MotorBegin+0x2cc>)
 8003482:	f7fe f8a9 	bl	80015d8 <HAL_GPIO_WritePin>
		if(left>right){
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <MotorBegin+0x2f8>)
 8003488:	ed93 7a00 	vldr	s14, [r3]
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <MotorBegin+0x2fc>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	dd04      	ble.n	80034a6 <MotorBegin+0x23e>
			range = right;
 800349c:	4b31      	ldr	r3, [pc, #196]	; (8003564 <MotorBegin+0x2fc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <MotorBegin+0x2d0>)
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e003      	b.n	80034ae <MotorBegin+0x246>
		}else{
			range = left;
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <MotorBegin+0x2f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <MotorBegin+0x2d0>)
 80034ac:	6013      	str	r3, [r2, #0]
	while(range>7){
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <MotorBegin+0x2d0>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80034b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	dc8f      	bgt.n	80033e2 <MotorBegin+0x17a>
		}
	};// use while loop to continue move backward until near the wall
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	481a      	ldr	r0, [pc, #104]	; (8003530 <MotorBegin+0x2c8>)
 80034c8:	f7fe f886 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);// stop motor
 80034cc:	2200      	movs	r2, #0
 80034ce:	2102      	movs	r1, #2
 80034d0:	4818      	ldr	r0, [pc, #96]	; (8003534 <MotorBegin+0x2cc>)
 80034d2:	f7fe f881 	bl	80015d8 <HAL_GPIO_WritePin>



	sprintf(uartBuf,"state3= %.1f\r\n", range);
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <MotorBegin+0x2d0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f83c 	bl	8000558 <__aeabi_f2d>
 80034e0:	4603      	mov	r3, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	461a      	mov	r2, r3
 80034e6:	4623      	mov	r3, r4
 80034e8:	4921      	ldr	r1, [pc, #132]	; (8003570 <MotorBegin+0x308>)
 80034ea:	4815      	ldr	r0, [pc, #84]	; (8003540 <MotorBegin+0x2d8>)
 80034ec:	f001 fae6 	bl	8004abc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
 80034f0:	4813      	ldr	r0, [pc, #76]	; (8003540 <MotorBegin+0x2d8>)
 80034f2:	f7fc fe75 	bl	80001e0 <strlen>
 80034f6:	4603      	mov	r3, r0
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fe:	4910      	ldr	r1, [pc, #64]	; (8003540 <MotorBegin+0x2d8>)
 8003500:	4810      	ldr	r0, [pc, #64]	; (8003544 <MotorBegin+0x2dc>)
 8003502:	f7ff fbc4 	bl	8002c8e <HAL_UART_Transmit>
	Park();// turn back 90 degree to parallel park
 8003506:	f000 f9cd 	bl	80038a4 <Park>
	HAL_UART_Transmit(&huart2,"park\r\n", strlen(uartBuf),1000);
 800350a:	480d      	ldr	r0, [pc, #52]	; (8003540 <MotorBegin+0x2d8>)
 800350c:	f7fc fe68 	bl	80001e0 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	b29a      	uxth	r2, r3
 8003514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003518:	4916      	ldr	r1, [pc, #88]	; (8003574 <MotorBegin+0x30c>)
 800351a:	480a      	ldr	r0, [pc, #40]	; (8003544 <MotorBegin+0x2dc>)
 800351c:	f7ff fbb7 	bl	8002c8e <HAL_UART_Transmit>


}
 8003520:	bf00      	nop
 8003522:	bd98      	pop	{r3, r4, r7, pc}
 8003524:	40000800 	.word	0x40000800
 8003528:	40000400 	.word	0x40000400
 800352c:	51eb851f 	.word	0x51eb851f
 8003530:	40020000 	.word	0x40020000
 8003534:	40020800 	.word	0x40020800
 8003538:	20000344 	.word	0x20000344
 800353c:	08006298 	.word	0x08006298
 8003540:	200002a0 	.word	0x200002a0
 8003544:	20000304 	.word	0x20000304
 8003548:	2000029c 	.word	0x2000029c
 800354c:	42200000 	.word	0x42200000
 8003550:	080062b0 	.word	0x080062b0
 8003554:	080062c8 	.word	0x080062c8
 8003558:	42c80000 	.word	0x42c80000
 800355c:	080062d8 	.word	0x080062d8
 8003560:	20000298 	.word	0x20000298
 8003564:	20000250 	.word	0x20000250
 8003568:	080062ec 	.word	0x080062ec
 800356c:	08006300 	.word	0x08006300
 8003570:	08006314 	.word	0x08006314
 8003574:	08006324 	.word	0x08006324

08003578 <UltrasonicRange>:
float UltrasonicRange(){
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003582:	4833      	ldr	r0, [pc, #204]	; (8003650 <UltrasonicRange+0xd8>)
 8003584:	f7fe f828 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(3);
 8003588:	2003      	movs	r0, #3
 800358a:	f000 fc1b 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003594:	482e      	ldr	r0, [pc, #184]	; (8003650 <UltrasonicRange+0xd8>)
 8003596:	f7fe f81f 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(10);
 800359a:	200a      	movs	r0, #10
 800359c:	f000 fc12 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035a6:	482a      	ldr	r0, [pc, #168]	; (8003650 <UltrasonicRange+0xd8>)
 80035a8:	f7fe f816 	bl	80015d8 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_RESET);
 80035ac:	bf00      	nop
 80035ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035b2:	4827      	ldr	r0, [pc, #156]	; (8003650 <UltrasonicRange+0xd8>)
 80035b4:	f7fd fff8 	bl	80015a8 <HAL_GPIO_ReadPin>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f7      	beq.n	80035ae <UltrasonicRange+0x36>
	numtick = 0;
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <UltrasonicRange+0xdc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_SET)
 80035c4:	e007      	b.n	80035d6 <UltrasonicRange+0x5e>
	 {
	  numtick++;
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <UltrasonicRange+0xdc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	4a21      	ldr	r2, [pc, #132]	; (8003654 <UltrasonicRange+0xdc>)
 80035ce:	6013      	str	r3, [r2, #0]
	  usDelay(2);
 80035d0:	2002      	movs	r0, #2
 80035d2:	f000 fbf7 	bl	8003dc4 <usDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin)== GPIO_PIN_SET)
 80035d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035da:	481d      	ldr	r0, [pc, #116]	; (8003650 <UltrasonicRange+0xd8>)
 80035dc:	f7fd ffe4 	bl	80015a8 <HAL_GPIO_ReadPin>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d0ef      	beq.n	80035c6 <UltrasonicRange+0x4e>
	};
	distance = (numtick+0.0f)*2.8*speedOfSound ;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <UltrasonicRange+0xdc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003658 <UltrasonicRange+0xe0>
 80035f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035fa:	ee17 0a90 	vmov	r0, s15
 80035fe:	f7fc ffab 	bl	8000558 <__aeabi_f2d>
 8003602:	a311      	add	r3, pc, #68	; (adr r3, 8003648 <UltrasonicRange+0xd0>)
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f7fc fffe 	bl	8000608 <__aeabi_dmul>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4625      	mov	r5, r4
 8003612:	461c      	mov	r4, r3
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <UltrasonicRange+0xe4>)
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ff9e 	bl	8000558 <__aeabi_f2d>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4620      	mov	r0, r4
 8003622:	4629      	mov	r1, r5
 8003624:	f7fc fff0 	bl	8000608 <__aeabi_dmul>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	4618      	mov	r0, r3
 800362e:	4621      	mov	r1, r4
 8003630:	f7fd fac2 	bl	8000bb8 <__aeabi_d2f>
 8003634:	4602      	mov	r2, r0
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <UltrasonicRange+0xe8>)
 8003638:	601a      	str	r2, [r3, #0]
	/*sprintf(uartBuf,"Distance(cm)= %.1f\r\n", distance);


	HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 1000);
	HAL_Delay(1000);*/
	return distance;
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <UltrasonicRange+0xe8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	ee07 3a90 	vmov	s15, r3
}
 8003642:	eeb0 0a67 	vmov.f32	s0, s15
 8003646:	bdb0      	pop	{r4, r5, r7, pc}
 8003648:	66666666 	.word	0x66666666
 800364c:	40066666 	.word	0x40066666
 8003650:	40020000 	.word	0x40020000
 8003654:	2000020c 	.word	0x2000020c
 8003658:	00000000 	.word	0x00000000
 800365c:	3c8c7e28 	.word	0x3c8c7e28
 8003660:	20000254 	.word	0x20000254

08003664 <Turn>:

void Turn(){
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8003668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800366c:	f7fd fce6 	bl	800103c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <Turn+0x5c>)
 8003676:	f7fd ffaf 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2140      	movs	r1, #64	; 0x40
 800367e:	4810      	ldr	r0, [pc, #64]	; (80036c0 <Turn+0x5c>)
 8003680:	f7fd ffaa 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8003684:	2200      	movs	r2, #0
 8003686:	2101      	movs	r1, #1
 8003688:	480e      	ldr	r0, [pc, #56]	; (80036c4 <Turn+0x60>)
 800368a:	f7fd ffa5 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	2102      	movs	r1, #2
 8003692:	480c      	ldr	r0, [pc, #48]	; (80036c4 <Turn+0x60>)
 8003694:	f7fd ffa0 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003698:	20fa      	movs	r0, #250	; 0xfa
 800369a:	f7fd fccf 	bl	800103c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <Turn+0x5c>)
 80036a4:	f7fd ff98 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2102      	movs	r1, #2
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <Turn+0x60>)
 80036ae:	f7fd ff93 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80036b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036b6:	f7fd fcc1 	bl	800103c <HAL_Delay>
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40020800 	.word	0x40020800

080036c8 <LeftBackUltraRange>:

float LeftBackUltraRange(){
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B1TRIG_GPIO_Port, B1TRIG_Pin, GPIO_PIN_RESET);
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036d2:	4833      	ldr	r0, [pc, #204]	; (80037a0 <LeftBackUltraRange+0xd8>)
 80036d4:	f7fd ff80 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(3);
 80036d8:	2003      	movs	r0, #3
 80036da:	f000 fb73 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(B1TRIG_GPIO_Port, B1TRIG_Pin, GPIO_PIN_SET);
 80036de:	2201      	movs	r2, #1
 80036e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e4:	482e      	ldr	r0, [pc, #184]	; (80037a0 <LeftBackUltraRange+0xd8>)
 80036e6:	f7fd ff77 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(10);
 80036ea:	200a      	movs	r0, #10
 80036ec:	f000 fb6a 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(B1TRIG_GPIO_Port, B1TRIG_Pin, GPIO_PIN_RESET);
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036f6:	482a      	ldr	r0, [pc, #168]	; (80037a0 <LeftBackUltraRange+0xd8>)
 80036f8:	f7fd ff6e 	bl	80015d8 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(B1ECHO_GPIO_Port, B1ECHO_Pin)== GPIO_PIN_RESET);
 80036fc:	bf00      	nop
 80036fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003702:	4827      	ldr	r0, [pc, #156]	; (80037a0 <LeftBackUltraRange+0xd8>)
 8003704:	f7fd ff50 	bl	80015a8 <HAL_GPIO_ReadPin>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f7      	beq.n	80036fe <LeftBackUltraRange+0x36>
	numtick = 0;
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <LeftBackUltraRange+0xdc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(B1ECHO_GPIO_Port, B1ECHO_Pin)== GPIO_PIN_SET)
 8003714:	e007      	b.n	8003726 <LeftBackUltraRange+0x5e>
		{
		 numtick++;
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <LeftBackUltraRange+0xdc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <LeftBackUltraRange+0xdc>)
 800371e:	6013      	str	r3, [r2, #0]
		 usDelay(2);
 8003720:	2002      	movs	r0, #2
 8003722:	f000 fb4f 	bl	8003dc4 <usDelay>
	while(HAL_GPIO_ReadPin(B1ECHO_GPIO_Port, B1ECHO_Pin)== GPIO_PIN_SET)
 8003726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800372a:	481d      	ldr	r0, [pc, #116]	; (80037a0 <LeftBackUltraRange+0xd8>)
 800372c:	f7fd ff3c 	bl	80015a8 <HAL_GPIO_ReadPin>
 8003730:	4603      	mov	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d0ef      	beq.n	8003716 <LeftBackUltraRange+0x4e>
		};
	distance = (numtick+0.0f)*2.8*speedOfSound ;
 8003736:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <LeftBackUltraRange+0xdc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003742:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80037a8 <LeftBackUltraRange+0xe0>
 8003746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800374a:	ee17 0a90 	vmov	r0, s15
 800374e:	f7fc ff03 	bl	8000558 <__aeabi_f2d>
 8003752:	a311      	add	r3, pc, #68	; (adr r3, 8003798 <LeftBackUltraRange+0xd0>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff56 	bl	8000608 <__aeabi_dmul>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4625      	mov	r5, r4
 8003762:	461c      	mov	r4, r3
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <LeftBackUltraRange+0xe4>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fef6 	bl	8000558 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc ff48 	bl	8000608 <__aeabi_dmul>
 8003778:	4603      	mov	r3, r0
 800377a:	460c      	mov	r4, r1
 800377c:	4618      	mov	r0, r3
 800377e:	4621      	mov	r1, r4
 8003780:	f7fd fa1a 	bl	8000bb8 <__aeabi_d2f>
 8003784:	4602      	mov	r2, r0
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <LeftBackUltraRange+0xe8>)
 8003788:	601a      	str	r2, [r3, #0]
	return distance;
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <LeftBackUltraRange+0xe8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	ee07 3a90 	vmov	s15, r3
}
 8003792:	eeb0 0a67 	vmov.f32	s0, s15
 8003796:	bdb0      	pop	{r4, r5, r7, pc}
 8003798:	66666666 	.word	0x66666666
 800379c:	40066666 	.word	0x40066666
 80037a0:	40020000 	.word	0x40020000
 80037a4:	2000020c 	.word	0x2000020c
 80037a8:	00000000 	.word	0x00000000
 80037ac:	3c8c7e28 	.word	0x3c8c7e28
 80037b0:	20000254 	.word	0x20000254
 80037b4:	00000000 	.word	0x00000000

080037b8 <RightBackUltraRange>:
float RightBackUltraRange(){
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B2TRIG_GPIO_Port, B2TRIG_Pin, GPIO_PIN_RESET);
 80037bc:	2200      	movs	r2, #0
 80037be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c2:	4833      	ldr	r0, [pc, #204]	; (8003890 <RightBackUltraRange+0xd8>)
 80037c4:	f7fd ff08 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(3);
 80037c8:	2003      	movs	r0, #3
 80037ca:	f000 fafb 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(B2TRIG_GPIO_Port, B2TRIG_Pin, GPIO_PIN_SET);
 80037ce:	2201      	movs	r2, #1
 80037d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037d4:	482e      	ldr	r0, [pc, #184]	; (8003890 <RightBackUltraRange+0xd8>)
 80037d6:	f7fd feff 	bl	80015d8 <HAL_GPIO_WritePin>
	usDelay(10);
 80037da:	200a      	movs	r0, #10
 80037dc:	f000 faf2 	bl	8003dc4 <usDelay>
	HAL_GPIO_WritePin(B2TRIG_GPIO_Port, B2TRIG_Pin, GPIO_PIN_RESET);
 80037e0:	2200      	movs	r2, #0
 80037e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037e6:	482a      	ldr	r0, [pc, #168]	; (8003890 <RightBackUltraRange+0xd8>)
 80037e8:	f7fd fef6 	bl	80015d8 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(B2ECHO_GPIO_Port, B2ECHO_Pin)== GPIO_PIN_RESET);
 80037ec:	bf00      	nop
 80037ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f2:	4827      	ldr	r0, [pc, #156]	; (8003890 <RightBackUltraRange+0xd8>)
 80037f4:	f7fd fed8 	bl	80015a8 <HAL_GPIO_ReadPin>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f7      	beq.n	80037ee <RightBackUltraRange+0x36>
	numtick = 0;
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <RightBackUltraRange+0xdc>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(B2ECHO_GPIO_Port, B2ECHO_Pin)== GPIO_PIN_SET)
 8003804:	e007      	b.n	8003816 <RightBackUltraRange+0x5e>
		{
		 numtick++;
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <RightBackUltraRange+0xdc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a21      	ldr	r2, [pc, #132]	; (8003894 <RightBackUltraRange+0xdc>)
 800380e:	6013      	str	r3, [r2, #0]
		 usDelay(2);
 8003810:	2002      	movs	r0, #2
 8003812:	f000 fad7 	bl	8003dc4 <usDelay>
	while(HAL_GPIO_ReadPin(B2ECHO_GPIO_Port, B2ECHO_Pin)== GPIO_PIN_SET)
 8003816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800381a:	481d      	ldr	r0, [pc, #116]	; (8003890 <RightBackUltraRange+0xd8>)
 800381c:	f7fd fec4 	bl	80015a8 <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d0ef      	beq.n	8003806 <RightBackUltraRange+0x4e>
		};
	distance = (numtick+0.0f)*2.8*speedOfSound ;
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <RightBackUltraRange+0xdc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003832:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003898 <RightBackUltraRange+0xe0>
 8003836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800383a:	ee17 0a90 	vmov	r0, s15
 800383e:	f7fc fe8b 	bl	8000558 <__aeabi_f2d>
 8003842:	a311      	add	r3, pc, #68	; (adr r3, 8003888 <RightBackUltraRange+0xd0>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fede 	bl	8000608 <__aeabi_dmul>
 800384c:	4603      	mov	r3, r0
 800384e:	460c      	mov	r4, r1
 8003850:	4625      	mov	r5, r4
 8003852:	461c      	mov	r4, r3
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <RightBackUltraRange+0xe4>)
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe7e 	bl	8000558 <__aeabi_f2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fed0 	bl	8000608 <__aeabi_dmul>
 8003868:	4603      	mov	r3, r0
 800386a:	460c      	mov	r4, r1
 800386c:	4618      	mov	r0, r3
 800386e:	4621      	mov	r1, r4
 8003870:	f7fd f9a2 	bl	8000bb8 <__aeabi_d2f>
 8003874:	4602      	mov	r2, r0
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RightBackUltraRange+0xe8>)
 8003878:	601a      	str	r2, [r3, #0]
	return distance;
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <RightBackUltraRange+0xe8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	ee07 3a90 	vmov	s15, r3
}
 8003882:	eeb0 0a67 	vmov.f32	s0, s15
 8003886:	bdb0      	pop	{r4, r5, r7, pc}
 8003888:	66666666 	.word	0x66666666
 800388c:	40066666 	.word	0x40066666
 8003890:	40020400 	.word	0x40020400
 8003894:	2000020c 	.word	0x2000020c
 8003898:	00000000 	.word	0x00000000
 800389c:	3c8c7e28 	.word	0x3c8c7e28
 80038a0:	20000254 	.word	0x20000254

080038a4 <Park>:
void Park(){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80038a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ac:	f7fd fbc6 	bl	800103c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	4812      	ldr	r0, [pc, #72]	; (8003900 <Park+0x5c>)
 80038b6:	f7fd fe8f 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80038ba:	2201      	movs	r2, #1
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	4810      	ldr	r0, [pc, #64]	; (8003900 <Park+0x5c>)
 80038c0:	f7fd fe8a 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80038c4:	2201      	movs	r2, #1
 80038c6:	2101      	movs	r1, #1
 80038c8:	480e      	ldr	r0, [pc, #56]	; (8003904 <Park+0x60>)
 80038ca:	f7fd fe85 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2102      	movs	r1, #2
 80038d2:	480c      	ldr	r0, [pc, #48]	; (8003904 <Park+0x60>)
 80038d4:	f7fd fe80 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 80038d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80038dc:	f7fd fbae 	bl	800103c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2140      	movs	r1, #64	; 0x40
 80038e4:	4806      	ldr	r0, [pc, #24]	; (8003900 <Park+0x5c>)
 80038e6:	f7fd fe77 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2101      	movs	r1, #1
 80038ee:	4805      	ldr	r0, [pc, #20]	; (8003904 <Park+0x60>)
 80038f0:	f7fd fe72 	bl	80015d8 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80038f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80038f8:	f7fd fba0 	bl	800103c <HAL_Delay>

}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40020000 	.word	0x40020000
 8003904:	40020800 	.word	0x40020800

08003908 <HAL_GPIO_EXTI_Callback>:

int state = 0;
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
	//state = (state  + 1) % 3;

}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003924:	f7fd fb18 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003928:	f000 f836 	bl	8003998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800392c:	f000 f98c 	bl	8003c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003930:	f000 f960 	bl	8003bf4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003934:	f000 f910 	bl	8003b58 <MX_TIM4_Init>
  MX_TIM3_Init();
 8003938:	f000 f898 	bl	8003a6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800393c:	2100      	movs	r1, #0
 800393e:	4812      	ldr	r0, [pc, #72]	; (8003988 <main+0x68>)
 8003940:	f7fe fb4a 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 8003944:	4811      	ldr	r0, [pc, #68]	; (800398c <main+0x6c>)
 8003946:	f7fe faee 	bl	8001f26 <HAL_TIM_Base_Start>
  MotorBegin();
 800394a:	f7ff fc8d 	bl	8003268 <MotorBegin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800394e:	2120      	movs	r1, #32
 8003950:	480f      	ldr	r0, [pc, #60]	; (8003990 <main+0x70>)
 8003952:	f7fd fe5a 	bl	800160a <HAL_GPIO_TogglePin>
	  	  	  if (state == 0)
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <main+0x74>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <main+0x44>
	  	  		  HAL_Delay(100);
 800395e:	2064      	movs	r0, #100	; 0x64
 8003960:	f7fd fb6c 	bl	800103c <HAL_Delay>
	  	  	  if (state == 1)
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <main+0x74>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d103      	bne.n	8003974 <main+0x54>
	  	  		  HAL_Delay(500);
 800396c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003970:	f7fd fb64 	bl	800103c <HAL_Delay>
	  	  	  if (state == 2)
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <main+0x74>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d1e8      	bne.n	800394e <main+0x2e>
	  	  	  	HAL_Delay(2500);
 800397c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003980:	f7fd fb5c 	bl	800103c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003984:	e7e3      	b.n	800394e <main+0x2e>
 8003986:	bf00      	nop
 8003988:	20000258 	.word	0x20000258
 800398c:	20000210 	.word	0x20000210
 8003990:	40020000 	.word	0x40020000
 8003994:	200001f8 	.word	0x200001f8

08003998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b094      	sub	sp, #80	; 0x50
 800399c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399e:	f107 0320 	add.w	r3, r7, #32
 80039a2:	2230      	movs	r2, #48	; 0x30
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc24 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <SystemClock_Config+0xcc>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <SystemClock_Config+0xcc>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6413      	str	r3, [r2, #64]	; 0x40
 80039cc:	4b25      	ldr	r3, [pc, #148]	; (8003a64 <SystemClock_Config+0xcc>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <SystemClock_Config+0xd0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <SystemClock_Config+0xd0>)
 80039e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <SystemClock_Config+0xd0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039f4:	2302      	movs	r3, #2
 80039f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f8:	2301      	movs	r3, #1
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039fc:	2310      	movs	r3, #16
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a00:	2302      	movs	r3, #2
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a04:	2300      	movs	r3, #0
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003a08:	2310      	movs	r3, #16
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003a0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003a12:	2304      	movs	r3, #4
 8003a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a16:	2304      	movs	r3, #4
 8003a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a1a:	f107 0320 	add.w	r3, r7, #32
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fe26 	bl	8001670 <HAL_RCC_OscConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a2a:	f000 f9fd 	bl	8003e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2e:	230f      	movs	r3, #15
 8003a30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a32:	2302      	movs	r3, #2
 8003a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe f852 	bl	8001af4 <HAL_RCC_ClockConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a56:	f000 f9e7 	bl	8003e28 <Error_Handler>
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3750      	adds	r7, #80	; 0x50
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40007000 	.word	0x40007000

08003a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08e      	sub	sp, #56	; 0x38
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a80:	f107 0320 	add.w	r3, r7, #32
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	615a      	str	r2, [r3, #20]
 8003a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003a9e:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <MX_TIM3_Init+0xe8>)
 8003aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8191;
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003ab0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ac2:	4823      	ldr	r0, [pc, #140]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003ac4:	f7fe fa04 	bl	8001ed0 <HAL_TIM_Base_Init>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003ace:	f000 f9ab 	bl	8003e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003adc:	4619      	mov	r1, r3
 8003ade:	481c      	ldr	r0, [pc, #112]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003ae0:	f7fe fc7a 	bl	80023d8 <HAL_TIM_ConfigClockSource>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003aea:	f000 f99d 	bl	8003e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003aee:	4818      	ldr	r0, [pc, #96]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003af0:	f7fe fa3d 	bl	8001f6e <HAL_TIM_PWM_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003afa:	f000 f995 	bl	8003e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b06:	f107 0320 	add.w	r3, r7, #32
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4810      	ldr	r0, [pc, #64]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003b0e:	f7ff f818 	bl	8002b42 <HAL_TIMEx_MasterConfigSynchronization>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b18:	f000 f986 	bl	8003e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b1c:	2360      	movs	r3, #96	; 0x60
 8003b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4619      	mov	r1, r3
 8003b32:	4807      	ldr	r0, [pc, #28]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003b34:	f7fe fb8a 	bl	800224c <HAL_TIM_PWM_ConfigChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003b3e:	f000 f973 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b42:	4803      	ldr	r0, [pc, #12]	; (8003b50 <MX_TIM3_Init+0xe4>)
 8003b44:	f000 f9de 	bl	8003f04 <HAL_TIM_MspPostInit>

}
 8003b48:	bf00      	nop
 8003b4a:	3738      	adds	r7, #56	; 0x38
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000258 	.word	0x20000258
 8003b54:	40000400 	.word	0x40000400

08003b58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <MX_TIM4_Init+0x98>)
 8003b78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b7c:	2253      	movs	r2, #83	; 0x53
 8003b7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b94:	4b15      	ldr	r3, [pc, #84]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b9a:	4814      	ldr	r0, [pc, #80]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b9c:	f7fe f998 	bl	8001ed0 <HAL_TIM_Base_Init>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003ba6:	f000 f93f 	bl	8003e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003bb0:	f107 0308 	add.w	r3, r7, #8
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480d      	ldr	r0, [pc, #52]	; (8003bec <MX_TIM4_Init+0x94>)
 8003bb8:	f7fe fc0e 	bl	80023d8 <HAL_TIM_ConfigClockSource>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003bc2:	f000 f931 	bl	8003e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <MX_TIM4_Init+0x94>)
 8003bd4:	f7fe ffb5 	bl	8002b42 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003bde:	f000 f923 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000210 	.word	0x20000210
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <MX_USART2_UART_Init+0x50>)
 8003bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c1a:	220c      	movs	r2, #12
 8003c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <MX_USART2_UART_Init+0x4c>)
 8003c2c:	f7fe ffe2 	bl	8002bf4 <HAL_UART_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c36:	f000 f8f7 	bl	8003e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000304 	.word	0x20000304
 8003c44:	40004400 	.word	0x40004400

08003c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a4b      	ldr	r2, [pc, #300]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	4b45      	ldr	r3, [pc, #276]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a44      	ldr	r2, [pc, #272]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a3d      	ldr	r2, [pc, #244]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <MX_GPIO_Init+0x168>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2103      	movs	r1, #3
 8003cd2:	4838      	ldr	r0, [pc, #224]	; (8003db4 <MX_GPIO_Init+0x16c>)
 8003cd4:	f7fd fc80 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|TRIG_Pin 
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8003cde:	4836      	ldr	r0, [pc, #216]	; (8003db8 <MX_GPIO_Init+0x170>)
 8003ce0:	f7fd fc7a 	bl	80015d8 <HAL_GPIO_WritePin>
                          |B1TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B2TRIG_GPIO_Port, B2TRIG_Pin, GPIO_PIN_RESET);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cea:	4834      	ldr	r0, [pc, #208]	; (8003dbc <MX_GPIO_Init+0x174>)
 8003cec:	f7fd fc74 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cf6:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <MX_GPIO_Init+0x178>)
 8003cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	482b      	ldr	r0, [pc, #172]	; (8003db4 <MX_GPIO_Init+0x16c>)
 8003d06:	f7fd facd 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4824      	ldr	r0, [pc, #144]	; (8003db4 <MX_GPIO_Init+0x16c>)
 8003d22:	f7fd fabf 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 TRIG_Pin 
                           B1TRIG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|TRIG_Pin 
 8003d26:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
 8003d2a:	617b      	str	r3, [r7, #20]
                          |B1TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	481e      	ldr	r0, [pc, #120]	; (8003db8 <MX_GPIO_Init+0x170>)
 8003d40:	f7fd fab0 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2TRIG_Pin */
  GPIO_InitStruct.Pin = B2TRIG_Pin;
 8003d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B2TRIG_GPIO_Port, &GPIO_InitStruct);
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4817      	ldr	r0, [pc, #92]	; (8003dbc <MX_GPIO_Init+0x174>)
 8003d5e:	f7fd faa1 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2ECHO_Pin */
  GPIO_InitStruct.Pin = B2ECHO_Pin;
 8003d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2ECHO_GPIO_Port, &GPIO_InitStruct);
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	4619      	mov	r1, r3
 8003d76:	4811      	ldr	r0, [pc, #68]	; (8003dbc <MX_GPIO_Init+0x174>)
 8003d78:	f7fd fa94 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECHO_Pin B1ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|B1ECHO_Pin;
 8003d7c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4809      	ldr	r0, [pc, #36]	; (8003db8 <MX_GPIO_Init+0x170>)
 8003d92:	f7fd fa87 	bl	80012a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2028      	movs	r0, #40	; 0x28
 8003d9c:	f7fd fa4b 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003da0:	2028      	movs	r0, #40	; 0x28
 8003da2:	f7fd fa64 	bl	800126e <HAL_NVIC_EnableIRQ>

}
 8003da6:	bf00      	nop
 8003da8:	3728      	adds	r7, #40	; 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	10210000 	.word	0x10210000

08003dc4 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t usec)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	if(usec < 2) usec =2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d801      	bhi.n	8003dd6 <usDelay+0x12>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	607b      	str	r3, [r7, #4]
	usTIM ->ARR = usec - 1;
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <usDelay+0x60>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM ->EGR = 1;
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <usDelay+0x60>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	615a      	str	r2, [r3, #20]
	usTIM ->SR &= ~1;
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <usDelay+0x60>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <usDelay+0x60>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6113      	str	r3, [r2, #16]
	usTIM ->CR1 |= 1 ;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <usDelay+0x60>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <usDelay+0x60>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]
	while((usTIM ->SR&0x0001)!= 1);
 8003dfc:	bf00      	nop
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <usDelay+0x60>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d1f9      	bne.n	8003dfe <usDelay+0x3a>
	usTIM -> SR &= ~(0x0001);
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <usDelay+0x60>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <usDelay+0x60>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6113      	str	r3, [r2, #16]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40000800 	.word	0x40000800

08003e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_MspInit+0x4c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003e76:	2007      	movs	r0, #7
 8003e78:	f7fd f9d2 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800

08003e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_TIM_Base_MspInit+0x70>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d116      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b17      	ldr	r3, [pc, #92]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	201d      	movs	r0, #29
 8003ebc:	f7fd f9bb 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ec0:	201d      	movs	r0, #29
 8003ec2:	f7fd f9d4 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ec6:	e012      	b.n	8003eee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <HAL_TIM_Base_MspInit+0x78>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10d      	bne.n	8003eee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_TIM_Base_MspInit+0x74>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40000800 	.word	0x40000800

08003f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <HAL_TIM_MspPostInit+0x68>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d11d      	bne.n	8003f62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_TIM_MspPostInit+0x6c>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_TIM_MspPostInit+0x6c>)
 8003f30:	f043 0304 	orr.w	r3, r3, #4
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_TIM_MspPostInit+0x6c>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f52:	2302      	movs	r3, #2
 8003f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4805      	ldr	r0, [pc, #20]	; (8003f74 <HAL_TIM_MspPostInit+0x70>)
 8003f5e:	f7fd f9a1 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f62:	bf00      	nop
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020800 	.word	0x40020800

08003f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HAL_UART_MspInit+0x84>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d12b      	bne.n	8003ff2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_UART_MspInit+0x88>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fe2:	2307      	movs	r3, #7
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	4619      	mov	r1, r3
 8003fec:	4805      	ldr	r0, [pc, #20]	; (8004004 <HAL_UART_MspInit+0x8c>)
 8003fee:	f7fd f959 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ff2:	bf00      	nop
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40023800 	.word	0x40023800
 8004004:	40020000 	.word	0x40020000

08004008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800401a:	e7fe      	b.n	800401a <HardFault_Handler+0x4>

0800401c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004020:	e7fe      	b.n	8004020 <MemManage_Handler+0x4>

08004022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004026:	e7fe      	b.n	8004026 <BusFault_Handler+0x4>

08004028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800402c:	e7fe      	b.n	800402c <UsageFault_Handler+0x4>

0800402e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800405c:	f7fc ffce 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}

08004064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004068:	4802      	ldr	r0, [pc, #8]	; (8004074 <TIM3_IRQHandler+0x10>)
 800406a:	f7fd ffe7 	bl	800203c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000258 	.word	0x20000258

08004078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800407c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004080:	f7fd fade 	bl	8001640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}

08004088 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <_sbrk+0x50>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <_sbrk+0x16>
		heap_end = &end;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <_sbrk+0x50>)
 800409a:	4a10      	ldr	r2, [pc, #64]	; (80040dc <_sbrk+0x54>)
 800409c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <_sbrk+0x50>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <_sbrk+0x50>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	466a      	mov	r2, sp
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d907      	bls.n	80040c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80040b2:	f000 f875 	bl	80041a0 <__errno>
 80040b6:	4602      	mov	r2, r0
 80040b8:	230c      	movs	r3, #12
 80040ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040c0:	e006      	b.n	80040d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <_sbrk+0x50>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <_sbrk+0x50>)
 80040cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80040ce:	68fb      	ldr	r3, [r7, #12]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200001fc 	.word	0x200001fc
 80040dc:	20000350 	.word	0x20000350

080040e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <SystemInit+0x60>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <SystemInit+0x60>)
 80040ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <SystemInit+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <SystemInit+0x64>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004100:	4b10      	ldr	r3, [pc, #64]	; (8004144 <SystemInit+0x64>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <SystemInit+0x64>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <SystemInit+0x64>)
 800410c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <SystemInit+0x64>)
 8004118:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <SystemInit+0x68>)
 800411a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <SystemInit+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a08      	ldr	r2, [pc, #32]	; (8004144 <SystemInit+0x64>)
 8004122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004126:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <SystemInit+0x64>)
 800412a:	2200      	movs	r2, #0
 800412c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <SystemInit+0x60>)
 8004130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004134:	609a      	str	r2, [r3, #8]
#endif
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000ed00 	.word	0xe000ed00
 8004144:	40023800 	.word	0x40023800
 8004148:	24003010 	.word	0x24003010

0800414c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800414c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004152:	e003      	b.n	800415c <LoopCopyDataInit>

08004154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800415a:	3104      	adds	r1, #4

0800415c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004164:	d3f6      	bcc.n	8004154 <CopyDataInit>
  ldr  r2, =_sbss
 8004166:	4a0b      	ldr	r2, [pc, #44]	; (8004194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004168:	e002      	b.n	8004170 <LoopFillZerobss>

0800416a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800416a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800416c:	f842 3b04 	str.w	r3, [r2], #4

08004170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004174:	d3f9      	bcc.n	800416a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004176:	f7ff ffb3 	bl	80040e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800417a:	f000 f817 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800417e:	f7ff fbcf 	bl	8003920 <main>
  bx  lr    
 8004182:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004184:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004188:	080065b0 	.word	0x080065b0
  ldr  r0, =_sdata
 800418c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004190:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004194:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8004198:	2000034c 	.word	0x2000034c

0800419c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800419c:	e7fe      	b.n	800419c <ADC_IRQHandler>
	...

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4e0d      	ldr	r6, [pc, #52]	; (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	; (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1ba4      	subs	r4, r4, r6
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2500      	movs	r5, #0
 80041b8:	42a5      	cmp	r5, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4e0b      	ldr	r6, [pc, #44]	; (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	; (80041f0 <__libc_init_array+0x44>)
 80041c0:	f002 f85e 	bl	8006280 <_init>
 80041c4:	1ba4      	subs	r4, r4, r6
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2500      	movs	r5, #0
 80041ca:	42a5      	cmp	r5, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041d4:	4798      	blx	r3
 80041d6:	3501      	adds	r5, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041de:	4798      	blx	r3
 80041e0:	3501      	adds	r5, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	080065a8 	.word	0x080065a8
 80041e8:	080065a8 	.word	0x080065a8
 80041ec:	080065a8 	.word	0x080065a8
 80041f0:	080065ac 	.word	0x080065ac

080041f4 <memset>:
 80041f4:	4402      	add	r2, r0
 80041f6:	4603      	mov	r3, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <__cvt>:
 8004204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004208:	ec55 4b10 	vmov	r4, r5, d0
 800420c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800420e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004212:	2d00      	cmp	r5, #0
 8004214:	460e      	mov	r6, r1
 8004216:	4691      	mov	r9, r2
 8004218:	4619      	mov	r1, r3
 800421a:	bfb8      	it	lt
 800421c:	4622      	movlt	r2, r4
 800421e:	462b      	mov	r3, r5
 8004220:	f027 0720 	bic.w	r7, r7, #32
 8004224:	bfbb      	ittet	lt
 8004226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800422a:	461d      	movlt	r5, r3
 800422c:	2300      	movge	r3, #0
 800422e:	232d      	movlt	r3, #45	; 0x2d
 8004230:	bfb8      	it	lt
 8004232:	4614      	movlt	r4, r2
 8004234:	2f46      	cmp	r7, #70	; 0x46
 8004236:	700b      	strb	r3, [r1, #0]
 8004238:	d004      	beq.n	8004244 <__cvt+0x40>
 800423a:	2f45      	cmp	r7, #69	; 0x45
 800423c:	d100      	bne.n	8004240 <__cvt+0x3c>
 800423e:	3601      	adds	r6, #1
 8004240:	2102      	movs	r1, #2
 8004242:	e000      	b.n	8004246 <__cvt+0x42>
 8004244:	2103      	movs	r1, #3
 8004246:	ab03      	add	r3, sp, #12
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	ab02      	add	r3, sp, #8
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4632      	mov	r2, r6
 8004250:	4653      	mov	r3, sl
 8004252:	ec45 4b10 	vmov	d0, r4, r5
 8004256:	f000 fcdf 	bl	8004c18 <_dtoa_r>
 800425a:	2f47      	cmp	r7, #71	; 0x47
 800425c:	4680      	mov	r8, r0
 800425e:	d102      	bne.n	8004266 <__cvt+0x62>
 8004260:	f019 0f01 	tst.w	r9, #1
 8004264:	d026      	beq.n	80042b4 <__cvt+0xb0>
 8004266:	2f46      	cmp	r7, #70	; 0x46
 8004268:	eb08 0906 	add.w	r9, r8, r6
 800426c:	d111      	bne.n	8004292 <__cvt+0x8e>
 800426e:	f898 3000 	ldrb.w	r3, [r8]
 8004272:	2b30      	cmp	r3, #48	; 0x30
 8004274:	d10a      	bne.n	800428c <__cvt+0x88>
 8004276:	2200      	movs	r2, #0
 8004278:	2300      	movs	r3, #0
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f7fc fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004282:	b918      	cbnz	r0, 800428c <__cvt+0x88>
 8004284:	f1c6 0601 	rsb	r6, r6, #1
 8004288:	f8ca 6000 	str.w	r6, [sl]
 800428c:	f8da 3000 	ldr.w	r3, [sl]
 8004290:	4499      	add	r9, r3
 8004292:	2200      	movs	r2, #0
 8004294:	2300      	movs	r3, #0
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fc fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800429e:	b938      	cbnz	r0, 80042b0 <__cvt+0xac>
 80042a0:	2230      	movs	r2, #48	; 0x30
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	454b      	cmp	r3, r9
 80042a6:	d205      	bcs.n	80042b4 <__cvt+0xb0>
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	9103      	str	r1, [sp, #12]
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e7f8      	b.n	80042a2 <__cvt+0x9e>
 80042b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042b8:	eba3 0308 	sub.w	r3, r3, r8
 80042bc:	4640      	mov	r0, r8
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	b004      	add	sp, #16
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080042c6 <__exponent>:
 80042c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c8:	2900      	cmp	r1, #0
 80042ca:	4604      	mov	r4, r0
 80042cc:	bfba      	itte	lt
 80042ce:	4249      	neglt	r1, r1
 80042d0:	232d      	movlt	r3, #45	; 0x2d
 80042d2:	232b      	movge	r3, #43	; 0x2b
 80042d4:	2909      	cmp	r1, #9
 80042d6:	f804 2b02 	strb.w	r2, [r4], #2
 80042da:	7043      	strb	r3, [r0, #1]
 80042dc:	dd20      	ble.n	8004320 <__exponent+0x5a>
 80042de:	f10d 0307 	add.w	r3, sp, #7
 80042e2:	461f      	mov	r7, r3
 80042e4:	260a      	movs	r6, #10
 80042e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80042ea:	fb06 1115 	mls	r1, r6, r5, r1
 80042ee:	3130      	adds	r1, #48	; 0x30
 80042f0:	2d09      	cmp	r5, #9
 80042f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80042f6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80042fa:	4629      	mov	r1, r5
 80042fc:	dc09      	bgt.n	8004312 <__exponent+0x4c>
 80042fe:	3130      	adds	r1, #48	; 0x30
 8004300:	3b02      	subs	r3, #2
 8004302:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004306:	42bb      	cmp	r3, r7
 8004308:	4622      	mov	r2, r4
 800430a:	d304      	bcc.n	8004316 <__exponent+0x50>
 800430c:	1a10      	subs	r0, r2, r0
 800430e:	b003      	add	sp, #12
 8004310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004312:	4613      	mov	r3, r2
 8004314:	e7e7      	b.n	80042e6 <__exponent+0x20>
 8004316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431a:	f804 2b01 	strb.w	r2, [r4], #1
 800431e:	e7f2      	b.n	8004306 <__exponent+0x40>
 8004320:	2330      	movs	r3, #48	; 0x30
 8004322:	4419      	add	r1, r3
 8004324:	7083      	strb	r3, [r0, #2]
 8004326:	1d02      	adds	r2, r0, #4
 8004328:	70c1      	strb	r1, [r0, #3]
 800432a:	e7ef      	b.n	800430c <__exponent+0x46>

0800432c <_printf_float>:
 800432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004330:	b08d      	sub	sp, #52	; 0x34
 8004332:	460c      	mov	r4, r1
 8004334:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004338:	4616      	mov	r6, r2
 800433a:	461f      	mov	r7, r3
 800433c:	4605      	mov	r5, r0
 800433e:	f001 fa23 	bl	8005788 <_localeconv_r>
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fb ff4a 	bl	80001e0 <strlen>
 800434c:	2300      	movs	r3, #0
 800434e:	930a      	str	r3, [sp, #40]	; 0x28
 8004350:	f8d8 3000 	ldr.w	r3, [r8]
 8004354:	9005      	str	r0, [sp, #20]
 8004356:	3307      	adds	r3, #7
 8004358:	f023 0307 	bic.w	r3, r3, #7
 800435c:	f103 0208 	add.w	r2, r3, #8
 8004360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004364:	f8d4 b000 	ldr.w	fp, [r4]
 8004368:	f8c8 2000 	str.w	r2, [r8]
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004374:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004378:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800437c:	9307      	str	r3, [sp, #28]
 800437e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004386:	4ba7      	ldr	r3, [pc, #668]	; (8004624 <_printf_float+0x2f8>)
 8004388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800438c:	f7fc fbd6 	bl	8000b3c <__aeabi_dcmpun>
 8004390:	bb70      	cbnz	r0, 80043f0 <_printf_float+0xc4>
 8004392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004396:	4ba3      	ldr	r3, [pc, #652]	; (8004624 <_printf_float+0x2f8>)
 8004398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800439c:	f7fc fbb0 	bl	8000b00 <__aeabi_dcmple>
 80043a0:	bb30      	cbnz	r0, 80043f0 <_printf_float+0xc4>
 80043a2:	2200      	movs	r2, #0
 80043a4:	2300      	movs	r3, #0
 80043a6:	4640      	mov	r0, r8
 80043a8:	4649      	mov	r1, r9
 80043aa:	f7fc fb9f 	bl	8000aec <__aeabi_dcmplt>
 80043ae:	b110      	cbz	r0, 80043b6 <_printf_float+0x8a>
 80043b0:	232d      	movs	r3, #45	; 0x2d
 80043b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b6:	4a9c      	ldr	r2, [pc, #624]	; (8004628 <_printf_float+0x2fc>)
 80043b8:	4b9c      	ldr	r3, [pc, #624]	; (800462c <_printf_float+0x300>)
 80043ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80043be:	bf8c      	ite	hi
 80043c0:	4690      	movhi	r8, r2
 80043c2:	4698      	movls	r8, r3
 80043c4:	2303      	movs	r3, #3
 80043c6:	f02b 0204 	bic.w	r2, fp, #4
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	6022      	str	r2, [r4, #0]
 80043ce:	f04f 0900 	mov.w	r9, #0
 80043d2:	9700      	str	r7, [sp, #0]
 80043d4:	4633      	mov	r3, r6
 80043d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80043d8:	4621      	mov	r1, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f9e6 	bl	80047ac <_printf_common>
 80043e0:	3001      	adds	r0, #1
 80043e2:	f040 808d 	bne.w	8004500 <_printf_float+0x1d4>
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ea:	b00d      	add	sp, #52	; 0x34
 80043ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	4640      	mov	r0, r8
 80043f6:	4649      	mov	r1, r9
 80043f8:	f7fc fba0 	bl	8000b3c <__aeabi_dcmpun>
 80043fc:	b110      	cbz	r0, 8004404 <_printf_float+0xd8>
 80043fe:	4a8c      	ldr	r2, [pc, #560]	; (8004630 <_printf_float+0x304>)
 8004400:	4b8c      	ldr	r3, [pc, #560]	; (8004634 <_printf_float+0x308>)
 8004402:	e7da      	b.n	80043ba <_printf_float+0x8e>
 8004404:	6861      	ldr	r1, [r4, #4]
 8004406:	1c4b      	adds	r3, r1, #1
 8004408:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800440c:	a80a      	add	r0, sp, #40	; 0x28
 800440e:	d13e      	bne.n	800448e <_printf_float+0x162>
 8004410:	2306      	movs	r3, #6
 8004412:	6063      	str	r3, [r4, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800441a:	ab09      	add	r3, sp, #36	; 0x24
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	ec49 8b10 	vmov	d0, r8, r9
 8004422:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004426:	6022      	str	r2, [r4, #0]
 8004428:	f8cd a004 	str.w	sl, [sp, #4]
 800442c:	6861      	ldr	r1, [r4, #4]
 800442e:	4628      	mov	r0, r5
 8004430:	f7ff fee8 	bl	8004204 <__cvt>
 8004434:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004438:	2b47      	cmp	r3, #71	; 0x47
 800443a:	4680      	mov	r8, r0
 800443c:	d109      	bne.n	8004452 <_printf_float+0x126>
 800443e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004440:	1cd8      	adds	r0, r3, #3
 8004442:	db02      	blt.n	800444a <_printf_float+0x11e>
 8004444:	6862      	ldr	r2, [r4, #4]
 8004446:	4293      	cmp	r3, r2
 8004448:	dd47      	ble.n	80044da <_printf_float+0x1ae>
 800444a:	f1aa 0a02 	sub.w	sl, sl, #2
 800444e:	fa5f fa8a 	uxtb.w	sl, sl
 8004452:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004458:	d824      	bhi.n	80044a4 <_printf_float+0x178>
 800445a:	3901      	subs	r1, #1
 800445c:	4652      	mov	r2, sl
 800445e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004462:	9109      	str	r1, [sp, #36]	; 0x24
 8004464:	f7ff ff2f 	bl	80042c6 <__exponent>
 8004468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800446a:	1813      	adds	r3, r2, r0
 800446c:	2a01      	cmp	r2, #1
 800446e:	4681      	mov	r9, r0
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	dc02      	bgt.n	800447a <_printf_float+0x14e>
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	07d1      	lsls	r1, r2, #31
 8004478:	d501      	bpl.n	800447e <_printf_float+0x152>
 800447a:	3301      	adds	r3, #1
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0a5      	beq.n	80043d2 <_printf_float+0xa6>
 8004486:	232d      	movs	r3, #45	; 0x2d
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	e7a1      	b.n	80043d2 <_printf_float+0xa6>
 800448e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004492:	f000 8177 	beq.w	8004784 <_printf_float+0x458>
 8004496:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800449a:	d1bb      	bne.n	8004414 <_printf_float+0xe8>
 800449c:	2900      	cmp	r1, #0
 800449e:	d1b9      	bne.n	8004414 <_printf_float+0xe8>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e7b6      	b.n	8004412 <_printf_float+0xe6>
 80044a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80044a8:	d119      	bne.n	80044de <_printf_float+0x1b2>
 80044aa:	2900      	cmp	r1, #0
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	dd0c      	ble.n	80044ca <_printf_float+0x19e>
 80044b0:	6121      	str	r1, [r4, #16]
 80044b2:	b913      	cbnz	r3, 80044ba <_printf_float+0x18e>
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	07d2      	lsls	r2, r2, #31
 80044b8:	d502      	bpl.n	80044c0 <_printf_float+0x194>
 80044ba:	3301      	adds	r3, #1
 80044bc:	440b      	add	r3, r1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80044c4:	f04f 0900 	mov.w	r9, #0
 80044c8:	e7d9      	b.n	800447e <_printf_float+0x152>
 80044ca:	b913      	cbnz	r3, 80044d2 <_printf_float+0x1a6>
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	07d0      	lsls	r0, r2, #31
 80044d0:	d501      	bpl.n	80044d6 <_printf_float+0x1aa>
 80044d2:	3302      	adds	r3, #2
 80044d4:	e7f3      	b.n	80044be <_printf_float+0x192>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e7f1      	b.n	80044be <_printf_float+0x192>
 80044da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80044de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80044e2:	4293      	cmp	r3, r2
 80044e4:	db05      	blt.n	80044f2 <_printf_float+0x1c6>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	07d1      	lsls	r1, r2, #31
 80044ec:	d5e8      	bpl.n	80044c0 <_printf_float+0x194>
 80044ee:	3301      	adds	r3, #1
 80044f0:	e7e5      	b.n	80044be <_printf_float+0x192>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfd4      	ite	le
 80044f6:	f1c3 0302 	rsble	r3, r3, #2
 80044fa:	2301      	movgt	r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	e7de      	b.n	80044be <_printf_float+0x192>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	055a      	lsls	r2, r3, #21
 8004504:	d407      	bmi.n	8004516 <_printf_float+0x1ea>
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	4642      	mov	r2, r8
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	d12b      	bne.n	800456c <_printf_float+0x240>
 8004514:	e767      	b.n	80043e6 <_printf_float+0xba>
 8004516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800451a:	f240 80dc 	bls.w	80046d6 <_printf_float+0x3aa>
 800451e:	2200      	movs	r2, #0
 8004520:	2300      	movs	r3, #0
 8004522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004526:	f7fc fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800452a:	2800      	cmp	r0, #0
 800452c:	d033      	beq.n	8004596 <_printf_float+0x26a>
 800452e:	2301      	movs	r3, #1
 8004530:	4a41      	ldr	r2, [pc, #260]	; (8004638 <_printf_float+0x30c>)
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	f43f af54 	beq.w	80043e6 <_printf_float+0xba>
 800453e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	db02      	blt.n	800454c <_printf_float+0x220>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	07d8      	lsls	r0, r3, #31
 800454a:	d50f      	bpl.n	800456c <_printf_float+0x240>
 800454c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f af45 	beq.w	80043e6 <_printf_float+0xba>
 800455c:	f04f 0800 	mov.w	r8, #0
 8004560:	f104 091a 	add.w	r9, r4, #26
 8004564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	4543      	cmp	r3, r8
 800456a:	dc09      	bgt.n	8004580 <_printf_float+0x254>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	079b      	lsls	r3, r3, #30
 8004570:	f100 8103 	bmi.w	800477a <_printf_float+0x44e>
 8004574:	68e0      	ldr	r0, [r4, #12]
 8004576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004578:	4298      	cmp	r0, r3
 800457a:	bfb8      	it	lt
 800457c:	4618      	movlt	r0, r3
 800457e:	e734      	b.n	80043ea <_printf_float+0xbe>
 8004580:	2301      	movs	r3, #1
 8004582:	464a      	mov	r2, r9
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	f43f af2b 	beq.w	80043e6 <_printf_float+0xba>
 8004590:	f108 0801 	add.w	r8, r8, #1
 8004594:	e7e6      	b.n	8004564 <_printf_float+0x238>
 8004596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	dc2b      	bgt.n	80045f4 <_printf_float+0x2c8>
 800459c:	2301      	movs	r3, #1
 800459e:	4a26      	ldr	r2, [pc, #152]	; (8004638 <_printf_float+0x30c>)
 80045a0:	4631      	mov	r1, r6
 80045a2:	4628      	mov	r0, r5
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	f43f af1d 	beq.w	80043e6 <_printf_float+0xba>
 80045ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ae:	b923      	cbnz	r3, 80045ba <_printf_float+0x28e>
 80045b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b2:	b913      	cbnz	r3, 80045ba <_printf_float+0x28e>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07d9      	lsls	r1, r3, #31
 80045b8:	d5d8      	bpl.n	800456c <_printf_float+0x240>
 80045ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	f43f af0e 	beq.w	80043e6 <_printf_float+0xba>
 80045ca:	f04f 0900 	mov.w	r9, #0
 80045ce:	f104 0a1a 	add.w	sl, r4, #26
 80045d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d4:	425b      	negs	r3, r3
 80045d6:	454b      	cmp	r3, r9
 80045d8:	dc01      	bgt.n	80045de <_printf_float+0x2b2>
 80045da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045dc:	e794      	b.n	8004508 <_printf_float+0x1dc>
 80045de:	2301      	movs	r3, #1
 80045e0:	4652      	mov	r2, sl
 80045e2:	4631      	mov	r1, r6
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b8      	blx	r7
 80045e8:	3001      	adds	r0, #1
 80045ea:	f43f aefc 	beq.w	80043e6 <_printf_float+0xba>
 80045ee:	f109 0901 	add.w	r9, r9, #1
 80045f2:	e7ee      	b.n	80045d2 <_printf_float+0x2a6>
 80045f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bfa8      	it	ge
 80045fc:	461a      	movge	r2, r3
 80045fe:	2a00      	cmp	r2, #0
 8004600:	4691      	mov	r9, r2
 8004602:	dd07      	ble.n	8004614 <_printf_float+0x2e8>
 8004604:	4613      	mov	r3, r2
 8004606:	4631      	mov	r1, r6
 8004608:	4642      	mov	r2, r8
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f aee9 	beq.w	80043e6 <_printf_float+0xba>
 8004614:	f104 031a 	add.w	r3, r4, #26
 8004618:	f04f 0b00 	mov.w	fp, #0
 800461c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004620:	9306      	str	r3, [sp, #24]
 8004622:	e015      	b.n	8004650 <_printf_float+0x324>
 8004624:	7fefffff 	.word	0x7fefffff
 8004628:	08006348 	.word	0x08006348
 800462c:	08006344 	.word	0x08006344
 8004630:	08006350 	.word	0x08006350
 8004634:	0800634c 	.word	0x0800634c
 8004638:	08006354 	.word	0x08006354
 800463c:	2301      	movs	r3, #1
 800463e:	9a06      	ldr	r2, [sp, #24]
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f aecd 	beq.w	80043e6 <_printf_float+0xba>
 800464c:	f10b 0b01 	add.w	fp, fp, #1
 8004650:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004654:	ebaa 0309 	sub.w	r3, sl, r9
 8004658:	455b      	cmp	r3, fp
 800465a:	dcef      	bgt.n	800463c <_printf_float+0x310>
 800465c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004660:	429a      	cmp	r2, r3
 8004662:	44d0      	add	r8, sl
 8004664:	db15      	blt.n	8004692 <_printf_float+0x366>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	07da      	lsls	r2, r3, #31
 800466a:	d412      	bmi.n	8004692 <_printf_float+0x366>
 800466c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004670:	eba3 020a 	sub.w	r2, r3, sl
 8004674:	eba3 0a01 	sub.w	sl, r3, r1
 8004678:	4592      	cmp	sl, r2
 800467a:	bfa8      	it	ge
 800467c:	4692      	movge	sl, r2
 800467e:	f1ba 0f00 	cmp.w	sl, #0
 8004682:	dc0e      	bgt.n	80046a2 <_printf_float+0x376>
 8004684:	f04f 0800 	mov.w	r8, #0
 8004688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800468c:	f104 091a 	add.w	r9, r4, #26
 8004690:	e019      	b.n	80046c6 <_printf_float+0x39a>
 8004692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	d1e5      	bne.n	800466c <_printf_float+0x340>
 80046a0:	e6a1      	b.n	80043e6 <_printf_float+0xba>
 80046a2:	4653      	mov	r3, sl
 80046a4:	4642      	mov	r2, r8
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	d1e9      	bne.n	8004684 <_printf_float+0x358>
 80046b0:	e699      	b.n	80043e6 <_printf_float+0xba>
 80046b2:	2301      	movs	r3, #1
 80046b4:	464a      	mov	r2, r9
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f ae92 	beq.w	80043e6 <_printf_float+0xba>
 80046c2:	f108 0801 	add.w	r8, r8, #1
 80046c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	eba3 030a 	sub.w	r3, r3, sl
 80046d0:	4543      	cmp	r3, r8
 80046d2:	dcee      	bgt.n	80046b2 <_printf_float+0x386>
 80046d4:	e74a      	b.n	800456c <_printf_float+0x240>
 80046d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046d8:	2a01      	cmp	r2, #1
 80046da:	dc01      	bgt.n	80046e0 <_printf_float+0x3b4>
 80046dc:	07db      	lsls	r3, r3, #31
 80046de:	d53a      	bpl.n	8004756 <_printf_float+0x42a>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4642      	mov	r2, r8
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	f43f ae7b 	beq.w	80043e6 <_printf_float+0xba>
 80046f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f108 0801 	add.w	r8, r8, #1
 8004700:	f43f ae71 	beq.w	80043e6 <_printf_float+0xba>
 8004704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004706:	2200      	movs	r2, #0
 8004708:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800470c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004710:	2300      	movs	r3, #0
 8004712:	f7fc f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004716:	b9c8      	cbnz	r0, 800474c <_printf_float+0x420>
 8004718:	4653      	mov	r3, sl
 800471a:	4642      	mov	r2, r8
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d10e      	bne.n	8004744 <_printf_float+0x418>
 8004726:	e65e      	b.n	80043e6 <_printf_float+0xba>
 8004728:	2301      	movs	r3, #1
 800472a:	4652      	mov	r2, sl
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	f43f ae57 	beq.w	80043e6 <_printf_float+0xba>
 8004738:	f108 0801 	add.w	r8, r8, #1
 800473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	4543      	cmp	r3, r8
 8004742:	dcf1      	bgt.n	8004728 <_printf_float+0x3fc>
 8004744:	464b      	mov	r3, r9
 8004746:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800474a:	e6de      	b.n	800450a <_printf_float+0x1de>
 800474c:	f04f 0800 	mov.w	r8, #0
 8004750:	f104 0a1a 	add.w	sl, r4, #26
 8004754:	e7f2      	b.n	800473c <_printf_float+0x410>
 8004756:	2301      	movs	r3, #1
 8004758:	e7df      	b.n	800471a <_printf_float+0x3ee>
 800475a:	2301      	movs	r3, #1
 800475c:	464a      	mov	r2, r9
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae3e 	beq.w	80043e6 <_printf_float+0xba>
 800476a:	f108 0801 	add.w	r8, r8, #1
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	4543      	cmp	r3, r8
 8004776:	dcf0      	bgt.n	800475a <_printf_float+0x42e>
 8004778:	e6fc      	b.n	8004574 <_printf_float+0x248>
 800477a:	f04f 0800 	mov.w	r8, #0
 800477e:	f104 0919 	add.w	r9, r4, #25
 8004782:	e7f4      	b.n	800476e <_printf_float+0x442>
 8004784:	2900      	cmp	r1, #0
 8004786:	f43f ae8b 	beq.w	80044a0 <_printf_float+0x174>
 800478a:	2300      	movs	r3, #0
 800478c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004790:	ab09      	add	r3, sp, #36	; 0x24
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	ec49 8b10 	vmov	d0, r8, r9
 8004798:	6022      	str	r2, [r4, #0]
 800479a:	f8cd a004 	str.w	sl, [sp, #4]
 800479e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047a2:	4628      	mov	r0, r5
 80047a4:	f7ff fd2e 	bl	8004204 <__cvt>
 80047a8:	4680      	mov	r8, r0
 80047aa:	e648      	b.n	800443e <_printf_float+0x112>

080047ac <_printf_common>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	4691      	mov	r9, r2
 80047b2:	461f      	mov	r7, r3
 80047b4:	688a      	ldr	r2, [r1, #8]
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfb8      	it	lt
 80047c0:	4613      	movlt	r3, r2
 80047c2:	f8c9 3000 	str.w	r3, [r9]
 80047c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ca:	4606      	mov	r6, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	b112      	cbz	r2, 80047d6 <_printf_common+0x2a>
 80047d0:	3301      	adds	r3, #1
 80047d2:	f8c9 3000 	str.w	r3, [r9]
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	0699      	lsls	r1, r3, #26
 80047da:	bf42      	ittt	mi
 80047dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047e0:	3302      	addmi	r3, #2
 80047e2:	f8c9 3000 	strmi.w	r3, [r9]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	f015 0506 	ands.w	r5, r5, #6
 80047ec:	d107      	bne.n	80047fe <_printf_common+0x52>
 80047ee:	f104 0a19 	add.w	sl, r4, #25
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	f8d9 2000 	ldr.w	r2, [r9]
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	42ab      	cmp	r3, r5
 80047fc:	dc28      	bgt.n	8004850 <_printf_common+0xa4>
 80047fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	3300      	adds	r3, #0
 8004806:	bf18      	it	ne
 8004808:	2301      	movne	r3, #1
 800480a:	0692      	lsls	r2, r2, #26
 800480c:	d42d      	bmi.n	800486a <_printf_common+0xbe>
 800480e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004812:	4639      	mov	r1, r7
 8004814:	4630      	mov	r0, r6
 8004816:	47c0      	blx	r8
 8004818:	3001      	adds	r0, #1
 800481a:	d020      	beq.n	800485e <_printf_common+0xb2>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	68e5      	ldr	r5, [r4, #12]
 8004820:	f8d9 2000 	ldr.w	r2, [r9]
 8004824:	f003 0306 	and.w	r3, r3, #6
 8004828:	2b04      	cmp	r3, #4
 800482a:	bf08      	it	eq
 800482c:	1aad      	subeq	r5, r5, r2
 800482e:	68a3      	ldr	r3, [r4, #8]
 8004830:	6922      	ldr	r2, [r4, #16]
 8004832:	bf0c      	ite	eq
 8004834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004838:	2500      	movne	r5, #0
 800483a:	4293      	cmp	r3, r2
 800483c:	bfc4      	itt	gt
 800483e:	1a9b      	subgt	r3, r3, r2
 8004840:	18ed      	addgt	r5, r5, r3
 8004842:	f04f 0900 	mov.w	r9, #0
 8004846:	341a      	adds	r4, #26
 8004848:	454d      	cmp	r5, r9
 800484a:	d11a      	bne.n	8004882 <_printf_common+0xd6>
 800484c:	2000      	movs	r0, #0
 800484e:	e008      	b.n	8004862 <_printf_common+0xb6>
 8004850:	2301      	movs	r3, #1
 8004852:	4652      	mov	r2, sl
 8004854:	4639      	mov	r1, r7
 8004856:	4630      	mov	r0, r6
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d103      	bne.n	8004866 <_printf_common+0xba>
 800485e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004866:	3501      	adds	r5, #1
 8004868:	e7c3      	b.n	80047f2 <_printf_common+0x46>
 800486a:	18e1      	adds	r1, r4, r3
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	2030      	movs	r0, #48	; 0x30
 8004870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004874:	4422      	add	r2, r4
 8004876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800487a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800487e:	3302      	adds	r3, #2
 8004880:	e7c5      	b.n	800480e <_printf_common+0x62>
 8004882:	2301      	movs	r3, #1
 8004884:	4622      	mov	r2, r4
 8004886:	4639      	mov	r1, r7
 8004888:	4630      	mov	r0, r6
 800488a:	47c0      	blx	r8
 800488c:	3001      	adds	r0, #1
 800488e:	d0e6      	beq.n	800485e <_printf_common+0xb2>
 8004890:	f109 0901 	add.w	r9, r9, #1
 8004894:	e7d8      	b.n	8004848 <_printf_common+0x9c>
	...

08004898 <_printf_i>:
 8004898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800489c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048a0:	460c      	mov	r4, r1
 80048a2:	7e09      	ldrb	r1, [r1, #24]
 80048a4:	b085      	sub	sp, #20
 80048a6:	296e      	cmp	r1, #110	; 0x6e
 80048a8:	4617      	mov	r7, r2
 80048aa:	4606      	mov	r6, r0
 80048ac:	4698      	mov	r8, r3
 80048ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048b0:	f000 80b3 	beq.w	8004a1a <_printf_i+0x182>
 80048b4:	d822      	bhi.n	80048fc <_printf_i+0x64>
 80048b6:	2963      	cmp	r1, #99	; 0x63
 80048b8:	d036      	beq.n	8004928 <_printf_i+0x90>
 80048ba:	d80a      	bhi.n	80048d2 <_printf_i+0x3a>
 80048bc:	2900      	cmp	r1, #0
 80048be:	f000 80b9 	beq.w	8004a34 <_printf_i+0x19c>
 80048c2:	2958      	cmp	r1, #88	; 0x58
 80048c4:	f000 8083 	beq.w	80049ce <_printf_i+0x136>
 80048c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048d0:	e032      	b.n	8004938 <_printf_i+0xa0>
 80048d2:	2964      	cmp	r1, #100	; 0x64
 80048d4:	d001      	beq.n	80048da <_printf_i+0x42>
 80048d6:	2969      	cmp	r1, #105	; 0x69
 80048d8:	d1f6      	bne.n	80048c8 <_printf_i+0x30>
 80048da:	6820      	ldr	r0, [r4, #0]
 80048dc:	6813      	ldr	r3, [r2, #0]
 80048de:	0605      	lsls	r5, r0, #24
 80048e0:	f103 0104 	add.w	r1, r3, #4
 80048e4:	d52a      	bpl.n	800493c <_printf_i+0xa4>
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6011      	str	r1, [r2, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da03      	bge.n	80048f6 <_printf_i+0x5e>
 80048ee:	222d      	movs	r2, #45	; 0x2d
 80048f0:	425b      	negs	r3, r3
 80048f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048f6:	486f      	ldr	r0, [pc, #444]	; (8004ab4 <_printf_i+0x21c>)
 80048f8:	220a      	movs	r2, #10
 80048fa:	e039      	b.n	8004970 <_printf_i+0xd8>
 80048fc:	2973      	cmp	r1, #115	; 0x73
 80048fe:	f000 809d 	beq.w	8004a3c <_printf_i+0x1a4>
 8004902:	d808      	bhi.n	8004916 <_printf_i+0x7e>
 8004904:	296f      	cmp	r1, #111	; 0x6f
 8004906:	d020      	beq.n	800494a <_printf_i+0xb2>
 8004908:	2970      	cmp	r1, #112	; 0x70
 800490a:	d1dd      	bne.n	80048c8 <_printf_i+0x30>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f043 0320 	orr.w	r3, r3, #32
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	e003      	b.n	800491e <_printf_i+0x86>
 8004916:	2975      	cmp	r1, #117	; 0x75
 8004918:	d017      	beq.n	800494a <_printf_i+0xb2>
 800491a:	2978      	cmp	r1, #120	; 0x78
 800491c:	d1d4      	bne.n	80048c8 <_printf_i+0x30>
 800491e:	2378      	movs	r3, #120	; 0x78
 8004920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004924:	4864      	ldr	r0, [pc, #400]	; (8004ab8 <_printf_i+0x220>)
 8004926:	e055      	b.n	80049d4 <_printf_i+0x13c>
 8004928:	6813      	ldr	r3, [r2, #0]
 800492a:	1d19      	adds	r1, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6011      	str	r1, [r2, #0]
 8004930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004938:	2301      	movs	r3, #1
 800493a:	e08c      	b.n	8004a56 <_printf_i+0x1be>
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6011      	str	r1, [r2, #0]
 8004940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004944:	bf18      	it	ne
 8004946:	b21b      	sxthne	r3, r3
 8004948:	e7cf      	b.n	80048ea <_printf_i+0x52>
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	6825      	ldr	r5, [r4, #0]
 800494e:	1d18      	adds	r0, r3, #4
 8004950:	6010      	str	r0, [r2, #0]
 8004952:	0628      	lsls	r0, r5, #24
 8004954:	d501      	bpl.n	800495a <_printf_i+0xc2>
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	e002      	b.n	8004960 <_printf_i+0xc8>
 800495a:	0668      	lsls	r0, r5, #25
 800495c:	d5fb      	bpl.n	8004956 <_printf_i+0xbe>
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	4854      	ldr	r0, [pc, #336]	; (8004ab4 <_printf_i+0x21c>)
 8004962:	296f      	cmp	r1, #111	; 0x6f
 8004964:	bf14      	ite	ne
 8004966:	220a      	movne	r2, #10
 8004968:	2208      	moveq	r2, #8
 800496a:	2100      	movs	r1, #0
 800496c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004970:	6865      	ldr	r5, [r4, #4]
 8004972:	60a5      	str	r5, [r4, #8]
 8004974:	2d00      	cmp	r5, #0
 8004976:	f2c0 8095 	blt.w	8004aa4 <_printf_i+0x20c>
 800497a:	6821      	ldr	r1, [r4, #0]
 800497c:	f021 0104 	bic.w	r1, r1, #4
 8004980:	6021      	str	r1, [r4, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d13d      	bne.n	8004a02 <_printf_i+0x16a>
 8004986:	2d00      	cmp	r5, #0
 8004988:	f040 808e 	bne.w	8004aa8 <_printf_i+0x210>
 800498c:	4665      	mov	r5, ip
 800498e:	2a08      	cmp	r2, #8
 8004990:	d10b      	bne.n	80049aa <_printf_i+0x112>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	07db      	lsls	r3, r3, #31
 8004996:	d508      	bpl.n	80049aa <_printf_i+0x112>
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	6862      	ldr	r2, [r4, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	bfde      	ittt	le
 80049a0:	2330      	movle	r3, #48	; 0x30
 80049a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049aa:	ebac 0305 	sub.w	r3, ip, r5
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	f8cd 8000 	str.w	r8, [sp]
 80049b4:	463b      	mov	r3, r7
 80049b6:	aa03      	add	r2, sp, #12
 80049b8:	4621      	mov	r1, r4
 80049ba:	4630      	mov	r0, r6
 80049bc:	f7ff fef6 	bl	80047ac <_printf_common>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d14d      	bne.n	8004a60 <_printf_i+0x1c8>
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c8:	b005      	add	sp, #20
 80049ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049ce:	4839      	ldr	r0, [pc, #228]	; (8004ab4 <_printf_i+0x21c>)
 80049d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049d4:	6813      	ldr	r3, [r2, #0]
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	1d1d      	adds	r5, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6015      	str	r5, [r2, #0]
 80049de:	060a      	lsls	r2, r1, #24
 80049e0:	d50b      	bpl.n	80049fa <_printf_i+0x162>
 80049e2:	07ca      	lsls	r2, r1, #31
 80049e4:	bf44      	itt	mi
 80049e6:	f041 0120 	orrmi.w	r1, r1, #32
 80049ea:	6021      	strmi	r1, [r4, #0]
 80049ec:	b91b      	cbnz	r3, 80049f6 <_printf_i+0x15e>
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	f022 0220 	bic.w	r2, r2, #32
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	e7b7      	b.n	800496a <_printf_i+0xd2>
 80049fa:	064d      	lsls	r5, r1, #25
 80049fc:	bf48      	it	mi
 80049fe:	b29b      	uxthmi	r3, r3
 8004a00:	e7ef      	b.n	80049e2 <_printf_i+0x14a>
 8004a02:	4665      	mov	r5, ip
 8004a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a08:	fb02 3311 	mls	r3, r2, r1, r3
 8004a0c:	5cc3      	ldrb	r3, [r0, r3]
 8004a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a12:	460b      	mov	r3, r1
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d1f5      	bne.n	8004a04 <_printf_i+0x16c>
 8004a18:	e7b9      	b.n	800498e <_printf_i+0xf6>
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	6961      	ldr	r1, [r4, #20]
 8004a20:	1d18      	adds	r0, r3, #4
 8004a22:	6010      	str	r0, [r2, #0]
 8004a24:	0628      	lsls	r0, r5, #24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	d501      	bpl.n	8004a2e <_printf_i+0x196>
 8004a2a:	6019      	str	r1, [r3, #0]
 8004a2c:	e002      	b.n	8004a34 <_printf_i+0x19c>
 8004a2e:	066a      	lsls	r2, r5, #25
 8004a30:	d5fb      	bpl.n	8004a2a <_printf_i+0x192>
 8004a32:	8019      	strh	r1, [r3, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	4665      	mov	r5, ip
 8004a3a:	e7b9      	b.n	80049b0 <_printf_i+0x118>
 8004a3c:	6813      	ldr	r3, [r2, #0]
 8004a3e:	1d19      	adds	r1, r3, #4
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	681d      	ldr	r5, [r3, #0]
 8004a44:	6862      	ldr	r2, [r4, #4]
 8004a46:	2100      	movs	r1, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7fb fbd1 	bl	80001f0 <memchr>
 8004a4e:	b108      	cbz	r0, 8004a54 <_printf_i+0x1bc>
 8004a50:	1b40      	subs	r0, r0, r5
 8004a52:	6060      	str	r0, [r4, #4]
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5e:	e7a7      	b.n	80049b0 <_printf_i+0x118>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	462a      	mov	r2, r5
 8004a64:	4639      	mov	r1, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0aa      	beq.n	80049c4 <_printf_i+0x12c>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	079b      	lsls	r3, r3, #30
 8004a72:	d413      	bmi.n	8004a9c <_printf_i+0x204>
 8004a74:	68e0      	ldr	r0, [r4, #12]
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	bfb8      	it	lt
 8004a7c:	4618      	movlt	r0, r3
 8004a7e:	e7a3      	b.n	80049c8 <_printf_i+0x130>
 8004a80:	2301      	movs	r3, #1
 8004a82:	464a      	mov	r2, r9
 8004a84:	4639      	mov	r1, r7
 8004a86:	4630      	mov	r0, r6
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d09a      	beq.n	80049c4 <_printf_i+0x12c>
 8004a8e:	3501      	adds	r5, #1
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	9a03      	ldr	r2, [sp, #12]
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	dcf2      	bgt.n	8004a80 <_printf_i+0x1e8>
 8004a9a:	e7eb      	b.n	8004a74 <_printf_i+0x1dc>
 8004a9c:	2500      	movs	r5, #0
 8004a9e:	f104 0919 	add.w	r9, r4, #25
 8004aa2:	e7f5      	b.n	8004a90 <_printf_i+0x1f8>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ac      	bne.n	8004a02 <_printf_i+0x16a>
 8004aa8:	7803      	ldrb	r3, [r0, #0]
 8004aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab2:	e76c      	b.n	800498e <_printf_i+0xf6>
 8004ab4:	08006356 	.word	0x08006356
 8004ab8:	08006367 	.word	0x08006367

08004abc <siprintf>:
 8004abc:	b40e      	push	{r1, r2, r3}
 8004abe:	b500      	push	{lr}
 8004ac0:	b09c      	sub	sp, #112	; 0x70
 8004ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ac4:	9002      	str	r0, [sp, #8]
 8004ac6:	9006      	str	r0, [sp, #24]
 8004ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004acc:	4809      	ldr	r0, [pc, #36]	; (8004af4 <siprintf+0x38>)
 8004ace:	9107      	str	r1, [sp, #28]
 8004ad0:	9104      	str	r1, [sp, #16]
 8004ad2:	4909      	ldr	r1, [pc, #36]	; (8004af8 <siprintf+0x3c>)
 8004ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad8:	9105      	str	r1, [sp, #20]
 8004ada:	6800      	ldr	r0, [r0, #0]
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	a902      	add	r1, sp, #8
 8004ae0:	f001 fa5e 	bl	8005fa0 <_svfiprintf_r>
 8004ae4:	9b02      	ldr	r3, [sp, #8]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	b01c      	add	sp, #112	; 0x70
 8004aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af0:	b003      	add	sp, #12
 8004af2:	4770      	bx	lr
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	ffff0208 	.word	0xffff0208

08004afc <quorem>:
 8004afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b00:	6903      	ldr	r3, [r0, #16]
 8004b02:	690c      	ldr	r4, [r1, #16]
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	4680      	mov	r8, r0
 8004b08:	f2c0 8082 	blt.w	8004c10 <quorem+0x114>
 8004b0c:	3c01      	subs	r4, #1
 8004b0e:	f101 0714 	add.w	r7, r1, #20
 8004b12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b16:	f100 0614 	add.w	r6, r0, #20
 8004b1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b22:	eb06 030c 	add.w	r3, r6, ip
 8004b26:	3501      	adds	r5, #1
 8004b28:	eb07 090c 	add.w	r9, r7, ip
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b32:	b395      	cbz	r5, 8004b9a <quorem+0x9e>
 8004b34:	f04f 0a00 	mov.w	sl, #0
 8004b38:	4638      	mov	r0, r7
 8004b3a:	46b6      	mov	lr, r6
 8004b3c:	46d3      	mov	fp, sl
 8004b3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b42:	b293      	uxth	r3, r2
 8004b44:	fb05 a303 	mla	r3, r5, r3, sl
 8004b48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	ebab 0303 	sub.w	r3, fp, r3
 8004b52:	0c12      	lsrs	r2, r2, #16
 8004b54:	f8de b000 	ldr.w	fp, [lr]
 8004b58:	fb05 a202 	mla	r2, r5, r2, sl
 8004b5c:	fa13 f38b 	uxtah	r3, r3, fp
 8004b60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b64:	fa1f fb82 	uxth.w	fp, r2
 8004b68:	f8de 2000 	ldr.w	r2, [lr]
 8004b6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b7a:	4581      	cmp	r9, r0
 8004b7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b80:	f84e 3b04 	str.w	r3, [lr], #4
 8004b84:	d2db      	bcs.n	8004b3e <quorem+0x42>
 8004b86:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b8a:	b933      	cbnz	r3, 8004b9a <quorem+0x9e>
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	3b04      	subs	r3, #4
 8004b90:	429e      	cmp	r6, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	d330      	bcc.n	8004bf8 <quorem+0xfc>
 8004b96:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	f001 f82a 	bl	8005bf4 <__mcmp>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	db25      	blt.n	8004bf0 <quorem+0xf4>
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f04f 0c00 	mov.w	ip, #0
 8004bac:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bb0:	f8d0 e000 	ldr.w	lr, [r0]
 8004bb4:	b293      	uxth	r3, r2
 8004bb6:	ebac 0303 	sub.w	r3, ip, r3
 8004bba:	0c12      	lsrs	r2, r2, #16
 8004bbc:	fa13 f38e 	uxtah	r3, r3, lr
 8004bc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bce:	45b9      	cmp	r9, r7
 8004bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bd4:	f840 3b04 	str.w	r3, [r0], #4
 8004bd8:	d2e8      	bcs.n	8004bac <quorem+0xb0>
 8004bda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004bde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004be2:	b92a      	cbnz	r2, 8004bf0 <quorem+0xf4>
 8004be4:	3b04      	subs	r3, #4
 8004be6:	429e      	cmp	r6, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	d30b      	bcc.n	8004c04 <quorem+0x108>
 8004bec:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	b003      	add	sp, #12
 8004bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	3b04      	subs	r3, #4
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	d1ca      	bne.n	8004b96 <quorem+0x9a>
 8004c00:	3c01      	subs	r4, #1
 8004c02:	e7c5      	b.n	8004b90 <quorem+0x94>
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	3b04      	subs	r3, #4
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d1ef      	bne.n	8004bec <quorem+0xf0>
 8004c0c:	3c01      	subs	r4, #1
 8004c0e:	e7ea      	b.n	8004be6 <quorem+0xea>
 8004c10:	2000      	movs	r0, #0
 8004c12:	e7ee      	b.n	8004bf2 <quorem+0xf6>
 8004c14:	0000      	movs	r0, r0
	...

08004c18 <_dtoa_r>:
 8004c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1c:	ec57 6b10 	vmov	r6, r7, d0
 8004c20:	b097      	sub	sp, #92	; 0x5c
 8004c22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c24:	9106      	str	r1, [sp, #24]
 8004c26:	4604      	mov	r4, r0
 8004c28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c2a:	9312      	str	r3, [sp, #72]	; 0x48
 8004c2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c30:	e9cd 6700 	strd	r6, r7, [sp]
 8004c34:	b93d      	cbnz	r5, 8004c46 <_dtoa_r+0x2e>
 8004c36:	2010      	movs	r0, #16
 8004c38:	f000 fdb4 	bl	80057a4 <malloc>
 8004c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8004c3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c42:	6005      	str	r5, [r0, #0]
 8004c44:	60c5      	str	r5, [r0, #12]
 8004c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	b151      	cbz	r1, 8004c62 <_dtoa_r+0x4a>
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	604a      	str	r2, [r1, #4]
 8004c50:	2301      	movs	r3, #1
 8004c52:	4093      	lsls	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 fdeb 	bl	8005832 <_Bfree>
 8004c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	1e3b      	subs	r3, r7, #0
 8004c64:	bfbb      	ittet	lt
 8004c66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c6a:	9301      	strlt	r3, [sp, #4]
 8004c6c:	2300      	movge	r3, #0
 8004c6e:	2201      	movlt	r2, #1
 8004c70:	bfac      	ite	ge
 8004c72:	f8c8 3000 	strge.w	r3, [r8]
 8004c76:	f8c8 2000 	strlt.w	r2, [r8]
 8004c7a:	4baf      	ldr	r3, [pc, #700]	; (8004f38 <_dtoa_r+0x320>)
 8004c7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004c80:	ea33 0308 	bics.w	r3, r3, r8
 8004c84:	d114      	bne.n	8004cb0 <_dtoa_r+0x98>
 8004c86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	9b00      	ldr	r3, [sp, #0]
 8004c90:	b923      	cbnz	r3, 8004c9c <_dtoa_r+0x84>
 8004c92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004c96:	2800      	cmp	r0, #0
 8004c98:	f000 8542 	beq.w	8005720 <_dtoa_r+0xb08>
 8004c9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004f4c <_dtoa_r+0x334>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8544 	beq.w	8005730 <_dtoa_r+0xb18>
 8004ca8:	f10b 0303 	add.w	r3, fp, #3
 8004cac:	f000 bd3e 	b.w	800572c <_dtoa_r+0xb14>
 8004cb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc0:	4681      	mov	r9, r0
 8004cc2:	b168      	cbz	r0, 8004ce0 <_dtoa_r+0xc8>
 8004cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8524 	beq.w	800571a <_dtoa_r+0xb02>
 8004cd2:	4b9a      	ldr	r3, [pc, #616]	; (8004f3c <_dtoa_r+0x324>)
 8004cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cd6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	f000 bd28 	b.w	8005730 <_dtoa_r+0xb18>
 8004ce0:	aa14      	add	r2, sp, #80	; 0x50
 8004ce2:	a915      	add	r1, sp, #84	; 0x54
 8004ce4:	ec47 6b10 	vmov	d0, r6, r7
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 fffa 	bl	8005ce2 <__d2b>
 8004cee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004cf2:	9004      	str	r0, [sp, #16]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	d07c      	beq.n	8004df2 <_dtoa_r+0x1da>
 8004cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d00:	46b2      	mov	sl, r6
 8004d02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <_dtoa_r+0x328>)
 8004d12:	4650      	mov	r0, sl
 8004d14:	4659      	mov	r1, fp
 8004d16:	f7fb fabf 	bl	8000298 <__aeabi_dsub>
 8004d1a:	a381      	add	r3, pc, #516	; (adr r3, 8004f20 <_dtoa_r+0x308>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc72 	bl	8000608 <__aeabi_dmul>
 8004d24:	a380      	add	r3, pc, #512	; (adr r3, 8004f28 <_dtoa_r+0x310>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fab7 	bl	800029c <__adddf3>
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4628      	mov	r0, r5
 8004d32:	460f      	mov	r7, r1
 8004d34:	f7fb fbfe 	bl	8000534 <__aeabi_i2d>
 8004d38:	a37d      	add	r3, pc, #500	; (adr r3, 8004f30 <_dtoa_r+0x318>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc63 	bl	8000608 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4630      	mov	r0, r6
 8004d48:	4639      	mov	r1, r7
 8004d4a:	f7fb faa7 	bl	800029c <__adddf3>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460f      	mov	r7, r1
 8004d52:	f7fb ff09 	bl	8000b68 <__aeabi_d2iz>
 8004d56:	2200      	movs	r2, #0
 8004d58:	4682      	mov	sl, r0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	f7fb fec4 	bl	8000aec <__aeabi_dcmplt>
 8004d64:	b148      	cbz	r0, 8004d7a <_dtoa_r+0x162>
 8004d66:	4650      	mov	r0, sl
 8004d68:	f7fb fbe4 	bl	8000534 <__aeabi_i2d>
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	f7fb feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d74:	b908      	cbnz	r0, 8004d7a <_dtoa_r+0x162>
 8004d76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d7a:	f1ba 0f16 	cmp.w	sl, #22
 8004d7e:	d859      	bhi.n	8004e34 <_dtoa_r+0x21c>
 8004d80:	4970      	ldr	r1, [pc, #448]	; (8004f44 <_dtoa_r+0x32c>)
 8004d82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8e:	f7fb fecb 	bl	8000b28 <__aeabi_dcmpgt>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d050      	beq.n	8004e38 <_dtoa_r+0x220>
 8004d96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004da0:	1b5d      	subs	r5, r3, r5
 8004da2:	f1b5 0801 	subs.w	r8, r5, #1
 8004da6:	bf49      	itett	mi
 8004da8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dac:	2300      	movpl	r3, #0
 8004dae:	9305      	strmi	r3, [sp, #20]
 8004db0:	f04f 0800 	movmi.w	r8, #0
 8004db4:	bf58      	it	pl
 8004db6:	9305      	strpl	r3, [sp, #20]
 8004db8:	f1ba 0f00 	cmp.w	sl, #0
 8004dbc:	db3e      	blt.n	8004e3c <_dtoa_r+0x224>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	44d0      	add	r8, sl
 8004dc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004dc6:	9307      	str	r3, [sp, #28]
 8004dc8:	9b06      	ldr	r3, [sp, #24]
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	f200 8090 	bhi.w	8004ef0 <_dtoa_r+0x2d8>
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	bfc4      	itt	gt
 8004dd4:	3b04      	subgt	r3, #4
 8004dd6:	9306      	strgt	r3, [sp, #24]
 8004dd8:	9b06      	ldr	r3, [sp, #24]
 8004dda:	f1a3 0302 	sub.w	r3, r3, #2
 8004dde:	bfcc      	ite	gt
 8004de0:	2500      	movgt	r5, #0
 8004de2:	2501      	movle	r5, #1
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	f200 808f 	bhi.w	8004f08 <_dtoa_r+0x2f0>
 8004dea:	e8df f003 	tbb	[pc, r3]
 8004dee:	7f7d      	.short	0x7f7d
 8004df0:	7131      	.short	0x7131
 8004df2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004df6:	441d      	add	r5, r3
 8004df8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004dfc:	2820      	cmp	r0, #32
 8004dfe:	dd13      	ble.n	8004e28 <_dtoa_r+0x210>
 8004e00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e04:	9b00      	ldr	r3, [sp, #0]
 8004e06:	fa08 f800 	lsl.w	r8, r8, r0
 8004e0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e0e:	fa23 f000 	lsr.w	r0, r3, r0
 8004e12:	ea48 0000 	orr.w	r0, r8, r0
 8004e16:	f7fb fb7d 	bl	8000514 <__aeabi_ui2d>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e22:	3d01      	subs	r5, #1
 8004e24:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e26:	e772      	b.n	8004d0e <_dtoa_r+0xf6>
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	f1c0 0020 	rsb	r0, r0, #32
 8004e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e32:	e7f0      	b.n	8004e16 <_dtoa_r+0x1fe>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e7b1      	b.n	8004d9c <_dtoa_r+0x184>
 8004e38:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e3a:	e7b0      	b.n	8004d9e <_dtoa_r+0x186>
 8004e3c:	9b05      	ldr	r3, [sp, #20]
 8004e3e:	eba3 030a 	sub.w	r3, r3, sl
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	f1ca 0300 	rsb	r3, sl, #0
 8004e48:	9307      	str	r3, [sp, #28]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e4e:	e7bb      	b.n	8004dc8 <_dtoa_r+0x1b0>
 8004e50:	2301      	movs	r3, #1
 8004e52:	930a      	str	r3, [sp, #40]	; 0x28
 8004e54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dd59      	ble.n	8004f0e <_dtoa_r+0x2f6>
 8004e5a:	9302      	str	r3, [sp, #8]
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	6072      	str	r2, [r6, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	f102 0014 	add.w	r0, r2, #20
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	6871      	ldr	r1, [r6, #4]
 8004e6e:	d953      	bls.n	8004f18 <_dtoa_r+0x300>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fcaa 	bl	80057ca <_Balloc>
 8004e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	f1b9 0f0e 	cmp.w	r9, #14
 8004e7e:	f8d3 b000 	ldr.w	fp, [r3]
 8004e82:	f200 80e6 	bhi.w	8005052 <_dtoa_r+0x43a>
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	f000 80e3 	beq.w	8005052 <_dtoa_r+0x43a>
 8004e8c:	ed9d 7b00 	vldr	d7, [sp]
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004e98:	dd74      	ble.n	8004f84 <_dtoa_r+0x36c>
 8004e9a:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <_dtoa_r+0x32c>)
 8004e9c:	f00a 030f 	and.w	r3, sl, #15
 8004ea0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ea4:	ed93 7b00 	vldr	d7, [r3]
 8004ea8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004eac:	06f0      	lsls	r0, r6, #27
 8004eae:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004eb2:	d565      	bpl.n	8004f80 <_dtoa_r+0x368>
 8004eb4:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <_dtoa_r+0x330>)
 8004eb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ebe:	f7fb fccd 	bl	800085c <__aeabi_ddiv>
 8004ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ec6:	f006 060f 	and.w	r6, r6, #15
 8004eca:	2503      	movs	r5, #3
 8004ecc:	4f1e      	ldr	r7, [pc, #120]	; (8004f48 <_dtoa_r+0x330>)
 8004ece:	e04c      	b.n	8004f6a <_dtoa_r+0x352>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed6:	4453      	add	r3, sl
 8004ed8:	f103 0901 	add.w	r9, r3, #1
 8004edc:	9302      	str	r3, [sp, #8]
 8004ede:	464b      	mov	r3, r9
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bfb8      	it	lt
 8004ee4:	2301      	movlt	r3, #1
 8004ee6:	e7ba      	b.n	8004e5e <_dtoa_r+0x246>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e7b2      	b.n	8004e52 <_dtoa_r+0x23a>
 8004eec:	2300      	movs	r3, #0
 8004eee:	e7f0      	b.n	8004ed2 <_dtoa_r+0x2ba>
 8004ef0:	2501      	movs	r5, #1
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	950a      	str	r5, [sp, #40]	; 0x28
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	4699      	mov	r9, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	2312      	movs	r3, #18
 8004f04:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f06:	e7aa      	b.n	8004e5e <_dtoa_r+0x246>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0c:	e7f4      	b.n	8004ef8 <_dtoa_r+0x2e0>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	9302      	str	r3, [sp, #8]
 8004f12:	4699      	mov	r9, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	e7f5      	b.n	8004f04 <_dtoa_r+0x2ec>
 8004f18:	3101      	adds	r1, #1
 8004f1a:	6071      	str	r1, [r6, #4]
 8004f1c:	0052      	lsls	r2, r2, #1
 8004f1e:	e7a2      	b.n	8004e66 <_dtoa_r+0x24e>
 8004f20:	636f4361 	.word	0x636f4361
 8004f24:	3fd287a7 	.word	0x3fd287a7
 8004f28:	8b60c8b3 	.word	0x8b60c8b3
 8004f2c:	3fc68a28 	.word	0x3fc68a28
 8004f30:	509f79fb 	.word	0x509f79fb
 8004f34:	3fd34413 	.word	0x3fd34413
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	08006355 	.word	0x08006355
 8004f40:	3ff80000 	.word	0x3ff80000
 8004f44:	080063b0 	.word	0x080063b0
 8004f48:	08006388 	.word	0x08006388
 8004f4c:	08006381 	.word	0x08006381
 8004f50:	07f1      	lsls	r1, r6, #31
 8004f52:	d508      	bpl.n	8004f66 <_dtoa_r+0x34e>
 8004f54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f5c:	f7fb fb54 	bl	8000608 <__aeabi_dmul>
 8004f60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f64:	3501      	adds	r5, #1
 8004f66:	1076      	asrs	r6, r6, #1
 8004f68:	3708      	adds	r7, #8
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d1f0      	bne.n	8004f50 <_dtoa_r+0x338>
 8004f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f76:	f7fb fc71 	bl	800085c <__aeabi_ddiv>
 8004f7a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f7e:	e01a      	b.n	8004fb6 <_dtoa_r+0x39e>
 8004f80:	2502      	movs	r5, #2
 8004f82:	e7a3      	b.n	8004ecc <_dtoa_r+0x2b4>
 8004f84:	f000 80a0 	beq.w	80050c8 <_dtoa_r+0x4b0>
 8004f88:	f1ca 0600 	rsb	r6, sl, #0
 8004f8c:	4b9f      	ldr	r3, [pc, #636]	; (800520c <_dtoa_r+0x5f4>)
 8004f8e:	4fa0      	ldr	r7, [pc, #640]	; (8005210 <_dtoa_r+0x5f8>)
 8004f90:	f006 020f 	and.w	r2, r6, #15
 8004f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa0:	f7fb fb32 	bl	8000608 <__aeabi_dmul>
 8004fa4:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa8:	1136      	asrs	r6, r6, #4
 8004faa:	2300      	movs	r3, #0
 8004fac:	2502      	movs	r5, #2
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d17f      	bne.n	80050b2 <_dtoa_r+0x49a>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e1      	bne.n	8004f7a <_dtoa_r+0x362>
 8004fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8087 	beq.w	80050cc <_dtoa_r+0x4b4>
 8004fbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4b93      	ldr	r3, [pc, #588]	; (8005214 <_dtoa_r+0x5fc>)
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	4639      	mov	r1, r7
 8004fca:	f7fb fd8f 	bl	8000aec <__aeabi_dcmplt>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d07c      	beq.n	80050cc <_dtoa_r+0x4b4>
 8004fd2:	f1b9 0f00 	cmp.w	r9, #0
 8004fd6:	d079      	beq.n	80050cc <_dtoa_r+0x4b4>
 8004fd8:	9b02      	ldr	r3, [sp, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	dd35      	ble.n	800504a <_dtoa_r+0x432>
 8004fde:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004fe2:	9308      	str	r3, [sp, #32]
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	4b8b      	ldr	r3, [pc, #556]	; (8005218 <_dtoa_r+0x600>)
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb fb0c 	bl	8000608 <__aeabi_dmul>
 8004ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ff4:	9f02      	ldr	r7, [sp, #8]
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f7fb fa9b 	bl	8000534 <__aeabi_i2d>
 8004ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005002:	f7fb fb01 	bl	8000608 <__aeabi_dmul>
 8005006:	2200      	movs	r2, #0
 8005008:	4b84      	ldr	r3, [pc, #528]	; (800521c <_dtoa_r+0x604>)
 800500a:	f7fb f947 	bl	800029c <__adddf3>
 800500e:	4605      	mov	r5, r0
 8005010:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005014:	2f00      	cmp	r7, #0
 8005016:	d15d      	bne.n	80050d4 <_dtoa_r+0x4bc>
 8005018:	2200      	movs	r2, #0
 800501a:	4b81      	ldr	r3, [pc, #516]	; (8005220 <_dtoa_r+0x608>)
 800501c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005020:	f7fb f93a 	bl	8000298 <__aeabi_dsub>
 8005024:	462a      	mov	r2, r5
 8005026:	4633      	mov	r3, r6
 8005028:	e9cd 0100 	strd	r0, r1, [sp]
 800502c:	f7fb fd7c 	bl	8000b28 <__aeabi_dcmpgt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 8288 	bne.w	8005546 <_dtoa_r+0x92e>
 8005036:	462a      	mov	r2, r5
 8005038:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800503c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005040:	f7fb fd54 	bl	8000aec <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f040 827c 	bne.w	8005542 <_dtoa_r+0x92a>
 800504a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800504e:	e9cd 2300 	strd	r2, r3, [sp]
 8005052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005054:	2b00      	cmp	r3, #0
 8005056:	f2c0 8150 	blt.w	80052fa <_dtoa_r+0x6e2>
 800505a:	f1ba 0f0e 	cmp.w	sl, #14
 800505e:	f300 814c 	bgt.w	80052fa <_dtoa_r+0x6e2>
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <_dtoa_r+0x5f4>)
 8005064:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005068:	ed93 7b00 	vldr	d7, [r3]
 800506c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005074:	f280 80d8 	bge.w	8005228 <_dtoa_r+0x610>
 8005078:	f1b9 0f00 	cmp.w	r9, #0
 800507c:	f300 80d4 	bgt.w	8005228 <_dtoa_r+0x610>
 8005080:	f040 825e 	bne.w	8005540 <_dtoa_r+0x928>
 8005084:	2200      	movs	r2, #0
 8005086:	4b66      	ldr	r3, [pc, #408]	; (8005220 <_dtoa_r+0x608>)
 8005088:	ec51 0b17 	vmov	r0, r1, d7
 800508c:	f7fb fabc 	bl	8000608 <__aeabi_dmul>
 8005090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005094:	f7fb fd3e 	bl	8000b14 <__aeabi_dcmpge>
 8005098:	464f      	mov	r7, r9
 800509a:	464e      	mov	r6, r9
 800509c:	2800      	cmp	r0, #0
 800509e:	f040 8234 	bne.w	800550a <_dtoa_r+0x8f2>
 80050a2:	2331      	movs	r3, #49	; 0x31
 80050a4:	f10b 0501 	add.w	r5, fp, #1
 80050a8:	f88b 3000 	strb.w	r3, [fp]
 80050ac:	f10a 0a01 	add.w	sl, sl, #1
 80050b0:	e22f      	b.n	8005512 <_dtoa_r+0x8fa>
 80050b2:	07f2      	lsls	r2, r6, #31
 80050b4:	d505      	bpl.n	80050c2 <_dtoa_r+0x4aa>
 80050b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ba:	f7fb faa5 	bl	8000608 <__aeabi_dmul>
 80050be:	3501      	adds	r5, #1
 80050c0:	2301      	movs	r3, #1
 80050c2:	1076      	asrs	r6, r6, #1
 80050c4:	3708      	adds	r7, #8
 80050c6:	e772      	b.n	8004fae <_dtoa_r+0x396>
 80050c8:	2502      	movs	r5, #2
 80050ca:	e774      	b.n	8004fb6 <_dtoa_r+0x39e>
 80050cc:	f8cd a020 	str.w	sl, [sp, #32]
 80050d0:	464f      	mov	r7, r9
 80050d2:	e791      	b.n	8004ff8 <_dtoa_r+0x3e0>
 80050d4:	4b4d      	ldr	r3, [pc, #308]	; (800520c <_dtoa_r+0x5f4>)
 80050d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80050de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d047      	beq.n	8005174 <_dtoa_r+0x55c>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	2000      	movs	r0, #0
 80050ea:	494e      	ldr	r1, [pc, #312]	; (8005224 <_dtoa_r+0x60c>)
 80050ec:	f7fb fbb6 	bl	800085c <__aeabi_ddiv>
 80050f0:	462a      	mov	r2, r5
 80050f2:	4633      	mov	r3, r6
 80050f4:	f7fb f8d0 	bl	8000298 <__aeabi_dsub>
 80050f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80050fc:	465d      	mov	r5, fp
 80050fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005102:	f7fb fd31 	bl	8000b68 <__aeabi_d2iz>
 8005106:	4606      	mov	r6, r0
 8005108:	f7fb fa14 	bl	8000534 <__aeabi_i2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005114:	f7fb f8c0 	bl	8000298 <__aeabi_dsub>
 8005118:	3630      	adds	r6, #48	; 0x30
 800511a:	f805 6b01 	strb.w	r6, [r5], #1
 800511e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005122:	e9cd 0100 	strd	r0, r1, [sp]
 8005126:	f7fb fce1 	bl	8000aec <__aeabi_dcmplt>
 800512a:	2800      	cmp	r0, #0
 800512c:	d163      	bne.n	80051f6 <_dtoa_r+0x5de>
 800512e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005132:	2000      	movs	r0, #0
 8005134:	4937      	ldr	r1, [pc, #220]	; (8005214 <_dtoa_r+0x5fc>)
 8005136:	f7fb f8af 	bl	8000298 <__aeabi_dsub>
 800513a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800513e:	f7fb fcd5 	bl	8000aec <__aeabi_dcmplt>
 8005142:	2800      	cmp	r0, #0
 8005144:	f040 80b7 	bne.w	80052b6 <_dtoa_r+0x69e>
 8005148:	eba5 030b 	sub.w	r3, r5, fp
 800514c:	429f      	cmp	r7, r3
 800514e:	f77f af7c 	ble.w	800504a <_dtoa_r+0x432>
 8005152:	2200      	movs	r2, #0
 8005154:	4b30      	ldr	r3, [pc, #192]	; (8005218 <_dtoa_r+0x600>)
 8005156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800515a:	f7fb fa55 	bl	8000608 <__aeabi_dmul>
 800515e:	2200      	movs	r2, #0
 8005160:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005164:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <_dtoa_r+0x600>)
 8005166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800516a:	f7fb fa4d 	bl	8000608 <__aeabi_dmul>
 800516e:	e9cd 0100 	strd	r0, r1, [sp]
 8005172:	e7c4      	b.n	80050fe <_dtoa_r+0x4e6>
 8005174:	462a      	mov	r2, r5
 8005176:	4633      	mov	r3, r6
 8005178:	f7fb fa46 	bl	8000608 <__aeabi_dmul>
 800517c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005180:	eb0b 0507 	add.w	r5, fp, r7
 8005184:	465e      	mov	r6, fp
 8005186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800518a:	f7fb fced 	bl	8000b68 <__aeabi_d2iz>
 800518e:	4607      	mov	r7, r0
 8005190:	f7fb f9d0 	bl	8000534 <__aeabi_i2d>
 8005194:	3730      	adds	r7, #48	; 0x30
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800519e:	f7fb f87b 	bl	8000298 <__aeabi_dsub>
 80051a2:	f806 7b01 	strb.w	r7, [r6], #1
 80051a6:	42ae      	cmp	r6, r5
 80051a8:	e9cd 0100 	strd	r0, r1, [sp]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	d126      	bne.n	8005200 <_dtoa_r+0x5e8>
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <_dtoa_r+0x60c>)
 80051b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051b8:	f7fb f870 	bl	800029c <__adddf3>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c4:	f7fb fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d174      	bne.n	80052b6 <_dtoa_r+0x69e>
 80051cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051d0:	2000      	movs	r0, #0
 80051d2:	4914      	ldr	r1, [pc, #80]	; (8005224 <_dtoa_r+0x60c>)
 80051d4:	f7fb f860 	bl	8000298 <__aeabi_dsub>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e0:	f7fb fc84 	bl	8000aec <__aeabi_dcmplt>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f43f af30 	beq.w	800504a <_dtoa_r+0x432>
 80051ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80051f4:	d002      	beq.n	80051fc <_dtoa_r+0x5e4>
 80051f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80051fa:	e04a      	b.n	8005292 <_dtoa_r+0x67a>
 80051fc:	4615      	mov	r5, r2
 80051fe:	e7f4      	b.n	80051ea <_dtoa_r+0x5d2>
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <_dtoa_r+0x600>)
 8005202:	f7fb fa01 	bl	8000608 <__aeabi_dmul>
 8005206:	e9cd 0100 	strd	r0, r1, [sp]
 800520a:	e7bc      	b.n	8005186 <_dtoa_r+0x56e>
 800520c:	080063b0 	.word	0x080063b0
 8005210:	08006388 	.word	0x08006388
 8005214:	3ff00000 	.word	0x3ff00000
 8005218:	40240000 	.word	0x40240000
 800521c:	401c0000 	.word	0x401c0000
 8005220:	40140000 	.word	0x40140000
 8005224:	3fe00000 	.word	0x3fe00000
 8005228:	e9dd 6700 	ldrd	r6, r7, [sp]
 800522c:	465d      	mov	r5, fp
 800522e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005232:	4630      	mov	r0, r6
 8005234:	4639      	mov	r1, r7
 8005236:	f7fb fb11 	bl	800085c <__aeabi_ddiv>
 800523a:	f7fb fc95 	bl	8000b68 <__aeabi_d2iz>
 800523e:	4680      	mov	r8, r0
 8005240:	f7fb f978 	bl	8000534 <__aeabi_i2d>
 8005244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005248:	f7fb f9de 	bl	8000608 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005258:	f7fb f81e 	bl	8000298 <__aeabi_dsub>
 800525c:	f805 6b01 	strb.w	r6, [r5], #1
 8005260:	eba5 060b 	sub.w	r6, r5, fp
 8005264:	45b1      	cmp	r9, r6
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	d139      	bne.n	80052e0 <_dtoa_r+0x6c8>
 800526c:	f7fb f816 	bl	800029c <__adddf3>
 8005270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	f7fb fc56 	bl	8000b28 <__aeabi_dcmpgt>
 800527c:	b9c8      	cbnz	r0, 80052b2 <_dtoa_r+0x69a>
 800527e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800528a:	b110      	cbz	r0, 8005292 <_dtoa_r+0x67a>
 800528c:	f018 0f01 	tst.w	r8, #1
 8005290:	d10f      	bne.n	80052b2 <_dtoa_r+0x69a>
 8005292:	9904      	ldr	r1, [sp, #16]
 8005294:	4620      	mov	r0, r4
 8005296:	f000 facc 	bl	8005832 <_Bfree>
 800529a:	2300      	movs	r3, #0
 800529c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800529e:	702b      	strb	r3, [r5, #0]
 80052a0:	f10a 0301 	add.w	r3, sl, #1
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8241 	beq.w	8005730 <_dtoa_r+0xb18>
 80052ae:	601d      	str	r5, [r3, #0]
 80052b0:	e23e      	b.n	8005730 <_dtoa_r+0xb18>
 80052b2:	f8cd a020 	str.w	sl, [sp, #32]
 80052b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052ba:	2a39      	cmp	r2, #57	; 0x39
 80052bc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80052c0:	d108      	bne.n	80052d4 <_dtoa_r+0x6bc>
 80052c2:	459b      	cmp	fp, r3
 80052c4:	d10a      	bne.n	80052dc <_dtoa_r+0x6c4>
 80052c6:	9b08      	ldr	r3, [sp, #32]
 80052c8:	3301      	adds	r3, #1
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	2330      	movs	r3, #48	; 0x30
 80052ce:	f88b 3000 	strb.w	r3, [fp]
 80052d2:	465b      	mov	r3, fp
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	3201      	adds	r2, #1
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e78c      	b.n	80051f6 <_dtoa_r+0x5de>
 80052dc:	461d      	mov	r5, r3
 80052de:	e7ea      	b.n	80052b6 <_dtoa_r+0x69e>
 80052e0:	2200      	movs	r2, #0
 80052e2:	4b9b      	ldr	r3, [pc, #620]	; (8005550 <_dtoa_r+0x938>)
 80052e4:	f7fb f990 	bl	8000608 <__aeabi_dmul>
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	4606      	mov	r6, r0
 80052ee:	460f      	mov	r7, r1
 80052f0:	f7fb fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d09a      	beq.n	800522e <_dtoa_r+0x616>
 80052f8:	e7cb      	b.n	8005292 <_dtoa_r+0x67a>
 80052fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	f000 808b 	beq.w	8005418 <_dtoa_r+0x800>
 8005302:	9a06      	ldr	r2, [sp, #24]
 8005304:	2a01      	cmp	r2, #1
 8005306:	dc6e      	bgt.n	80053e6 <_dtoa_r+0x7ce>
 8005308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800530a:	2a00      	cmp	r2, #0
 800530c:	d067      	beq.n	80053de <_dtoa_r+0x7c6>
 800530e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005312:	9f07      	ldr	r7, [sp, #28]
 8005314:	9d05      	ldr	r5, [sp, #20]
 8005316:	9a05      	ldr	r2, [sp, #20]
 8005318:	2101      	movs	r1, #1
 800531a:	441a      	add	r2, r3
 800531c:	4620      	mov	r0, r4
 800531e:	9205      	str	r2, [sp, #20]
 8005320:	4498      	add	r8, r3
 8005322:	f000 fb26 	bl	8005972 <__i2b>
 8005326:	4606      	mov	r6, r0
 8005328:	2d00      	cmp	r5, #0
 800532a:	dd0c      	ble.n	8005346 <_dtoa_r+0x72e>
 800532c:	f1b8 0f00 	cmp.w	r8, #0
 8005330:	dd09      	ble.n	8005346 <_dtoa_r+0x72e>
 8005332:	4545      	cmp	r5, r8
 8005334:	9a05      	ldr	r2, [sp, #20]
 8005336:	462b      	mov	r3, r5
 8005338:	bfa8      	it	ge
 800533a:	4643      	movge	r3, r8
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	9205      	str	r2, [sp, #20]
 8005340:	1aed      	subs	r5, r5, r3
 8005342:	eba8 0803 	sub.w	r8, r8, r3
 8005346:	9b07      	ldr	r3, [sp, #28]
 8005348:	b1eb      	cbz	r3, 8005386 <_dtoa_r+0x76e>
 800534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d067      	beq.n	8005420 <_dtoa_r+0x808>
 8005350:	b18f      	cbz	r7, 8005376 <_dtoa_r+0x75e>
 8005352:	4631      	mov	r1, r6
 8005354:	463a      	mov	r2, r7
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fbaa 	bl	8005ab0 <__pow5mult>
 800535c:	9a04      	ldr	r2, [sp, #16]
 800535e:	4601      	mov	r1, r0
 8005360:	4606      	mov	r6, r0
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fb0e 	bl	8005984 <__multiply>
 8005368:	9904      	ldr	r1, [sp, #16]
 800536a:	9008      	str	r0, [sp, #32]
 800536c:	4620      	mov	r0, r4
 800536e:	f000 fa60 	bl	8005832 <_Bfree>
 8005372:	9b08      	ldr	r3, [sp, #32]
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	9b07      	ldr	r3, [sp, #28]
 8005378:	1bda      	subs	r2, r3, r7
 800537a:	d004      	beq.n	8005386 <_dtoa_r+0x76e>
 800537c:	9904      	ldr	r1, [sp, #16]
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fb96 	bl	8005ab0 <__pow5mult>
 8005384:	9004      	str	r0, [sp, #16]
 8005386:	2101      	movs	r1, #1
 8005388:	4620      	mov	r0, r4
 800538a:	f000 faf2 	bl	8005972 <__i2b>
 800538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005390:	4607      	mov	r7, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 81d0 	beq.w	8005738 <_dtoa_r+0xb20>
 8005398:	461a      	mov	r2, r3
 800539a:	4601      	mov	r1, r0
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fb87 	bl	8005ab0 <__pow5mult>
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	4607      	mov	r7, r0
 80053a8:	dc40      	bgt.n	800542c <_dtoa_r+0x814>
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d139      	bne.n	8005424 <_dtoa_r+0x80c>
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d136      	bne.n	8005428 <_dtoa_r+0x810>
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c0:	0d1b      	lsrs	r3, r3, #20
 80053c2:	051b      	lsls	r3, r3, #20
 80053c4:	b12b      	cbz	r3, 80053d2 <_dtoa_r+0x7ba>
 80053c6:	9b05      	ldr	r3, [sp, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	f108 0801 	add.w	r8, r8, #1
 80053d0:	2301      	movs	r3, #1
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d12a      	bne.n	8005430 <_dtoa_r+0x818>
 80053da:	2001      	movs	r0, #1
 80053dc:	e030      	b.n	8005440 <_dtoa_r+0x828>
 80053de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053e4:	e795      	b.n	8005312 <_dtoa_r+0x6fa>
 80053e6:	9b07      	ldr	r3, [sp, #28]
 80053e8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80053ec:	42bb      	cmp	r3, r7
 80053ee:	bfbf      	itttt	lt
 80053f0:	9b07      	ldrlt	r3, [sp, #28]
 80053f2:	9707      	strlt	r7, [sp, #28]
 80053f4:	1afa      	sublt	r2, r7, r3
 80053f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80053f8:	bfbb      	ittet	lt
 80053fa:	189b      	addlt	r3, r3, r2
 80053fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80053fe:	1bdf      	subge	r7, r3, r7
 8005400:	2700      	movlt	r7, #0
 8005402:	f1b9 0f00 	cmp.w	r9, #0
 8005406:	bfb5      	itete	lt
 8005408:	9b05      	ldrlt	r3, [sp, #20]
 800540a:	9d05      	ldrge	r5, [sp, #20]
 800540c:	eba3 0509 	sublt.w	r5, r3, r9
 8005410:	464b      	movge	r3, r9
 8005412:	bfb8      	it	lt
 8005414:	2300      	movlt	r3, #0
 8005416:	e77e      	b.n	8005316 <_dtoa_r+0x6fe>
 8005418:	9f07      	ldr	r7, [sp, #28]
 800541a:	9d05      	ldr	r5, [sp, #20]
 800541c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800541e:	e783      	b.n	8005328 <_dtoa_r+0x710>
 8005420:	9a07      	ldr	r2, [sp, #28]
 8005422:	e7ab      	b.n	800537c <_dtoa_r+0x764>
 8005424:	2300      	movs	r3, #0
 8005426:	e7d4      	b.n	80053d2 <_dtoa_r+0x7ba>
 8005428:	9b00      	ldr	r3, [sp, #0]
 800542a:	e7d2      	b.n	80053d2 <_dtoa_r+0x7ba>
 800542c:	2300      	movs	r3, #0
 800542e:	9307      	str	r3, [sp, #28]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005436:	6918      	ldr	r0, [r3, #16]
 8005438:	f000 fa4d 	bl	80058d6 <__hi0bits>
 800543c:	f1c0 0020 	rsb	r0, r0, #32
 8005440:	4440      	add	r0, r8
 8005442:	f010 001f 	ands.w	r0, r0, #31
 8005446:	d047      	beq.n	80054d8 <_dtoa_r+0x8c0>
 8005448:	f1c0 0320 	rsb	r3, r0, #32
 800544c:	2b04      	cmp	r3, #4
 800544e:	dd3b      	ble.n	80054c8 <_dtoa_r+0x8b0>
 8005450:	9b05      	ldr	r3, [sp, #20]
 8005452:	f1c0 001c 	rsb	r0, r0, #28
 8005456:	4403      	add	r3, r0
 8005458:	9305      	str	r3, [sp, #20]
 800545a:	4405      	add	r5, r0
 800545c:	4480      	add	r8, r0
 800545e:	9b05      	ldr	r3, [sp, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	dd05      	ble.n	8005470 <_dtoa_r+0x858>
 8005464:	461a      	mov	r2, r3
 8005466:	9904      	ldr	r1, [sp, #16]
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fb6f 	bl	8005b4c <__lshift>
 800546e:	9004      	str	r0, [sp, #16]
 8005470:	f1b8 0f00 	cmp.w	r8, #0
 8005474:	dd05      	ble.n	8005482 <_dtoa_r+0x86a>
 8005476:	4639      	mov	r1, r7
 8005478:	4642      	mov	r2, r8
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fb66 	bl	8005b4c <__lshift>
 8005480:	4607      	mov	r7, r0
 8005482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005484:	b353      	cbz	r3, 80054dc <_dtoa_r+0x8c4>
 8005486:	4639      	mov	r1, r7
 8005488:	9804      	ldr	r0, [sp, #16]
 800548a:	f000 fbb3 	bl	8005bf4 <__mcmp>
 800548e:	2800      	cmp	r0, #0
 8005490:	da24      	bge.n	80054dc <_dtoa_r+0x8c4>
 8005492:	2300      	movs	r3, #0
 8005494:	220a      	movs	r2, #10
 8005496:	9904      	ldr	r1, [sp, #16]
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f9e1 	bl	8005860 <__multadd>
 800549e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054a0:	9004      	str	r0, [sp, #16]
 80054a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 814d 	beq.w	8005746 <_dtoa_r+0xb2e>
 80054ac:	2300      	movs	r3, #0
 80054ae:	4631      	mov	r1, r6
 80054b0:	220a      	movs	r2, #10
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f9d4 	bl	8005860 <__multadd>
 80054b8:	9b02      	ldr	r3, [sp, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	4606      	mov	r6, r0
 80054be:	dc4f      	bgt.n	8005560 <_dtoa_r+0x948>
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	dd4c      	ble.n	8005560 <_dtoa_r+0x948>
 80054c6:	e011      	b.n	80054ec <_dtoa_r+0x8d4>
 80054c8:	d0c9      	beq.n	800545e <_dtoa_r+0x846>
 80054ca:	9a05      	ldr	r2, [sp, #20]
 80054cc:	331c      	adds	r3, #28
 80054ce:	441a      	add	r2, r3
 80054d0:	9205      	str	r2, [sp, #20]
 80054d2:	441d      	add	r5, r3
 80054d4:	4498      	add	r8, r3
 80054d6:	e7c2      	b.n	800545e <_dtoa_r+0x846>
 80054d8:	4603      	mov	r3, r0
 80054da:	e7f6      	b.n	80054ca <_dtoa_r+0x8b2>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	dc38      	bgt.n	8005554 <_dtoa_r+0x93c>
 80054e2:	9b06      	ldr	r3, [sp, #24]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	dd35      	ble.n	8005554 <_dtoa_r+0x93c>
 80054e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80054ec:	9b02      	ldr	r3, [sp, #8]
 80054ee:	b963      	cbnz	r3, 800550a <_dtoa_r+0x8f2>
 80054f0:	4639      	mov	r1, r7
 80054f2:	2205      	movs	r2, #5
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 f9b3 	bl	8005860 <__multadd>
 80054fa:	4601      	mov	r1, r0
 80054fc:	4607      	mov	r7, r0
 80054fe:	9804      	ldr	r0, [sp, #16]
 8005500:	f000 fb78 	bl	8005bf4 <__mcmp>
 8005504:	2800      	cmp	r0, #0
 8005506:	f73f adcc 	bgt.w	80050a2 <_dtoa_r+0x48a>
 800550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550c:	465d      	mov	r5, fp
 800550e:	ea6f 0a03 	mvn.w	sl, r3
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	4639      	mov	r1, r7
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f98a 	bl	8005832 <_Bfree>
 800551e:	2e00      	cmp	r6, #0
 8005520:	f43f aeb7 	beq.w	8005292 <_dtoa_r+0x67a>
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	d005      	beq.n	8005536 <_dtoa_r+0x91e>
 800552a:	45b1      	cmp	r9, r6
 800552c:	d003      	beq.n	8005536 <_dtoa_r+0x91e>
 800552e:	4649      	mov	r1, r9
 8005530:	4620      	mov	r0, r4
 8005532:	f000 f97e 	bl	8005832 <_Bfree>
 8005536:	4631      	mov	r1, r6
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f97a 	bl	8005832 <_Bfree>
 800553e:	e6a8      	b.n	8005292 <_dtoa_r+0x67a>
 8005540:	2700      	movs	r7, #0
 8005542:	463e      	mov	r6, r7
 8005544:	e7e1      	b.n	800550a <_dtoa_r+0x8f2>
 8005546:	f8dd a020 	ldr.w	sl, [sp, #32]
 800554a:	463e      	mov	r6, r7
 800554c:	e5a9      	b.n	80050a2 <_dtoa_r+0x48a>
 800554e:	bf00      	nop
 8005550:	40240000 	.word	0x40240000
 8005554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005556:	f8cd 9008 	str.w	r9, [sp, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80fa 	beq.w	8005754 <_dtoa_r+0xb3c>
 8005560:	2d00      	cmp	r5, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x958>
 8005564:	4631      	mov	r1, r6
 8005566:	462a      	mov	r2, r5
 8005568:	4620      	mov	r0, r4
 800556a:	f000 faef 	bl	8005b4c <__lshift>
 800556e:	4606      	mov	r6, r0
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04c      	beq.n	8005610 <_dtoa_r+0x9f8>
 8005576:	6871      	ldr	r1, [r6, #4]
 8005578:	4620      	mov	r0, r4
 800557a:	f000 f926 	bl	80057ca <_Balloc>
 800557e:	6932      	ldr	r2, [r6, #16]
 8005580:	3202      	adds	r2, #2
 8005582:	4605      	mov	r5, r0
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	f106 010c 	add.w	r1, r6, #12
 800558a:	300c      	adds	r0, #12
 800558c:	f000 f912 	bl	80057b4 <memcpy>
 8005590:	2201      	movs	r2, #1
 8005592:	4629      	mov	r1, r5
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fad9 	bl	8005b4c <__lshift>
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	f8cd b014 	str.w	fp, [sp, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	46b1      	mov	r9, r6
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	4606      	mov	r6, r0
 80055aa:	4639      	mov	r1, r7
 80055ac:	9804      	ldr	r0, [sp, #16]
 80055ae:	f7ff faa5 	bl	8004afc <quorem>
 80055b2:	4649      	mov	r1, r9
 80055b4:	4605      	mov	r5, r0
 80055b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055ba:	9804      	ldr	r0, [sp, #16]
 80055bc:	f000 fb1a 	bl	8005bf4 <__mcmp>
 80055c0:	4632      	mov	r2, r6
 80055c2:	9000      	str	r0, [sp, #0]
 80055c4:	4639      	mov	r1, r7
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 fb2e 	bl	8005c28 <__mdiff>
 80055cc:	68c3      	ldr	r3, [r0, #12]
 80055ce:	4602      	mov	r2, r0
 80055d0:	bb03      	cbnz	r3, 8005614 <_dtoa_r+0x9fc>
 80055d2:	4601      	mov	r1, r0
 80055d4:	9008      	str	r0, [sp, #32]
 80055d6:	9804      	ldr	r0, [sp, #16]
 80055d8:	f000 fb0c 	bl	8005bf4 <__mcmp>
 80055dc:	9a08      	ldr	r2, [sp, #32]
 80055de:	4603      	mov	r3, r0
 80055e0:	4611      	mov	r1, r2
 80055e2:	4620      	mov	r0, r4
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	f000 f924 	bl	8005832 <_Bfree>
 80055ea:	9b08      	ldr	r3, [sp, #32]
 80055ec:	b9a3      	cbnz	r3, 8005618 <_dtoa_r+0xa00>
 80055ee:	9a06      	ldr	r2, [sp, #24]
 80055f0:	b992      	cbnz	r2, 8005618 <_dtoa_r+0xa00>
 80055f2:	9a07      	ldr	r2, [sp, #28]
 80055f4:	b982      	cbnz	r2, 8005618 <_dtoa_r+0xa00>
 80055f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055fa:	d029      	beq.n	8005650 <_dtoa_r+0xa38>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dd01      	ble.n	8005606 <_dtoa_r+0x9ee>
 8005602:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005606:	9b05      	ldr	r3, [sp, #20]
 8005608:	1c5d      	adds	r5, r3, #1
 800560a:	f883 8000 	strb.w	r8, [r3]
 800560e:	e782      	b.n	8005516 <_dtoa_r+0x8fe>
 8005610:	4630      	mov	r0, r6
 8005612:	e7c2      	b.n	800559a <_dtoa_r+0x982>
 8005614:	2301      	movs	r3, #1
 8005616:	e7e3      	b.n	80055e0 <_dtoa_r+0x9c8>
 8005618:	9a00      	ldr	r2, [sp, #0]
 800561a:	2a00      	cmp	r2, #0
 800561c:	db04      	blt.n	8005628 <_dtoa_r+0xa10>
 800561e:	d125      	bne.n	800566c <_dtoa_r+0xa54>
 8005620:	9a06      	ldr	r2, [sp, #24]
 8005622:	bb1a      	cbnz	r2, 800566c <_dtoa_r+0xa54>
 8005624:	9a07      	ldr	r2, [sp, #28]
 8005626:	bb0a      	cbnz	r2, 800566c <_dtoa_r+0xa54>
 8005628:	2b00      	cmp	r3, #0
 800562a:	ddec      	ble.n	8005606 <_dtoa_r+0x9ee>
 800562c:	2201      	movs	r2, #1
 800562e:	9904      	ldr	r1, [sp, #16]
 8005630:	4620      	mov	r0, r4
 8005632:	f000 fa8b 	bl	8005b4c <__lshift>
 8005636:	4639      	mov	r1, r7
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	f000 fadb 	bl	8005bf4 <__mcmp>
 800563e:	2800      	cmp	r0, #0
 8005640:	dc03      	bgt.n	800564a <_dtoa_r+0xa32>
 8005642:	d1e0      	bne.n	8005606 <_dtoa_r+0x9ee>
 8005644:	f018 0f01 	tst.w	r8, #1
 8005648:	d0dd      	beq.n	8005606 <_dtoa_r+0x9ee>
 800564a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800564e:	d1d8      	bne.n	8005602 <_dtoa_r+0x9ea>
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	9a05      	ldr	r2, [sp, #20]
 8005654:	1c5d      	adds	r5, r3, #1
 8005656:	2339      	movs	r3, #57	; 0x39
 8005658:	7013      	strb	r3, [r2, #0]
 800565a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800565e:	2b39      	cmp	r3, #57	; 0x39
 8005660:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005664:	d04f      	beq.n	8005706 <_dtoa_r+0xaee>
 8005666:	3301      	adds	r3, #1
 8005668:	7013      	strb	r3, [r2, #0]
 800566a:	e754      	b.n	8005516 <_dtoa_r+0x8fe>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f102 0501 	add.w	r5, r2, #1
 8005674:	dd06      	ble.n	8005684 <_dtoa_r+0xa6c>
 8005676:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800567a:	d0e9      	beq.n	8005650 <_dtoa_r+0xa38>
 800567c:	f108 0801 	add.w	r8, r8, #1
 8005680:	9b05      	ldr	r3, [sp, #20]
 8005682:	e7c2      	b.n	800560a <_dtoa_r+0x9f2>
 8005684:	9a02      	ldr	r2, [sp, #8]
 8005686:	f805 8c01 	strb.w	r8, [r5, #-1]
 800568a:	eba5 030b 	sub.w	r3, r5, fp
 800568e:	4293      	cmp	r3, r2
 8005690:	d021      	beq.n	80056d6 <_dtoa_r+0xabe>
 8005692:	2300      	movs	r3, #0
 8005694:	220a      	movs	r2, #10
 8005696:	9904      	ldr	r1, [sp, #16]
 8005698:	4620      	mov	r0, r4
 800569a:	f000 f8e1 	bl	8005860 <__multadd>
 800569e:	45b1      	cmp	r9, r6
 80056a0:	9004      	str	r0, [sp, #16]
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	f04f 020a 	mov.w	r2, #10
 80056aa:	4649      	mov	r1, r9
 80056ac:	4620      	mov	r0, r4
 80056ae:	d105      	bne.n	80056bc <_dtoa_r+0xaa4>
 80056b0:	f000 f8d6 	bl	8005860 <__multadd>
 80056b4:	4681      	mov	r9, r0
 80056b6:	4606      	mov	r6, r0
 80056b8:	9505      	str	r5, [sp, #20]
 80056ba:	e776      	b.n	80055aa <_dtoa_r+0x992>
 80056bc:	f000 f8d0 	bl	8005860 <__multadd>
 80056c0:	4631      	mov	r1, r6
 80056c2:	4681      	mov	r9, r0
 80056c4:	2300      	movs	r3, #0
 80056c6:	220a      	movs	r2, #10
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 f8c9 	bl	8005860 <__multadd>
 80056ce:	4606      	mov	r6, r0
 80056d0:	e7f2      	b.n	80056b8 <_dtoa_r+0xaa0>
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	2201      	movs	r2, #1
 80056d8:	9904      	ldr	r1, [sp, #16]
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fa36 	bl	8005b4c <__lshift>
 80056e0:	4639      	mov	r1, r7
 80056e2:	9004      	str	r0, [sp, #16]
 80056e4:	f000 fa86 	bl	8005bf4 <__mcmp>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	dcb6      	bgt.n	800565a <_dtoa_r+0xa42>
 80056ec:	d102      	bne.n	80056f4 <_dtoa_r+0xadc>
 80056ee:	f018 0f01 	tst.w	r8, #1
 80056f2:	d1b2      	bne.n	800565a <_dtoa_r+0xa42>
 80056f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80056fe:	f47f af0a 	bne.w	8005516 <_dtoa_r+0x8fe>
 8005702:	4615      	mov	r5, r2
 8005704:	e7f6      	b.n	80056f4 <_dtoa_r+0xadc>
 8005706:	4593      	cmp	fp, r2
 8005708:	d105      	bne.n	8005716 <_dtoa_r+0xafe>
 800570a:	2331      	movs	r3, #49	; 0x31
 800570c:	f10a 0a01 	add.w	sl, sl, #1
 8005710:	f88b 3000 	strb.w	r3, [fp]
 8005714:	e6ff      	b.n	8005516 <_dtoa_r+0x8fe>
 8005716:	4615      	mov	r5, r2
 8005718:	e79f      	b.n	800565a <_dtoa_r+0xa42>
 800571a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005780 <_dtoa_r+0xb68>
 800571e:	e007      	b.n	8005730 <_dtoa_r+0xb18>
 8005720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005722:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005784 <_dtoa_r+0xb6c>
 8005726:	b11b      	cbz	r3, 8005730 <_dtoa_r+0xb18>
 8005728:	f10b 0308 	add.w	r3, fp, #8
 800572c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4658      	mov	r0, fp
 8005732:	b017      	add	sp, #92	; 0x5c
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	9b06      	ldr	r3, [sp, #24]
 800573a:	2b01      	cmp	r3, #1
 800573c:	f77f ae35 	ble.w	80053aa <_dtoa_r+0x792>
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	e649      	b.n	80053da <_dtoa_r+0x7c2>
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dc03      	bgt.n	8005754 <_dtoa_r+0xb3c>
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	2b02      	cmp	r3, #2
 8005750:	f73f aecc 	bgt.w	80054ec <_dtoa_r+0x8d4>
 8005754:	465d      	mov	r5, fp
 8005756:	4639      	mov	r1, r7
 8005758:	9804      	ldr	r0, [sp, #16]
 800575a:	f7ff f9cf 	bl	8004afc <quorem>
 800575e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005762:	f805 8b01 	strb.w	r8, [r5], #1
 8005766:	9a02      	ldr	r2, [sp, #8]
 8005768:	eba5 030b 	sub.w	r3, r5, fp
 800576c:	429a      	cmp	r2, r3
 800576e:	ddb0      	ble.n	80056d2 <_dtoa_r+0xaba>
 8005770:	2300      	movs	r3, #0
 8005772:	220a      	movs	r2, #10
 8005774:	9904      	ldr	r1, [sp, #16]
 8005776:	4620      	mov	r0, r4
 8005778:	f000 f872 	bl	8005860 <__multadd>
 800577c:	9004      	str	r0, [sp, #16]
 800577e:	e7ea      	b.n	8005756 <_dtoa_r+0xb3e>
 8005780:	08006354 	.word	0x08006354
 8005784:	08006378 	.word	0x08006378

08005788 <_localeconv_r>:
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <_localeconv_r+0x14>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a18      	ldr	r0, [r3, #32]
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <_localeconv_r+0x18>)
 8005790:	2800      	cmp	r0, #0
 8005792:	bf08      	it	eq
 8005794:	4618      	moveq	r0, r3
 8005796:	30f0      	adds	r0, #240	; 0xf0
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	20000070 	.word	0x20000070

080057a4 <malloc>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <malloc+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f000 bb45 	b.w	8005e38 <_malloc_r>
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c

080057b4 <memcpy>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	1e43      	subs	r3, r0, #1
 80057b8:	440a      	add	r2, r1
 80057ba:	4291      	cmp	r1, r2
 80057bc:	d100      	bne.n	80057c0 <memcpy+0xc>
 80057be:	bd10      	pop	{r4, pc}
 80057c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c8:	e7f7      	b.n	80057ba <memcpy+0x6>

080057ca <_Balloc>:
 80057ca:	b570      	push	{r4, r5, r6, lr}
 80057cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057ce:	4604      	mov	r4, r0
 80057d0:	460e      	mov	r6, r1
 80057d2:	b93d      	cbnz	r5, 80057e4 <_Balloc+0x1a>
 80057d4:	2010      	movs	r0, #16
 80057d6:	f7ff ffe5 	bl	80057a4 <malloc>
 80057da:	6260      	str	r0, [r4, #36]	; 0x24
 80057dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057e0:	6005      	str	r5, [r0, #0]
 80057e2:	60c5      	str	r5, [r0, #12]
 80057e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80057e6:	68eb      	ldr	r3, [r5, #12]
 80057e8:	b183      	cbz	r3, 800580c <_Balloc+0x42>
 80057ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80057f2:	b9b8      	cbnz	r0, 8005824 <_Balloc+0x5a>
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f506 	lsl.w	r5, r1, r6
 80057fa:	1d6a      	adds	r2, r5, #5
 80057fc:	0092      	lsls	r2, r2, #2
 80057fe:	4620      	mov	r0, r4
 8005800:	f000 fabe 	bl	8005d80 <_calloc_r>
 8005804:	b160      	cbz	r0, 8005820 <_Balloc+0x56>
 8005806:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800580a:	e00e      	b.n	800582a <_Balloc+0x60>
 800580c:	2221      	movs	r2, #33	; 0x21
 800580e:	2104      	movs	r1, #4
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fab5 	bl	8005d80 <_calloc_r>
 8005816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005818:	60e8      	str	r0, [r5, #12]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e4      	bne.n	80057ea <_Balloc+0x20>
 8005820:	2000      	movs	r0, #0
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	6802      	ldr	r2, [r0, #0]
 8005826:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800582a:	2300      	movs	r3, #0
 800582c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005830:	e7f7      	b.n	8005822 <_Balloc+0x58>

08005832 <_Bfree>:
 8005832:	b570      	push	{r4, r5, r6, lr}
 8005834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005836:	4606      	mov	r6, r0
 8005838:	460d      	mov	r5, r1
 800583a:	b93c      	cbnz	r4, 800584c <_Bfree+0x1a>
 800583c:	2010      	movs	r0, #16
 800583e:	f7ff ffb1 	bl	80057a4 <malloc>
 8005842:	6270      	str	r0, [r6, #36]	; 0x24
 8005844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005848:	6004      	str	r4, [r0, #0]
 800584a:	60c4      	str	r4, [r0, #12]
 800584c:	b13d      	cbz	r5, 800585e <_Bfree+0x2c>
 800584e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005850:	686a      	ldr	r2, [r5, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005858:	6029      	str	r1, [r5, #0]
 800585a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800585e:	bd70      	pop	{r4, r5, r6, pc}

08005860 <__multadd>:
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005864:	690d      	ldr	r5, [r1, #16]
 8005866:	461f      	mov	r7, r3
 8005868:	4606      	mov	r6, r0
 800586a:	460c      	mov	r4, r1
 800586c:	f101 0c14 	add.w	ip, r1, #20
 8005870:	2300      	movs	r3, #0
 8005872:	f8dc 0000 	ldr.w	r0, [ip]
 8005876:	b281      	uxth	r1, r0
 8005878:	fb02 7101 	mla	r1, r2, r1, r7
 800587c:	0c0f      	lsrs	r7, r1, #16
 800587e:	0c00      	lsrs	r0, r0, #16
 8005880:	fb02 7000 	mla	r0, r2, r0, r7
 8005884:	b289      	uxth	r1, r1
 8005886:	3301      	adds	r3, #1
 8005888:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800588c:	429d      	cmp	r5, r3
 800588e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005892:	f84c 1b04 	str.w	r1, [ip], #4
 8005896:	dcec      	bgt.n	8005872 <__multadd+0x12>
 8005898:	b1d7      	cbz	r7, 80058d0 <__multadd+0x70>
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	42ab      	cmp	r3, r5
 800589e:	dc12      	bgt.n	80058c6 <__multadd+0x66>
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4630      	mov	r0, r6
 80058a4:	3101      	adds	r1, #1
 80058a6:	f7ff ff90 	bl	80057ca <_Balloc>
 80058aa:	6922      	ldr	r2, [r4, #16]
 80058ac:	3202      	adds	r2, #2
 80058ae:	f104 010c 	add.w	r1, r4, #12
 80058b2:	4680      	mov	r8, r0
 80058b4:	0092      	lsls	r2, r2, #2
 80058b6:	300c      	adds	r0, #12
 80058b8:	f7ff ff7c 	bl	80057b4 <memcpy>
 80058bc:	4621      	mov	r1, r4
 80058be:	4630      	mov	r0, r6
 80058c0:	f7ff ffb7 	bl	8005832 <_Bfree>
 80058c4:	4644      	mov	r4, r8
 80058c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058ca:	3501      	adds	r5, #1
 80058cc:	615f      	str	r7, [r3, #20]
 80058ce:	6125      	str	r5, [r4, #16]
 80058d0:	4620      	mov	r0, r4
 80058d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058d6 <__hi0bits>:
 80058d6:	0c02      	lsrs	r2, r0, #16
 80058d8:	0412      	lsls	r2, r2, #16
 80058da:	4603      	mov	r3, r0
 80058dc:	b9b2      	cbnz	r2, 800590c <__hi0bits+0x36>
 80058de:	0403      	lsls	r3, r0, #16
 80058e0:	2010      	movs	r0, #16
 80058e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80058e6:	bf04      	itt	eq
 80058e8:	021b      	lsleq	r3, r3, #8
 80058ea:	3008      	addeq	r0, #8
 80058ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80058f0:	bf04      	itt	eq
 80058f2:	011b      	lsleq	r3, r3, #4
 80058f4:	3004      	addeq	r0, #4
 80058f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80058fa:	bf04      	itt	eq
 80058fc:	009b      	lsleq	r3, r3, #2
 80058fe:	3002      	addeq	r0, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	db06      	blt.n	8005912 <__hi0bits+0x3c>
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	d503      	bpl.n	8005910 <__hi0bits+0x3a>
 8005908:	3001      	adds	r0, #1
 800590a:	4770      	bx	lr
 800590c:	2000      	movs	r0, #0
 800590e:	e7e8      	b.n	80058e2 <__hi0bits+0xc>
 8005910:	2020      	movs	r0, #32
 8005912:	4770      	bx	lr

08005914 <__lo0bits>:
 8005914:	6803      	ldr	r3, [r0, #0]
 8005916:	f013 0207 	ands.w	r2, r3, #7
 800591a:	4601      	mov	r1, r0
 800591c:	d00b      	beq.n	8005936 <__lo0bits+0x22>
 800591e:	07da      	lsls	r2, r3, #31
 8005920:	d423      	bmi.n	800596a <__lo0bits+0x56>
 8005922:	0798      	lsls	r0, r3, #30
 8005924:	bf49      	itett	mi
 8005926:	085b      	lsrmi	r3, r3, #1
 8005928:	089b      	lsrpl	r3, r3, #2
 800592a:	2001      	movmi	r0, #1
 800592c:	600b      	strmi	r3, [r1, #0]
 800592e:	bf5c      	itt	pl
 8005930:	600b      	strpl	r3, [r1, #0]
 8005932:	2002      	movpl	r0, #2
 8005934:	4770      	bx	lr
 8005936:	b298      	uxth	r0, r3
 8005938:	b9a8      	cbnz	r0, 8005966 <__lo0bits+0x52>
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	2010      	movs	r0, #16
 800593e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005942:	bf04      	itt	eq
 8005944:	0a1b      	lsreq	r3, r3, #8
 8005946:	3008      	addeq	r0, #8
 8005948:	071a      	lsls	r2, r3, #28
 800594a:	bf04      	itt	eq
 800594c:	091b      	lsreq	r3, r3, #4
 800594e:	3004      	addeq	r0, #4
 8005950:	079a      	lsls	r2, r3, #30
 8005952:	bf04      	itt	eq
 8005954:	089b      	lsreq	r3, r3, #2
 8005956:	3002      	addeq	r0, #2
 8005958:	07da      	lsls	r2, r3, #31
 800595a:	d402      	bmi.n	8005962 <__lo0bits+0x4e>
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	d006      	beq.n	800596e <__lo0bits+0x5a>
 8005960:	3001      	adds	r0, #1
 8005962:	600b      	str	r3, [r1, #0]
 8005964:	4770      	bx	lr
 8005966:	4610      	mov	r0, r2
 8005968:	e7e9      	b.n	800593e <__lo0bits+0x2a>
 800596a:	2000      	movs	r0, #0
 800596c:	4770      	bx	lr
 800596e:	2020      	movs	r0, #32
 8005970:	4770      	bx	lr

08005972 <__i2b>:
 8005972:	b510      	push	{r4, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	2101      	movs	r1, #1
 8005978:	f7ff ff27 	bl	80057ca <_Balloc>
 800597c:	2201      	movs	r2, #1
 800597e:	6144      	str	r4, [r0, #20]
 8005980:	6102      	str	r2, [r0, #16]
 8005982:	bd10      	pop	{r4, pc}

08005984 <__multiply>:
 8005984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	4614      	mov	r4, r2
 800598a:	690a      	ldr	r2, [r1, #16]
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	429a      	cmp	r2, r3
 8005990:	bfb8      	it	lt
 8005992:	460b      	movlt	r3, r1
 8005994:	4688      	mov	r8, r1
 8005996:	bfbc      	itt	lt
 8005998:	46a0      	movlt	r8, r4
 800599a:	461c      	movlt	r4, r3
 800599c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80059a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80059a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059ac:	eb07 0609 	add.w	r6, r7, r9
 80059b0:	42b3      	cmp	r3, r6
 80059b2:	bfb8      	it	lt
 80059b4:	3101      	addlt	r1, #1
 80059b6:	f7ff ff08 	bl	80057ca <_Balloc>
 80059ba:	f100 0514 	add.w	r5, r0, #20
 80059be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80059c2:	462b      	mov	r3, r5
 80059c4:	2200      	movs	r2, #0
 80059c6:	4573      	cmp	r3, lr
 80059c8:	d316      	bcc.n	80059f8 <__multiply+0x74>
 80059ca:	f104 0214 	add.w	r2, r4, #20
 80059ce:	f108 0114 	add.w	r1, r8, #20
 80059d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80059d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	9b00      	ldr	r3, [sp, #0]
 80059de:	9201      	str	r2, [sp, #4]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d80c      	bhi.n	80059fe <__multiply+0x7a>
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	dd03      	ble.n	80059f0 <__multiply+0x6c>
 80059e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05d      	beq.n	8005aac <__multiply+0x128>
 80059f0:	6106      	str	r6, [r0, #16]
 80059f2:	b003      	add	sp, #12
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	f843 2b04 	str.w	r2, [r3], #4
 80059fc:	e7e3      	b.n	80059c6 <__multiply+0x42>
 80059fe:	f8b2 b000 	ldrh.w	fp, [r2]
 8005a02:	f1bb 0f00 	cmp.w	fp, #0
 8005a06:	d023      	beq.n	8005a50 <__multiply+0xcc>
 8005a08:	4689      	mov	r9, r1
 8005a0a:	46ac      	mov	ip, r5
 8005a0c:	f04f 0800 	mov.w	r8, #0
 8005a10:	f859 4b04 	ldr.w	r4, [r9], #4
 8005a14:	f8dc a000 	ldr.w	sl, [ip]
 8005a18:	b2a3      	uxth	r3, r4
 8005a1a:	fa1f fa8a 	uxth.w	sl, sl
 8005a1e:	fb0b a303 	mla	r3, fp, r3, sl
 8005a22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a26:	f8dc 4000 	ldr.w	r4, [ip]
 8005a2a:	4443      	add	r3, r8
 8005a2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a30:	fb0b 840a 	mla	r4, fp, sl, r8
 8005a34:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005a38:	46e2      	mov	sl, ip
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a40:	454f      	cmp	r7, r9
 8005a42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a46:	f84a 3b04 	str.w	r3, [sl], #4
 8005a4a:	d82b      	bhi.n	8005aa4 <__multiply+0x120>
 8005a4c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005a56:	3204      	adds	r2, #4
 8005a58:	f1ba 0f00 	cmp.w	sl, #0
 8005a5c:	d020      	beq.n	8005aa0 <__multiply+0x11c>
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	4689      	mov	r9, r1
 8005a62:	46a8      	mov	r8, r5
 8005a64:	f04f 0b00 	mov.w	fp, #0
 8005a68:	f8b9 c000 	ldrh.w	ip, [r9]
 8005a6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005a70:	fb0a 440c 	mla	r4, sl, ip, r4
 8005a74:	445c      	add	r4, fp
 8005a76:	46c4      	mov	ip, r8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a82:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a86:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	fb0a b303 	mla	r3, sl, r3, fp
 8005a90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005a94:	454f      	cmp	r7, r9
 8005a96:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005a9a:	d805      	bhi.n	8005aa8 <__multiply+0x124>
 8005a9c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005aa0:	3504      	adds	r5, #4
 8005aa2:	e79b      	b.n	80059dc <__multiply+0x58>
 8005aa4:	46d4      	mov	ip, sl
 8005aa6:	e7b3      	b.n	8005a10 <__multiply+0x8c>
 8005aa8:	46e0      	mov	r8, ip
 8005aaa:	e7dd      	b.n	8005a68 <__multiply+0xe4>
 8005aac:	3e01      	subs	r6, #1
 8005aae:	e799      	b.n	80059e4 <__multiply+0x60>

08005ab0 <__pow5mult>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4615      	mov	r5, r2
 8005ab6:	f012 0203 	ands.w	r2, r2, #3
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	d007      	beq.n	8005ad0 <__pow5mult+0x20>
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	4c21      	ldr	r4, [pc, #132]	; (8005b48 <__pow5mult+0x98>)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005aca:	f7ff fec9 	bl	8005860 <__multadd>
 8005ace:	4607      	mov	r7, r0
 8005ad0:	10ad      	asrs	r5, r5, #2
 8005ad2:	d035      	beq.n	8005b40 <__pow5mult+0x90>
 8005ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ad6:	b93c      	cbnz	r4, 8005ae8 <__pow5mult+0x38>
 8005ad8:	2010      	movs	r0, #16
 8005ada:	f7ff fe63 	bl	80057a4 <malloc>
 8005ade:	6270      	str	r0, [r6, #36]	; 0x24
 8005ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ae4:	6004      	str	r4, [r0, #0]
 8005ae6:	60c4      	str	r4, [r0, #12]
 8005ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005af0:	b94c      	cbnz	r4, 8005b06 <__pow5mult+0x56>
 8005af2:	f240 2171 	movw	r1, #625	; 0x271
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7ff ff3b 	bl	8005972 <__i2b>
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b02:	4604      	mov	r4, r0
 8005b04:	6003      	str	r3, [r0, #0]
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	07eb      	lsls	r3, r5, #31
 8005b0c:	d50a      	bpl.n	8005b24 <__pow5mult+0x74>
 8005b0e:	4639      	mov	r1, r7
 8005b10:	4622      	mov	r2, r4
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ff36 	bl	8005984 <__multiply>
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4681      	mov	r9, r0
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7ff fe88 	bl	8005832 <_Bfree>
 8005b22:	464f      	mov	r7, r9
 8005b24:	106d      	asrs	r5, r5, #1
 8005b26:	d00b      	beq.n	8005b40 <__pow5mult+0x90>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	b938      	cbnz	r0, 8005b3c <__pow5mult+0x8c>
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7ff ff27 	bl	8005984 <__multiply>
 8005b36:	6020      	str	r0, [r4, #0]
 8005b38:	f8c0 8000 	str.w	r8, [r0]
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	e7e4      	b.n	8005b0a <__pow5mult+0x5a>
 8005b40:	4638      	mov	r0, r7
 8005b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b46:	bf00      	nop
 8005b48:	08006478 	.word	0x08006478

08005b4c <__lshift>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	460c      	mov	r4, r1
 8005b52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	6849      	ldr	r1, [r1, #4]
 8005b5a:	eb0a 0903 	add.w	r9, sl, r3
 8005b5e:	68a3      	ldr	r3, [r4, #8]
 8005b60:	4607      	mov	r7, r0
 8005b62:	4616      	mov	r6, r2
 8005b64:	f109 0501 	add.w	r5, r9, #1
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	db32      	blt.n	8005bd2 <__lshift+0x86>
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff fe2c 	bl	80057ca <_Balloc>
 8005b72:	2300      	movs	r3, #0
 8005b74:	4680      	mov	r8, r0
 8005b76:	f100 0114 	add.w	r1, r0, #20
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4553      	cmp	r3, sl
 8005b7e:	db2b      	blt.n	8005bd8 <__lshift+0x8c>
 8005b80:	6920      	ldr	r0, [r4, #16]
 8005b82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b86:	f104 0314 	add.w	r3, r4, #20
 8005b8a:	f016 021f 	ands.w	r2, r6, #31
 8005b8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b96:	d025      	beq.n	8005be4 <__lshift+0x98>
 8005b98:	f1c2 0e20 	rsb	lr, r2, #32
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	681e      	ldr	r6, [r3, #0]
 8005ba0:	468a      	mov	sl, r1
 8005ba2:	4096      	lsls	r6, r2
 8005ba4:	4330      	orrs	r0, r6
 8005ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8005baa:	f853 0b04 	ldr.w	r0, [r3], #4
 8005bae:	459c      	cmp	ip, r3
 8005bb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005bb4:	d814      	bhi.n	8005be0 <__lshift+0x94>
 8005bb6:	6048      	str	r0, [r1, #4]
 8005bb8:	b108      	cbz	r0, 8005bbe <__lshift+0x72>
 8005bba:	f109 0502 	add.w	r5, r9, #2
 8005bbe:	3d01      	subs	r5, #1
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f7ff fe33 	bl	8005832 <_Bfree>
 8005bcc:	4640      	mov	r0, r8
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	3101      	adds	r1, #1
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	e7c7      	b.n	8005b68 <__lshift+0x1c>
 8005bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	e7cd      	b.n	8005b7c <__lshift+0x30>
 8005be0:	4651      	mov	r1, sl
 8005be2:	e7dc      	b.n	8005b9e <__lshift+0x52>
 8005be4:	3904      	subs	r1, #4
 8005be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bea:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bee:	459c      	cmp	ip, r3
 8005bf0:	d8f9      	bhi.n	8005be6 <__lshift+0x9a>
 8005bf2:	e7e4      	b.n	8005bbe <__lshift+0x72>

08005bf4 <__mcmp>:
 8005bf4:	6903      	ldr	r3, [r0, #16]
 8005bf6:	690a      	ldr	r2, [r1, #16]
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	b530      	push	{r4, r5, lr}
 8005bfc:	d10c      	bne.n	8005c18 <__mcmp+0x24>
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	3014      	adds	r0, #20
 8005c02:	3114      	adds	r1, #20
 8005c04:	1884      	adds	r4, r0, r2
 8005c06:	4411      	add	r1, r2
 8005c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c10:	4295      	cmp	r5, r2
 8005c12:	d003      	beq.n	8005c1c <__mcmp+0x28>
 8005c14:	d305      	bcc.n	8005c22 <__mcmp+0x2e>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd30      	pop	{r4, r5, pc}
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d3f3      	bcc.n	8005c08 <__mcmp+0x14>
 8005c20:	e7fa      	b.n	8005c18 <__mcmp+0x24>
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c26:	e7f7      	b.n	8005c18 <__mcmp+0x24>

08005c28 <__mdiff>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	4607      	mov	r7, r0
 8005c30:	4611      	mov	r1, r2
 8005c32:	4628      	mov	r0, r5
 8005c34:	4614      	mov	r4, r2
 8005c36:	f7ff ffdd 	bl	8005bf4 <__mcmp>
 8005c3a:	1e06      	subs	r6, r0, #0
 8005c3c:	d108      	bne.n	8005c50 <__mdiff+0x28>
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff fdc2 	bl	80057ca <_Balloc>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c50:	bfa4      	itt	ge
 8005c52:	4623      	movge	r3, r4
 8005c54:	462c      	movge	r4, r5
 8005c56:	4638      	mov	r0, r7
 8005c58:	6861      	ldr	r1, [r4, #4]
 8005c5a:	bfa6      	itte	ge
 8005c5c:	461d      	movge	r5, r3
 8005c5e:	2600      	movge	r6, #0
 8005c60:	2601      	movlt	r6, #1
 8005c62:	f7ff fdb2 	bl	80057ca <_Balloc>
 8005c66:	692b      	ldr	r3, [r5, #16]
 8005c68:	60c6      	str	r6, [r0, #12]
 8005c6a:	6926      	ldr	r6, [r4, #16]
 8005c6c:	f105 0914 	add.w	r9, r5, #20
 8005c70:	f104 0214 	add.w	r2, r4, #20
 8005c74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005c78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005c7c:	f100 0514 	add.w	r5, r0, #20
 8005c80:	f04f 0e00 	mov.w	lr, #0
 8005c84:	f852 ab04 	ldr.w	sl, [r2], #4
 8005c88:	f859 4b04 	ldr.w	r4, [r9], #4
 8005c8c:	fa1e f18a 	uxtah	r1, lr, sl
 8005c90:	b2a3      	uxth	r3, r4
 8005c92:	1ac9      	subs	r1, r1, r3
 8005c94:	0c23      	lsrs	r3, r4, #16
 8005c96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005c9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c9e:	b289      	uxth	r1, r1
 8005ca0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ca4:	45c8      	cmp	r8, r9
 8005ca6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005caa:	4694      	mov	ip, r2
 8005cac:	f845 3b04 	str.w	r3, [r5], #4
 8005cb0:	d8e8      	bhi.n	8005c84 <__mdiff+0x5c>
 8005cb2:	45bc      	cmp	ip, r7
 8005cb4:	d304      	bcc.n	8005cc0 <__mdiff+0x98>
 8005cb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005cba:	b183      	cbz	r3, 8005cde <__mdiff+0xb6>
 8005cbc:	6106      	str	r6, [r0, #16]
 8005cbe:	e7c5      	b.n	8005c4c <__mdiff+0x24>
 8005cc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cc4:	fa1e f381 	uxtah	r3, lr, r1
 8005cc8:	141a      	asrs	r2, r3, #16
 8005cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005cd8:	f845 3b04 	str.w	r3, [r5], #4
 8005cdc:	e7e9      	b.n	8005cb2 <__mdiff+0x8a>
 8005cde:	3e01      	subs	r6, #1
 8005ce0:	e7e9      	b.n	8005cb6 <__mdiff+0x8e>

08005ce2 <__d2b>:
 8005ce2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	2101      	movs	r1, #1
 8005cea:	ec59 8b10 	vmov	r8, r9, d0
 8005cee:	4615      	mov	r5, r2
 8005cf0:	f7ff fd6b 	bl	80057ca <_Balloc>
 8005cf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cfe:	bb34      	cbnz	r4, 8005d4e <__d2b+0x6c>
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	f1b8 0300 	subs.w	r3, r8, #0
 8005d06:	d027      	beq.n	8005d58 <__d2b+0x76>
 8005d08:	a802      	add	r0, sp, #8
 8005d0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005d0e:	f7ff fe01 	bl	8005914 <__lo0bits>
 8005d12:	9900      	ldr	r1, [sp, #0]
 8005d14:	b1f0      	cbz	r0, 8005d54 <__d2b+0x72>
 8005d16:	9a01      	ldr	r2, [sp, #4]
 8005d18:	f1c0 0320 	rsb	r3, r0, #32
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	430b      	orrs	r3, r1
 8005d22:	40c2      	lsrs	r2, r0
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	9201      	str	r2, [sp, #4]
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf14      	ite	ne
 8005d30:	2102      	movne	r1, #2
 8005d32:	2101      	moveq	r1, #1
 8005d34:	6139      	str	r1, [r7, #16]
 8005d36:	b1c4      	cbz	r4, 8005d6a <__d2b+0x88>
 8005d38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d3c:	4404      	add	r4, r0
 8005d3e:	6034      	str	r4, [r6, #0]
 8005d40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d44:	6028      	str	r0, [r5, #0]
 8005d46:	4638      	mov	r0, r7
 8005d48:	b003      	add	sp, #12
 8005d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d52:	e7d5      	b.n	8005d00 <__d2b+0x1e>
 8005d54:	6179      	str	r1, [r7, #20]
 8005d56:	e7e7      	b.n	8005d28 <__d2b+0x46>
 8005d58:	a801      	add	r0, sp, #4
 8005d5a:	f7ff fddb 	bl	8005914 <__lo0bits>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	2101      	movs	r1, #1
 8005d64:	6139      	str	r1, [r7, #16]
 8005d66:	3020      	adds	r0, #32
 8005d68:	e7e5      	b.n	8005d36 <__d2b+0x54>
 8005d6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005d6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d72:	6030      	str	r0, [r6, #0]
 8005d74:	6918      	ldr	r0, [r3, #16]
 8005d76:	f7ff fdae 	bl	80058d6 <__hi0bits>
 8005d7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005d7e:	e7e1      	b.n	8005d44 <__d2b+0x62>

08005d80 <_calloc_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	fb02 f401 	mul.w	r4, r2, r1
 8005d86:	4621      	mov	r1, r4
 8005d88:	f000 f856 	bl	8005e38 <_malloc_r>
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	b118      	cbz	r0, 8005d98 <_calloc_r+0x18>
 8005d90:	4622      	mov	r2, r4
 8005d92:	2100      	movs	r1, #0
 8005d94:	f7fe fa2e 	bl	80041f4 <memset>
 8005d98:	4628      	mov	r0, r5
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}

08005d9c <_free_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4605      	mov	r5, r0
 8005da0:	2900      	cmp	r1, #0
 8005da2:	d045      	beq.n	8005e30 <_free_r+0x94>
 8005da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da8:	1f0c      	subs	r4, r1, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfb8      	it	lt
 8005dae:	18e4      	addlt	r4, r4, r3
 8005db0:	f000 fa29 	bl	8006206 <__malloc_lock>
 8005db4:	4a1f      	ldr	r2, [pc, #124]	; (8005e34 <_free_r+0x98>)
 8005db6:	6813      	ldr	r3, [r2, #0]
 8005db8:	4610      	mov	r0, r2
 8005dba:	b933      	cbnz	r3, 8005dca <_free_r+0x2e>
 8005dbc:	6063      	str	r3, [r4, #4]
 8005dbe:	6014      	str	r4, [r2, #0]
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc6:	f000 ba1f 	b.w	8006208 <__malloc_unlock>
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	d90c      	bls.n	8005de8 <_free_r+0x4c>
 8005dce:	6821      	ldr	r1, [r4, #0]
 8005dd0:	1862      	adds	r2, r4, r1
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	bf04      	itt	eq
 8005dd6:	681a      	ldreq	r2, [r3, #0]
 8005dd8:	685b      	ldreq	r3, [r3, #4]
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	bf04      	itt	eq
 8005dde:	1852      	addeq	r2, r2, r1
 8005de0:	6022      	streq	r2, [r4, #0]
 8005de2:	6004      	str	r4, [r0, #0]
 8005de4:	e7ec      	b.n	8005dc0 <_free_r+0x24>
 8005de6:	4613      	mov	r3, r2
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	b10a      	cbz	r2, 8005df0 <_free_r+0x54>
 8005dec:	42a2      	cmp	r2, r4
 8005dee:	d9fa      	bls.n	8005de6 <_free_r+0x4a>
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	1858      	adds	r0, r3, r1
 8005df4:	42a0      	cmp	r0, r4
 8005df6:	d10b      	bne.n	8005e10 <_free_r+0x74>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	1858      	adds	r0, r3, r1
 8005dfe:	4282      	cmp	r2, r0
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	d1dd      	bne.n	8005dc0 <_free_r+0x24>
 8005e04:	6810      	ldr	r0, [r2, #0]
 8005e06:	6852      	ldr	r2, [r2, #4]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	e7d7      	b.n	8005dc0 <_free_r+0x24>
 8005e10:	d902      	bls.n	8005e18 <_free_r+0x7c>
 8005e12:	230c      	movs	r3, #12
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	e7d3      	b.n	8005dc0 <_free_r+0x24>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	bf04      	itt	eq
 8005e20:	6811      	ldreq	r1, [r2, #0]
 8005e22:	6852      	ldreq	r2, [r2, #4]
 8005e24:	6062      	str	r2, [r4, #4]
 8005e26:	bf04      	itt	eq
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	605c      	str	r4, [r3, #4]
 8005e2e:	e7c7      	b.n	8005dc0 <_free_r+0x24>
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	20000200 	.word	0x20000200

08005e38 <_malloc_r>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	1ccd      	adds	r5, r1, #3
 8005e3c:	f025 0503 	bic.w	r5, r5, #3
 8005e40:	3508      	adds	r5, #8
 8005e42:	2d0c      	cmp	r5, #12
 8005e44:	bf38      	it	cc
 8005e46:	250c      	movcc	r5, #12
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	db01      	blt.n	8005e52 <_malloc_r+0x1a>
 8005e4e:	42a9      	cmp	r1, r5
 8005e50:	d903      	bls.n	8005e5a <_malloc_r+0x22>
 8005e52:	230c      	movs	r3, #12
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	2000      	movs	r0, #0
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	f000 f9d4 	bl	8006206 <__malloc_lock>
 8005e5e:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <_malloc_r+0xac>)
 8005e60:	6814      	ldr	r4, [r2, #0]
 8005e62:	4621      	mov	r1, r4
 8005e64:	b991      	cbnz	r1, 8005e8c <_malloc_r+0x54>
 8005e66:	4c20      	ldr	r4, [pc, #128]	; (8005ee8 <_malloc_r+0xb0>)
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	b91b      	cbnz	r3, 8005e74 <_malloc_r+0x3c>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f000 f98f 	bl	8006190 <_sbrk_r>
 8005e72:	6020      	str	r0, [r4, #0]
 8005e74:	4629      	mov	r1, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 f98a 	bl	8006190 <_sbrk_r>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d124      	bne.n	8005eca <_malloc_r+0x92>
 8005e80:	230c      	movs	r3, #12
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f9bf 	bl	8006208 <__malloc_unlock>
 8005e8a:	e7e4      	b.n	8005e56 <_malloc_r+0x1e>
 8005e8c:	680b      	ldr	r3, [r1, #0]
 8005e8e:	1b5b      	subs	r3, r3, r5
 8005e90:	d418      	bmi.n	8005ec4 <_malloc_r+0x8c>
 8005e92:	2b0b      	cmp	r3, #11
 8005e94:	d90f      	bls.n	8005eb6 <_malloc_r+0x7e>
 8005e96:	600b      	str	r3, [r1, #0]
 8005e98:	50cd      	str	r5, [r1, r3]
 8005e9a:	18cc      	adds	r4, r1, r3
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f000 f9b3 	bl	8006208 <__malloc_unlock>
 8005ea2:	f104 000b 	add.w	r0, r4, #11
 8005ea6:	1d23      	adds	r3, r4, #4
 8005ea8:	f020 0007 	bic.w	r0, r0, #7
 8005eac:	1ac3      	subs	r3, r0, r3
 8005eae:	d0d3      	beq.n	8005e58 <_malloc_r+0x20>
 8005eb0:	425a      	negs	r2, r3
 8005eb2:	50e2      	str	r2, [r4, r3]
 8005eb4:	e7d0      	b.n	8005e58 <_malloc_r+0x20>
 8005eb6:	428c      	cmp	r4, r1
 8005eb8:	684b      	ldr	r3, [r1, #4]
 8005eba:	bf16      	itet	ne
 8005ebc:	6063      	strne	r3, [r4, #4]
 8005ebe:	6013      	streq	r3, [r2, #0]
 8005ec0:	460c      	movne	r4, r1
 8005ec2:	e7eb      	b.n	8005e9c <_malloc_r+0x64>
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	6849      	ldr	r1, [r1, #4]
 8005ec8:	e7cc      	b.n	8005e64 <_malloc_r+0x2c>
 8005eca:	1cc4      	adds	r4, r0, #3
 8005ecc:	f024 0403 	bic.w	r4, r4, #3
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d005      	beq.n	8005ee0 <_malloc_r+0xa8>
 8005ed4:	1a21      	subs	r1, r4, r0
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 f95a 	bl	8006190 <_sbrk_r>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d0cf      	beq.n	8005e80 <_malloc_r+0x48>
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	e7db      	b.n	8005e9c <_malloc_r+0x64>
 8005ee4:	20000200 	.word	0x20000200
 8005ee8:	20000204 	.word	0x20000204

08005eec <__ssputs_r>:
 8005eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef0:	688e      	ldr	r6, [r1, #8]
 8005ef2:	429e      	cmp	r6, r3
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	4690      	mov	r8, r2
 8005efa:	4699      	mov	r9, r3
 8005efc:	d837      	bhi.n	8005f6e <__ssputs_r+0x82>
 8005efe:	898a      	ldrh	r2, [r1, #12]
 8005f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f04:	d031      	beq.n	8005f6a <__ssputs_r+0x7e>
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	6909      	ldr	r1, [r1, #16]
 8005f0a:	1a6f      	subs	r7, r5, r1
 8005f0c:	6965      	ldr	r5, [r4, #20]
 8005f0e:	2302      	movs	r3, #2
 8005f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8005f18:	f109 0301 	add.w	r3, r9, #1
 8005f1c:	443b      	add	r3, r7
 8005f1e:	429d      	cmp	r5, r3
 8005f20:	bf38      	it	cc
 8005f22:	461d      	movcc	r5, r3
 8005f24:	0553      	lsls	r3, r2, #21
 8005f26:	d530      	bpl.n	8005f8a <__ssputs_r+0x9e>
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7ff ff85 	bl	8005e38 <_malloc_r>
 8005f2e:	4606      	mov	r6, r0
 8005f30:	b950      	cbnz	r0, 8005f48 <__ssputs_r+0x5c>
 8005f32:	230c      	movs	r3, #12
 8005f34:	f8ca 3000 	str.w	r3, [sl]
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f3e:	81a3      	strh	r3, [r4, #12]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	463a      	mov	r2, r7
 8005f4a:	6921      	ldr	r1, [r4, #16]
 8005f4c:	f7ff fc32 	bl	80057b4 <memcpy>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	81a3      	strh	r3, [r4, #12]
 8005f5c:	6126      	str	r6, [r4, #16]
 8005f5e:	6165      	str	r5, [r4, #20]
 8005f60:	443e      	add	r6, r7
 8005f62:	1bed      	subs	r5, r5, r7
 8005f64:	6026      	str	r6, [r4, #0]
 8005f66:	60a5      	str	r5, [r4, #8]
 8005f68:	464e      	mov	r6, r9
 8005f6a:	454e      	cmp	r6, r9
 8005f6c:	d900      	bls.n	8005f70 <__ssputs_r+0x84>
 8005f6e:	464e      	mov	r6, r9
 8005f70:	4632      	mov	r2, r6
 8005f72:	4641      	mov	r1, r8
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	f000 f92d 	bl	80061d4 <memmove>
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	1b9b      	subs	r3, r3, r6
 8005f7e:	60a3      	str	r3, [r4, #8]
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	441e      	add	r6, r3
 8005f84:	6026      	str	r6, [r4, #0]
 8005f86:	2000      	movs	r0, #0
 8005f88:	e7dc      	b.n	8005f44 <__ssputs_r+0x58>
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	f000 f93d 	bl	800620a <_realloc_r>
 8005f90:	4606      	mov	r6, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d1e2      	bne.n	8005f5c <__ssputs_r+0x70>
 8005f96:	6921      	ldr	r1, [r4, #16]
 8005f98:	4650      	mov	r0, sl
 8005f9a:	f7ff feff 	bl	8005d9c <_free_r>
 8005f9e:	e7c8      	b.n	8005f32 <__ssputs_r+0x46>

08005fa0 <_svfiprintf_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	461d      	mov	r5, r3
 8005fa6:	898b      	ldrh	r3, [r1, #12]
 8005fa8:	061f      	lsls	r7, r3, #24
 8005faa:	b09d      	sub	sp, #116	; 0x74
 8005fac:	4680      	mov	r8, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	d50f      	bpl.n	8005fd4 <_svfiprintf_r+0x34>
 8005fb4:	690b      	ldr	r3, [r1, #16]
 8005fb6:	b96b      	cbnz	r3, 8005fd4 <_svfiprintf_r+0x34>
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	f7ff ff3d 	bl	8005e38 <_malloc_r>
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	6120      	str	r0, [r4, #16]
 8005fc2:	b928      	cbnz	r0, 8005fd0 <_svfiprintf_r+0x30>
 8005fc4:	230c      	movs	r3, #12
 8005fc6:	f8c8 3000 	str.w	r3, [r8]
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fce:	e0c8      	b.n	8006162 <_svfiprintf_r+0x1c2>
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	6163      	str	r3, [r4, #20]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fde:	2330      	movs	r3, #48	; 0x30
 8005fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fe4:	9503      	str	r5, [sp, #12]
 8005fe6:	f04f 0b01 	mov.w	fp, #1
 8005fea:	4637      	mov	r7, r6
 8005fec:	463d      	mov	r5, r7
 8005fee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ff2:	b10b      	cbz	r3, 8005ff8 <_svfiprintf_r+0x58>
 8005ff4:	2b25      	cmp	r3, #37	; 0x25
 8005ff6:	d13e      	bne.n	8006076 <_svfiprintf_r+0xd6>
 8005ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ffc:	d00b      	beq.n	8006016 <_svfiprintf_r+0x76>
 8005ffe:	4653      	mov	r3, sl
 8006000:	4632      	mov	r2, r6
 8006002:	4621      	mov	r1, r4
 8006004:	4640      	mov	r0, r8
 8006006:	f7ff ff71 	bl	8005eec <__ssputs_r>
 800600a:	3001      	adds	r0, #1
 800600c:	f000 80a4 	beq.w	8006158 <_svfiprintf_r+0x1b8>
 8006010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006012:	4453      	add	r3, sl
 8006014:	9309      	str	r3, [sp, #36]	; 0x24
 8006016:	783b      	ldrb	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 809d 	beq.w	8006158 <_svfiprintf_r+0x1b8>
 800601e:	2300      	movs	r3, #0
 8006020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	9307      	str	r3, [sp, #28]
 800602c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006030:	931a      	str	r3, [sp, #104]	; 0x68
 8006032:	462f      	mov	r7, r5
 8006034:	2205      	movs	r2, #5
 8006036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800603a:	4850      	ldr	r0, [pc, #320]	; (800617c <_svfiprintf_r+0x1dc>)
 800603c:	f7fa f8d8 	bl	80001f0 <memchr>
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	b9d0      	cbnz	r0, 800607a <_svfiprintf_r+0xda>
 8006044:	06d9      	lsls	r1, r3, #27
 8006046:	bf44      	itt	mi
 8006048:	2220      	movmi	r2, #32
 800604a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800604e:	071a      	lsls	r2, r3, #28
 8006050:	bf44      	itt	mi
 8006052:	222b      	movmi	r2, #43	; 0x2b
 8006054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006058:	782a      	ldrb	r2, [r5, #0]
 800605a:	2a2a      	cmp	r2, #42	; 0x2a
 800605c:	d015      	beq.n	800608a <_svfiprintf_r+0xea>
 800605e:	9a07      	ldr	r2, [sp, #28]
 8006060:	462f      	mov	r7, r5
 8006062:	2000      	movs	r0, #0
 8006064:	250a      	movs	r5, #10
 8006066:	4639      	mov	r1, r7
 8006068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606c:	3b30      	subs	r3, #48	; 0x30
 800606e:	2b09      	cmp	r3, #9
 8006070:	d94d      	bls.n	800610e <_svfiprintf_r+0x16e>
 8006072:	b1b8      	cbz	r0, 80060a4 <_svfiprintf_r+0x104>
 8006074:	e00f      	b.n	8006096 <_svfiprintf_r+0xf6>
 8006076:	462f      	mov	r7, r5
 8006078:	e7b8      	b.n	8005fec <_svfiprintf_r+0x4c>
 800607a:	4a40      	ldr	r2, [pc, #256]	; (800617c <_svfiprintf_r+0x1dc>)
 800607c:	1a80      	subs	r0, r0, r2
 800607e:	fa0b f000 	lsl.w	r0, fp, r0
 8006082:	4318      	orrs	r0, r3
 8006084:	9004      	str	r0, [sp, #16]
 8006086:	463d      	mov	r5, r7
 8006088:	e7d3      	b.n	8006032 <_svfiprintf_r+0x92>
 800608a:	9a03      	ldr	r2, [sp, #12]
 800608c:	1d11      	adds	r1, r2, #4
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	9103      	str	r1, [sp, #12]
 8006092:	2a00      	cmp	r2, #0
 8006094:	db01      	blt.n	800609a <_svfiprintf_r+0xfa>
 8006096:	9207      	str	r2, [sp, #28]
 8006098:	e004      	b.n	80060a4 <_svfiprintf_r+0x104>
 800609a:	4252      	negs	r2, r2
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	9207      	str	r2, [sp, #28]
 80060a2:	9304      	str	r3, [sp, #16]
 80060a4:	783b      	ldrb	r3, [r7, #0]
 80060a6:	2b2e      	cmp	r3, #46	; 0x2e
 80060a8:	d10c      	bne.n	80060c4 <_svfiprintf_r+0x124>
 80060aa:	787b      	ldrb	r3, [r7, #1]
 80060ac:	2b2a      	cmp	r3, #42	; 0x2a
 80060ae:	d133      	bne.n	8006118 <_svfiprintf_r+0x178>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9203      	str	r2, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfb8      	it	lt
 80060bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80060c0:	3702      	adds	r7, #2
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	4d2e      	ldr	r5, [pc, #184]	; (8006180 <_svfiprintf_r+0x1e0>)
 80060c6:	7839      	ldrb	r1, [r7, #0]
 80060c8:	2203      	movs	r2, #3
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7fa f890 	bl	80001f0 <memchr>
 80060d0:	b138      	cbz	r0, 80060e2 <_svfiprintf_r+0x142>
 80060d2:	2340      	movs	r3, #64	; 0x40
 80060d4:	1b40      	subs	r0, r0, r5
 80060d6:	fa03 f000 	lsl.w	r0, r3, r0
 80060da:	9b04      	ldr	r3, [sp, #16]
 80060dc:	4303      	orrs	r3, r0
 80060de:	3701      	adds	r7, #1
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	7839      	ldrb	r1, [r7, #0]
 80060e4:	4827      	ldr	r0, [pc, #156]	; (8006184 <_svfiprintf_r+0x1e4>)
 80060e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ea:	2206      	movs	r2, #6
 80060ec:	1c7e      	adds	r6, r7, #1
 80060ee:	f7fa f87f 	bl	80001f0 <memchr>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d038      	beq.n	8006168 <_svfiprintf_r+0x1c8>
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <_svfiprintf_r+0x1e8>)
 80060f8:	bb13      	cbnz	r3, 8006140 <_svfiprintf_r+0x1a0>
 80060fa:	9b03      	ldr	r3, [sp, #12]
 80060fc:	3307      	adds	r3, #7
 80060fe:	f023 0307 	bic.w	r3, r3, #7
 8006102:	3308      	adds	r3, #8
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	444b      	add	r3, r9
 800610a:	9309      	str	r3, [sp, #36]	; 0x24
 800610c:	e76d      	b.n	8005fea <_svfiprintf_r+0x4a>
 800610e:	fb05 3202 	mla	r2, r5, r2, r3
 8006112:	2001      	movs	r0, #1
 8006114:	460f      	mov	r7, r1
 8006116:	e7a6      	b.n	8006066 <_svfiprintf_r+0xc6>
 8006118:	2300      	movs	r3, #0
 800611a:	3701      	adds	r7, #1
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	4619      	mov	r1, r3
 8006120:	250a      	movs	r5, #10
 8006122:	4638      	mov	r0, r7
 8006124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006128:	3a30      	subs	r2, #48	; 0x30
 800612a:	2a09      	cmp	r2, #9
 800612c:	d903      	bls.n	8006136 <_svfiprintf_r+0x196>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0c8      	beq.n	80060c4 <_svfiprintf_r+0x124>
 8006132:	9105      	str	r1, [sp, #20]
 8006134:	e7c6      	b.n	80060c4 <_svfiprintf_r+0x124>
 8006136:	fb05 2101 	mla	r1, r5, r1, r2
 800613a:	2301      	movs	r3, #1
 800613c:	4607      	mov	r7, r0
 800613e:	e7f0      	b.n	8006122 <_svfiprintf_r+0x182>
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4622      	mov	r2, r4
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <_svfiprintf_r+0x1ec>)
 8006148:	a904      	add	r1, sp, #16
 800614a:	4640      	mov	r0, r8
 800614c:	f7fe f8ee 	bl	800432c <_printf_float>
 8006150:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006154:	4681      	mov	r9, r0
 8006156:	d1d6      	bne.n	8006106 <_svfiprintf_r+0x166>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	065b      	lsls	r3, r3, #25
 800615c:	f53f af35 	bmi.w	8005fca <_svfiprintf_r+0x2a>
 8006160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006162:	b01d      	add	sp, #116	; 0x74
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	ab03      	add	r3, sp, #12
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4622      	mov	r2, r4
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <_svfiprintf_r+0x1ec>)
 8006170:	a904      	add	r1, sp, #16
 8006172:	4640      	mov	r0, r8
 8006174:	f7fe fb90 	bl	8004898 <_printf_i>
 8006178:	e7ea      	b.n	8006150 <_svfiprintf_r+0x1b0>
 800617a:	bf00      	nop
 800617c:	08006484 	.word	0x08006484
 8006180:	0800648a 	.word	0x0800648a
 8006184:	0800648e 	.word	0x0800648e
 8006188:	0800432d 	.word	0x0800432d
 800618c:	08005eed 	.word	0x08005eed

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4c06      	ldr	r4, [pc, #24]	; (80061ac <_sbrk_r+0x1c>)
 8006194:	2300      	movs	r3, #0
 8006196:	4605      	mov	r5, r0
 8006198:	4608      	mov	r0, r1
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	f7fd ff74 	bl	8004088 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20000348 	.word	0x20000348

080061b0 <__ascii_mbtowc>:
 80061b0:	b082      	sub	sp, #8
 80061b2:	b901      	cbnz	r1, 80061b6 <__ascii_mbtowc+0x6>
 80061b4:	a901      	add	r1, sp, #4
 80061b6:	b142      	cbz	r2, 80061ca <__ascii_mbtowc+0x1a>
 80061b8:	b14b      	cbz	r3, 80061ce <__ascii_mbtowc+0x1e>
 80061ba:	7813      	ldrb	r3, [r2, #0]
 80061bc:	600b      	str	r3, [r1, #0]
 80061be:	7812      	ldrb	r2, [r2, #0]
 80061c0:	1c10      	adds	r0, r2, #0
 80061c2:	bf18      	it	ne
 80061c4:	2001      	movne	r0, #1
 80061c6:	b002      	add	sp, #8
 80061c8:	4770      	bx	lr
 80061ca:	4610      	mov	r0, r2
 80061cc:	e7fb      	b.n	80061c6 <__ascii_mbtowc+0x16>
 80061ce:	f06f 0001 	mvn.w	r0, #1
 80061d2:	e7f8      	b.n	80061c6 <__ascii_mbtowc+0x16>

080061d4 <memmove>:
 80061d4:	4288      	cmp	r0, r1
 80061d6:	b510      	push	{r4, lr}
 80061d8:	eb01 0302 	add.w	r3, r1, r2
 80061dc:	d807      	bhi.n	80061ee <memmove+0x1a>
 80061de:	1e42      	subs	r2, r0, #1
 80061e0:	4299      	cmp	r1, r3
 80061e2:	d00a      	beq.n	80061fa <memmove+0x26>
 80061e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80061ec:	e7f8      	b.n	80061e0 <memmove+0xc>
 80061ee:	4283      	cmp	r3, r0
 80061f0:	d9f5      	bls.n	80061de <memmove+0xa>
 80061f2:	1881      	adds	r1, r0, r2
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	42d3      	cmn	r3, r2
 80061f8:	d100      	bne.n	80061fc <memmove+0x28>
 80061fa:	bd10      	pop	{r4, pc}
 80061fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006200:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006204:	e7f7      	b.n	80061f6 <memmove+0x22>

08006206 <__malloc_lock>:
 8006206:	4770      	bx	lr

08006208 <__malloc_unlock>:
 8006208:	4770      	bx	lr

0800620a <_realloc_r>:
 800620a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620c:	4607      	mov	r7, r0
 800620e:	4614      	mov	r4, r2
 8006210:	460e      	mov	r6, r1
 8006212:	b921      	cbnz	r1, 800621e <_realloc_r+0x14>
 8006214:	4611      	mov	r1, r2
 8006216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800621a:	f7ff be0d 	b.w	8005e38 <_malloc_r>
 800621e:	b922      	cbnz	r2, 800622a <_realloc_r+0x20>
 8006220:	f7ff fdbc 	bl	8005d9c <_free_r>
 8006224:	4625      	mov	r5, r4
 8006226:	4628      	mov	r0, r5
 8006228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622a:	f000 f821 	bl	8006270 <_malloc_usable_size_r>
 800622e:	42a0      	cmp	r0, r4
 8006230:	d20f      	bcs.n	8006252 <_realloc_r+0x48>
 8006232:	4621      	mov	r1, r4
 8006234:	4638      	mov	r0, r7
 8006236:	f7ff fdff 	bl	8005e38 <_malloc_r>
 800623a:	4605      	mov	r5, r0
 800623c:	2800      	cmp	r0, #0
 800623e:	d0f2      	beq.n	8006226 <_realloc_r+0x1c>
 8006240:	4631      	mov	r1, r6
 8006242:	4622      	mov	r2, r4
 8006244:	f7ff fab6 	bl	80057b4 <memcpy>
 8006248:	4631      	mov	r1, r6
 800624a:	4638      	mov	r0, r7
 800624c:	f7ff fda6 	bl	8005d9c <_free_r>
 8006250:	e7e9      	b.n	8006226 <_realloc_r+0x1c>
 8006252:	4635      	mov	r5, r6
 8006254:	e7e7      	b.n	8006226 <_realloc_r+0x1c>

08006256 <__ascii_wctomb>:
 8006256:	b149      	cbz	r1, 800626c <__ascii_wctomb+0x16>
 8006258:	2aff      	cmp	r2, #255	; 0xff
 800625a:	bf85      	ittet	hi
 800625c:	238a      	movhi	r3, #138	; 0x8a
 800625e:	6003      	strhi	r3, [r0, #0]
 8006260:	700a      	strbls	r2, [r1, #0]
 8006262:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006266:	bf98      	it	ls
 8006268:	2001      	movls	r0, #1
 800626a:	4770      	bx	lr
 800626c:	4608      	mov	r0, r1
 800626e:	4770      	bx	lr

08006270 <_malloc_usable_size_r>:
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f18      	subs	r0, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfbc      	itt	lt
 800627a:	580b      	ldrlt	r3, [r1, r0]
 800627c:	18c0      	addlt	r0, r0, r3
 800627e:	4770      	bx	lr

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
